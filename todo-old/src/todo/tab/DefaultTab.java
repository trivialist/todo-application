/**
 * This file is part of 'Todo Application'
 * 
 * @see			http://www.konzept-e.de/
 * @copyright	2006-2011 Konzept-e für Bildung und Soziales GmbH
 * @author		Marcus Hertel, Sven Skrabal
 * @license		LGPL - http://www.gnu.org/licenses/lgpl.html
 * 
 */
package todo.tab;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import todo.db.DatabaseEmployeeConnect;
import todo.db.DatabaseTodoConnect;
import todo.gui.MainGui;
import todo.report.CategoryReport;
import todo.report.OpenTodoReport;
import todo.report.PersonalItemReport;
import todo.report.ReminderReport;
import todo.tablemodel.CategoryTodoTableModel;
import todo.tablemodel.OpListTableModel;
import todo.tablemodel.PersonalTodoTableModel;
import todo.util.GlobalError;
import todo.util.UpdateDataMethod;

public class DefaultTab extends javax.swing.JPanel
{
	private MainGui mainGui;
	private Vector employees = new Vector();
	private Vector topics = new Vector();
	private Vector categories = new Vector();
	private Vector areas = new Vector();
	private Vector meetingTypes = new Vector();
	private Vector meetingDates = new Vector();
	
	/** Creates new form DefaultTab */
	public DefaultTab(MainGui mainGui)
	{
		this.mainGui = mainGui;
		
		initComponents();
		
		employees.add("");
		employees.add("Alle Mitarbeiter");
		getAllEmployees();
		topics.add("");
		getAllTopics();
		categories.add("");
		getAllCategories();
		areas.add("");
		getAllAreas();
		meetingTypes.add("");
		getAllMeetingTypes();
		meetingDates.add("");
		getAllMeetingDates();
		setComboBoxEmployees();
		setComboBoxFinStatus();
		setComboBoxCategory();
		setComboMeetingType();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxEmployee = new javax.swing.JComboBox();
        jButtonCreatePersonalProtocolList = new javax.swing.JButton();
        jButtonCreatePersonalProtocol = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxCategory = new javax.swing.JComboBox();
        jButtonCreateCategoryList = new javax.swing.JButton();
        CategoryListOutput = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jCalendarComboBoxReDate1 = new de.wannawork.jcalendar.JCalendarComboBox();
        jButtonCreateReDateList = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jComboBoxFinStatus = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboMeetingType = new javax.swing.JComboBox();
        jCalendarComboBoxReDate = new de.wannawork.jcalendar.JCalendarComboBox();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel1.setText("Protokolldatenbank");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/todo/gui/konzept-e.gif"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setOpaque(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Bitte in oberer Tabelle entsprechendes Element wählen.");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("Konzept-e für Bildung und Soziales GmbH");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Auswertung nach Kategorie und Status"));

        jLabel4.setText("Mitarbeiter");

        jButtonCreatePersonalProtocolList.setText("Liste");
        jButtonCreatePersonalProtocolList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreatePersonalProtocolListActionPerformed(evt);
            }
        });

        jButtonCreatePersonalProtocol.setText("Druckvorschau");
        jButtonCreatePersonalProtocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreatePersonalProtocolActionPerformed(evt);
            }
        });

        jLabel5.setText("Kategorie");

        jButtonCreateCategoryList.setText("Druckvorschau");
        jButtonCreateCategoryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateCategoryListActionPerformed(evt);
            }
        });

        CategoryListOutput.setText("Liste");
        CategoryListOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryListOutputActionPerformed(evt);
            }
        });

        jLabel6.setText("Wiedervorlage");

        jCalendarComboBoxReDate1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButtonCreateReDateList.setText("Druckvorschau");
        jButtonCreateReDateList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateReDateListActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Bearbeitungsstatus"));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBoxFinStatus, 0, 90, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jComboBoxFinStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCalendarComboBoxReDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButtonCreateReDateList)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonCreatePersonalProtocolList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonCreatePersonalProtocol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(CategoryListOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonCreateCategoryList)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButtonCreatePersonalProtocolList, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonCreatePersonalProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(CategoryListOutput)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonCreateCategoryList)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonCreateReDateList))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCalendarComboBoxReDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Offene-Punkte-Liste"));

        jLabel7.setText("WV-Datum");

        jLabel8.setText("Sitzungsart");

        jCalendarComboBoxReDate.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jCalendarComboBoxReDate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCalendarComboBoxReDateStateChanged(evt);
            }
        });

        jButton2.setText("Druckvorschau");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Liste");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboMeetingType, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCalendarComboBoxReDate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jCalendarComboBoxReDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jComboMeetingType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
	{//GEN-HEADEREND:event_jButton1ActionPerformed
		MainGui.showAboutBox();
	}//GEN-LAST:event_jButton1ActionPerformed

private void jButtonCreatePersonalProtocolListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreatePersonalProtocolListActionPerformed
	int empID = 0;
	if (jComboBoxEmployee.getSelectedItem().toString().equals("Alle Mitarbeiter"))
	{
		empID = -1;
	}

	if (jComboBoxEmployee.getSelectedItem().toString().equals(""))
	{
		JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. "
											+ "Sie haben keinen Mitarbeiter ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
	}
	else
	{
		if (jComboBoxFinStatus.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. "
												+ "Sie haben keinen Status ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			int statID = getFinStatusIDByName(jComboBoxFinStatus.getSelectedItem().toString());
			empID = getEmployeeIDByName(jComboBoxEmployee.getSelectedItem().toString());

			final int finalEmpID = empID;
			final int finalStatID = statID;

			DefaultScrollTab newTodoListTab = new DefaultScrollTab(new TodoListTab(new UpdateDataMethod()
			{
				@Override
				public AbstractTableModel dataModelHasChanged()
				{
					return new PersonalTodoTableModel(finalEmpID, finalStatID);
				}
			}));
			mainGui.addNewTab(newTodoListTab, "Persönliche-Liste");
		}
	}
}//GEN-LAST:event_jButtonCreatePersonalProtocolListActionPerformed

private void jButtonCreatePersonalProtocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreatePersonalProtocolActionPerformed
	new PersonalItemReport().createReport(jComboBoxEmployee.getSelectedItem().toString(), jComboBoxFinStatus.getSelectedItem().toString());
}//GEN-LAST:event_jButtonCreatePersonalProtocolActionPerformed

private void jButtonCreateCategoryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateCategoryListActionPerformed
	new CategoryReport().createReport(jComboBoxCategory.getSelectedItem().toString(), jComboBoxFinStatus.getSelectedItem().toString());
}//GEN-LAST:event_jButtonCreateCategoryListActionPerformed

private void CategoryListOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryListOutputActionPerformed
	if (jComboBoxFinStatus.getSelectedItem().toString().equals(""))
	{
		JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. Sie haben keinen Status ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
	}
	else
	{
		DefaultScrollTab newTodoListTab = new DefaultScrollTab(new TodoListTab(new UpdateDataMethod()
		{
			@Override
			public AbstractTableModel dataModelHasChanged()
			{
				return new CategoryTodoTableModel(getCategoryIDByName(jComboBoxCategory.getSelectedItem().toString()), getFinStatusIDByName(jComboBoxFinStatus.getSelectedItem().toString()));
			}
		}));
		mainGui.addNewTab(newTodoListTab, "Kategorie-Liste");
	}
}//GEN-LAST:event_CategoryListOutputActionPerformed

private void jButtonCreateReDateListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateReDateListActionPerformed
	new ReminderReport().createReport(jComboBoxFinStatus.getSelectedItem().toString(), jCalendarComboBoxReDate1.getCalendar().getTime());
}//GEN-LAST:event_jButtonCreateReDateListActionPerformed

private void jCalendarComboBoxReDateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCalendarComboBoxReDateStateChanged
	if (evt.getSource() == jCalendarComboBoxReDate)
	{
		Calendar glCal = Calendar.getInstance();
		glCal.set(jCalendarComboBoxReDate.getCalendar().get(Calendar.YEAR),
				  jCalendarComboBoxReDate.getCalendar().get(Calendar.MONTH) + 1,
				  jCalendarComboBoxReDate.getCalendar().get(Calendar.DAY_OF_MONTH));
	}
}//GEN-LAST:event_jCalendarComboBoxReDateStateChanged

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
	new OpenTodoReport().createReport(jComboMeetingType.getSelectedItem().toString(), jCalendarComboBoxReDate.getCalendar().getTime());
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
	if (jComboMeetingType.getSelectedItem().toString().equals(""))
	{
		JOptionPane.showMessageDialog(null, "Das Feld für die Auswahl der Sitzungsart ist leer bzw. wurde nicht gewählt!", "Fehler", JOptionPane.ERROR_MESSAGE);
	}
	else
	{
		DefaultScrollTab newTodoListTab = new DefaultScrollTab(new TodoListTab(new UpdateDataMethod()
		{
			@Override
			public AbstractTableModel dataModelHasChanged()
			{
				return new OpListTableModel(getMeetingTypeIDByName(jComboMeetingType.getSelectedItem().toString()), jCalendarComboBoxReDate.getCalendar().getTime());
			}
		}));
		mainGui.addNewTab(newTodoListTab, "Offene-Punkte-Liste");
	}
}//GEN-LAST:event_jButton3ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CategoryListOutput;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonCreateCategoryList;
    private javax.swing.JButton jButtonCreatePersonalProtocol;
    private javax.swing.JButton jButtonCreatePersonalProtocolList;
    private javax.swing.JButton jButtonCreateReDateList;
    private de.wannawork.jcalendar.JCalendarComboBox jCalendarComboBoxReDate;
    private de.wannawork.jcalendar.JCalendarComboBox jCalendarComboBoxReDate1;
    private javax.swing.JComboBox jComboBoxCategory;
    private javax.swing.JComboBox jComboBoxEmployee;
    private javax.swing.JComboBox jComboBoxFinStatus;
    private javax.swing.JComboBox jComboMeetingType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables

	private int getFinStatusIDByName(String statusName)
	{
		int statID = 0;
		Connection con = DatabaseTodoConnect.openDB();

		if (statusName.equals("Alle"))
		{
			return -1;
		}

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status WHERE Name='" + statusName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				statID = rst.getInt("StatusID");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(DefaultTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(con);
		return statID;
	}

	private int getEmployeeIDByName(String name)
	{
		int empID = -1;

		if (name.equals("Alle Mitarbeiter"))
		{
			return -1;
		}

		String parts[] = name.split(", ");
		Connection con = DatabaseEmployeeConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Nachname, Vorname, Personalnummer FROM Stammdaten "
						 + "WHERE Nachname LIKE '" + parts[0] + "' AND Vorname LIKE '" + parts[1] + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				empID = rst.getInt("Personalnummer");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MeetingReportTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(con);
		return empID;
	}

	private int getMeetingTypeIDByName(String meetingTypeName)
	{
		int meetingTypeId = -1;
		Connection con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsart WHERE Name='" + meetingTypeName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				meetingTypeId = rst.getInt("SitzungsartID");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(DefaultTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(con);
		return meetingTypeId;
	}

	private int getCategoryIDByName(String categoryName)
	{
		int catID = -1;
		Connection con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie WHERE Name='" + categoryName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				catID = rst.getInt("KategorieID");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(DefaultTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(con);
		return catID;
	}

	private void getAllEmployees()
	{
		Connection con = DatabaseEmployeeConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Nachname, Vorname FROM Stammdaten ORDER BY Nachname";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String lastName = rst.getString("Nachname");

				if (lastName != null)
				{
					String em = lastName + ", " + rst.getString("Vorname");
					employees.add(em);
				}
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(DefaultTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(con);
	}

	private void getAllTopics()
	{
		Connection con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Thema ORDER BY NAME";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String to = rst.getString("Name");
				topics.add(to);
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(DefaultTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(con);
	}

	private void getAllCategories()
	{
		Connection con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie ORDER BY NAME";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String ca = rst.getString("Name");
				categories.add(ca);
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(DefaultTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(con);
	}

	private void getAllAreas()
	{
		Connection con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Name FROM Bereich ORDER BY NAME";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String ar = rst.getString("Name");
				areas.add(ar);
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(DefaultTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(con);
	}

	private void getAllMeetingTypes()
	{
		Connection con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Name FROM Sitzungsart ORDER BY Name";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String mT = rst.getString("Name");
				meetingTypes.add(mT);
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(DefaultTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(con);
	}

	private void getAllMeetingDates()
	{
		Connection con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT DISTINCT Datum FROM Sitzungsdaten ORDER BY Datum DESC";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
				String date = sdf.format(rst.getDate("Datum"));
				meetingDates.add(date);
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(DefaultTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(con);
	}

	public void setComboBoxEmployees()
	{
		jComboBoxEmployee.removeAllItems();
		Enumeration e = employees.elements();

		while (e.hasMoreElements())
		{
			String em = String.valueOf(e.nextElement());
			jComboBoxEmployee.addItem(em);
		}

	}

	public void setComboBoxCategory()
	{
		jComboBoxCategory.removeAllItems();
		Enumeration e = categories.elements();

		while (e.hasMoreElements())
		{
			String ca = String.valueOf(e.nextElement());
			jComboBoxCategory.addItem(ca);
		}

	}

	public void setComboMeetingType()
	{
		jComboMeetingType.removeAllItems();
		Enumeration e = meetingTypes.elements();

		while (e.hasMoreElements())
		{
			String ca = String.valueOf(e.nextElement());
			jComboMeetingType.addItem(ca);
		}
	}

	public void setComboBoxFinStatus()
	{
		jComboBoxFinStatus.removeAllItems();
		jComboBoxFinStatus.addItem("");
		jComboBoxFinStatus.addItem("Alle");
		Connection con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				jComboBoxFinStatus.addItem(rst.getString("Name"));
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(DefaultTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(con);
	}
}
