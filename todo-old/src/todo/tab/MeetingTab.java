/**
 * This file is part of 'Todo Application'
 * 
 * @see			http://www.konzept-e.de/
 * @copyright	2006-2011 Konzept-e für Bildung und Soziales GmbH
 * @author		Marcus Hertel, Sven Skrabal
 * @license		LGPL - http://www.gnu.org/licenses/lgpl.html
 * 
 */
package todo.tab;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.tree.TreePath;
import todo.entity.Employee;
import todo.entity.Meeting;
import todo.entity.MeetingType;
import todo.db.DatabaseEmployeeConnect;
import todo.db.DatabaseTodoConnect;
import todo.gui.MainGui;
import todo.util.GlobalError;
import todo.tablemodel.EmployeeTreeModel;
import todo.tablemodel.EmployeeTreeModel.Group;
import todo.tablemodel.EmployeeTreeModel.NameLeaf;
import todo.tablemodel.ParticipantsTableModel;
import todo.util.RelationResolver;

public class MeetingTab extends javax.swing.JPanel
{
	private boolean createElement;
	private int meetingId;
	private Meeting currentMeeting = new Meeting();
	private static Connection databaseConnection;
	private ArrayList<Integer> participantsList = new ArrayList<Integer>();
	private Calendar calendarInstance = Calendar.getInstance();
	private MainGui mainGui;

	public MeetingTab(boolean createElement, int meetingId, MainGui mainGui)
	{
		this.createElement = createElement;
		this.meetingId = meetingId;
		this.mainGui = mainGui;

		initComponents();

		//init and load data in fields
		if (createElement == true)
		{
			newMeetingInit();
		}
		else
		{
			editMeetingInit();
			jTable2.setModel(new ParticipantsTableModel(participantsList, meetingId));
		}

		//init tree view for employees
		EmployeeTreeModel tm = (EmployeeTreeModel) jTreeParticipiants.getModel();
		EmployeeTreeModel.Group etm = (Group) tm.getRoot();
		ArrayList<Object> childs = etm.getChilds();

		//expand child-tree for "Verwaltung"
		for (Object child : childs)
		{
			if (child.toString().equals("Verwaltung"))
			{
				Object path[] =
				{
					tm.getRoot(), child
				};

				TreePath tp = new TreePath(path);
				jTreeParticipiants.expandPath(tp);

				break;
			}
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBoxMeetingType = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldPlace = new javax.swing.JTextField();
        jComboBoxProt = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jButtonSaveAndExit = new javax.swing.JButton();
        jCalendarComboBoxDate = new de.wannawork.jcalendar.JCalendarComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPaneParticipants = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButtonAddParticipant = new javax.swing.JButton();
        jButtonRemoveParticipant = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeParticipiants = new javax.swing.JTree();
        jTextAreaOtherParticipants = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldSubject = new javax.swing.JTextField();

        jLabel1.setText("Datum");

        jLabel2.setText("Ort");

        jLabel4.setText("Protokollant");

        jButtonSaveAndExit.setText("Speichern und schliessen");
        jButtonSaveAndExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveAndExitActionPerformed(evt);
            }
        });

        jCalendarComboBoxDate.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.shadow")));
        jCalendarComboBoxDate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCalendarComboBoxDateStateChanged(evt);
            }
        });

        jLabel5.setText("Sitzungsart");

        jLabel6.setText("Alle Mitarbeiter");

        jLabel7.setText("Teilnehmer");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPaneParticipants.setViewportView(jTable2);

        jButtonAddParticipant.setText(">");
        jButtonAddParticipant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddParticipantActionPerformed(evt);
            }
        });

        jButtonRemoveParticipant.setText("<");
        jButtonRemoveParticipant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveParticipantActionPerformed(evt);
            }
        });

        jLabel8.setText("Sonstige Teilnehmer");

        jTreeParticipiants.setModel(new EmployeeTreeModel());
        jTreeParticipiants.setRootVisible(false);
        jTreeParticipiants.setShowsRootHandles(true);
        jScrollPane1.setViewportView(jTreeParticipiants);

        jTextAreaOtherParticipants.setFont(new java.awt.Font("Tahoma", 0, 12));
        jTextAreaOtherParticipants.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("Betreff der Sitzung");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldSubject, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                    .addComponent(jTextAreaOtherParticipants, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCalendarComboBoxDate, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(210, 210, 210)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxMeetingType, 0, 240, Short.MAX_VALUE))))
                    .addComponent(jLabel8)
                    .addComponent(jButtonSaveAndExit)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldPlace, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxProt, 0, 240, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButtonRemoveParticipant, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButtonAddParticipant, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(205, 205, 205)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jScrollPaneParticipants, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCalendarComboBoxDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)))
                    .addComponent(jComboBoxMeetingType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxProt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPaneParticipants, 0, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jButtonAddParticipant)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemoveParticipant)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextAreaOtherParticipants, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSaveAndExit)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void jButtonSaveAndExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveAndExitActionPerformed
	{//GEN-HEADEREND:event_jButtonSaveAndExitActionPerformed
		//depending on creation or edititing call methods
		if (createElement == true)
		{
			newMeeting();
		}
		else
		{
			editMeeting();
		}

		//save participiants
		saveParticipants(meetingId, jTextAreaOtherParticipants.getText());

		//strange ... but it works :-/
		getParent().getParent().getParent().getParent().remove(getParent().getParent().getParent());
		
		mainGui.reloadTableData();
}//GEN-LAST:event_jButtonSaveAndExitActionPerformed

	private void jCalendarComboBoxDateStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jCalendarComboBoxDateStateChanged
	{//GEN-HEADEREND:event_jCalendarComboBoxDateStateChanged
		if (evt.getSource() == jCalendarComboBoxDate)
		{
			calendarInstance.set(jCalendarComboBoxDate.getCalendar().get(Calendar.YEAR), jCalendarComboBoxDate.getCalendar().get(Calendar.MONTH) + 1, jCalendarComboBoxDate.getCalendar().get(Calendar.DAY_OF_MONTH));
		}
}//GEN-LAST:event_jCalendarComboBoxDateStateChanged

	private void jButtonAddParticipantActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAddParticipantActionPerformed
	{//GEN-HEADEREND:event_jButtonAddParticipantActionPerformed
		//get selected element
		TreePath path = jTreeParticipiants.getSelectionPath();
		Object selectedObject = path.getPath()[path.getPathCount() - 1];

		//only add employee to table when a leaf was selected
		if (selectedObject instanceof NameLeaf)
		{
			NameLeaf selectedName = (NameLeaf) selectedObject;

			//dont insert a object twice
			if (!participantsList.contains(selectedName.getId()))
			{
				participantsList.add(selectedName.getId());
			}
		}
		else
		{
			JOptionPane.showMessageDialog(this, "Bitte wählen Sie einen Namen aus und nicht das übergeordnete Gruppenelement.");
		}

		//update table model
		jTable2.setModel(new ParticipantsTableModel(participantsList, meetingId));
}//GEN-LAST:event_jButtonAddParticipantActionPerformed

	private void jButtonRemoveParticipantActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRemoveParticipantActionPerformed
	{//GEN-HEADEREND:event_jButtonRemoveParticipantActionPerformed
		if (jTable2.getSelectedRow() != -1)
		{
			Object empID = jTable2.getValueAt(jTable2.getSelectedRow(), -1);
			Integer temp = new Integer(String.valueOf(empID));
			int ID = temp.intValue();

			//only remove item from list if its in there
			if (participantsList.contains(ID))
			{
				participantsList.remove((Integer) ID);
			}
		}

		//update table model
		jTable2.setModel(new ParticipantsTableModel(participantsList, meetingId));
}//GEN-LAST:event_jButtonRemoveParticipantActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddParticipant;
    private javax.swing.JButton jButtonRemoveParticipant;
    private javax.swing.JButton jButtonSaveAndExit;
    private de.wannawork.jcalendar.JCalendarComboBox jCalendarComboBoxDate;
    private javax.swing.JComboBox jComboBoxMeetingType;
    private javax.swing.JComboBox jComboBoxProt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneParticipants;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextAreaOtherParticipants;
    private javax.swing.JTextField jTextFieldPlace;
    private javax.swing.JTextField jTextFieldSubject;
    private javax.swing.JTree jTreeParticipiants;
    // End of variables declaration//GEN-END:variables

	private void saveParticipants(int meetingID, String othPart)
	{
		databaseConnection = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = databaseConnection.createStatement();
			String sql = "UPDATE Sitzungsdaten SET Sonstige = '" + othPart + "' WHERE SitzungsdatenID = " + meetingID;
			stmt.executeUpdate(sql);
			stmt.close();

			RelationResolver.updateRelations(databaseConnection, "meeting_attendee_personnel", "meetingID", participantsList, meetingID);
		}
		catch (Exception ex)
		{
			Logger.getLogger(MeetingTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(databaseConnection);
	}

	private void newMeetingInit()
	{
		jComboBoxMeetingType.addItem("Bitte wählen...");
		jComboBoxProt.addItem("Bitte wählen...");
		ArrayList<MeetingType> mt = getAllMeetingTypes();
		ArrayList<Employee> emp = getAllEmployees();

		for (int i = 0; i < mt.size(); i++)
		{
			jComboBoxMeetingType.addItem(mt.get(i).getMeetingType());
		}

		for (int i = 0; i < emp.size(); i++)
		{
			jComboBoxProt.addItem(emp.get(i).getLastName() + ", " + emp.get(i).getName());
		}
	}

	private void editMeetingInit()
	{
		ArrayList<MeetingType> mt = getAllMeetingTypes();
		ArrayList<Employee> emp = getAllEmployees();

		for (int i = 0; i < mt.size(); i++)
		{
			jComboBoxMeetingType.addItem(mt.get(i).getMeetingType());
		}

		for (int i = 0; i < emp.size(); i++)
		{
			jComboBoxProt.addItem(emp.get(i).getLastName() + ", " + emp.get(i).getName());
		}

		getMeetingData();
		getAllParticipants();

		calendarInstance.setTime(currentMeeting.getDate());
		jCalendarComboBoxDate.setCalendar(calendarInstance);
		jTextFieldPlace.setText(currentMeeting.getPlace());
		jComboBoxProt.setSelectedItem(getNameOfProt(currentMeeting.getProt()));
		jComboBoxMeetingType.setSelectedItem(currentMeeting.getMeetingType());
		jTextAreaOtherParticipants.setText(currentMeeting.getOtherPaticipants());
	}

	private void newMeeting()
	{
		currentMeeting.setDate(jCalendarComboBoxDate.getCalendar().getTime());
		currentMeeting.setMeetingType(String.valueOf(jComboBoxMeetingType.getSelectedItem()));
		currentMeeting.setMeetingTypeID(getMeetingTypeIDByName(currentMeeting.getMeetingType()));
		currentMeeting.setPlace(jTextFieldPlace.getText());

		if (!String.valueOf(jComboBoxProt.getSelectedItem()).equals("Bitte wählen..."))
		{
			currentMeeting.setProt(getProtIDByName(String.valueOf(jComboBoxProt.getSelectedItem())));
		}
		else
		{
			currentMeeting.setProt(1);
		}

		if (!currentMeeting.getMeetingType().equals("") && !jTextFieldSubject.getText().equals(""))
		{
			databaseConnection = DatabaseTodoConnect.openDB();

			try
			{
				databaseConnection.setAutoCommit(false);
				Statement stmt2 = databaseConnection.createStatement();
				ResultSet rst2 = stmt2.executeQuery("SELECT MAX(SitzungsdatenID) AS ID FROM Sitzungsdaten");
				rst2.next();
				meetingId = rst2.getInt("ID") + 1;
				rst2.close();
				stmt2.close();
				
				Statement stmt = databaseConnection.createStatement();
				java.sql.Date dat = new java.sql.Date(currentMeeting.getDate().getTime());
				String sql = "INSERT INTO Sitzungsdaten (SitzungsdatenID, Datum, SitzungsartID, "
							 + "Ort, Protokollant, Geloescht, Betreff) VALUES (" + meetingId + ", '" + dat + "', "
							 + currentMeeting.getMeetingTypeID() + ", '" + currentMeeting.getPlace() + "', '"
							 + currentMeeting.getProt() + "', false, '" + jTextFieldSubject.getText() + "')";
				stmt.executeUpdate(sql);
				
				databaseConnection.commit();
				databaseConnection.setAutoCommit(true);
				
				stmt.close();
			}
			catch (Exception ex)
			{
				Logger.getLogger(MeetingTab.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}

			DatabaseTodoConnect.closeDB(databaseConnection);
		}
		else
		{
			JOptionPane.showMessageDialog(this, "Die Felder Datum, Sitzungsart, Ort und Betreff müssen ausgefüllt werden!");
		}
	}

	private void editMeeting()
	{
		currentMeeting.setDate(jCalendarComboBoxDate.getCalendar().getTime());
		currentMeeting.setMeetingType(String.valueOf(jComboBoxMeetingType.getSelectedItem()));
		currentMeeting.setMeetingTypeID(getMeetingTypeIDByName(currentMeeting.getMeetingType()));
		currentMeeting.setPlace(jTextFieldPlace.getText());

		if (!String.valueOf(jComboBoxProt.getSelectedItem()).equals("Bitte wählen..."))
		{
			currentMeeting.setProt(getProtIDByName(String.valueOf(jComboBoxProt.getSelectedItem())));
		}
		else
		{
			currentMeeting.setProt(1);
		}

		if (!currentMeeting.getMeetingType().equals(""))
		{
			databaseConnection = DatabaseTodoConnect.openDB();

			try
			{
				Statement stmt = databaseConnection.createStatement();
				java.sql.Date dat = new java.sql.Date(currentMeeting.getDate().getTime());
				String sql = "UPDATE Sitzungsdaten SET Datum = '" + dat + "', SitzungsartID = " + currentMeeting.getMeetingTypeID() + ", Ort = '" + currentMeeting.getPlace() + "', Protokollant = " + currentMeeting.getProt() + ", Betreff = '" + jTextFieldSubject.getText() + "' WHERE SitzungsdatenID = " + meetingId;
				stmt.executeUpdate(sql);
				stmt.close();
			}
			catch (Exception ex)
			{
				Logger.getLogger(MeetingTab.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}

			DatabaseTodoConnect.closeDB(databaseConnection);
		}
		else
		{
			JOptionPane.showMessageDialog(this, "Die Felder Datum, Sitzungsart und Ort müssen ausgefüllt werden!");
		}
	}

	private String getNameOfProt(int protID)
	{
		String protName = "";
		Connection employeeDatabaseConnection = DatabaseEmployeeConnect.openDB();

		try
		{
			Statement stmt = employeeDatabaseConnection.createStatement();
			String sql = "SELECT * FROM Stammdaten WHERE Personalnummer = " + protID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				protName = rst.getString("Nachname") + ", " + rst.getString("Vorname");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MeetingTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(employeeDatabaseConnection);

		return protName;
	}

	private ArrayList getAllEmployees()
	{
		ArrayList<Employee> employeeObjects = new ArrayList<Employee>();
		databaseConnection = DatabaseEmployeeConnect.openDB();

		try
		{
			Statement stmt = databaseConnection.createStatement();
			String sql = "SELECT * FROM Stammdaten ORDER BY Nachname ASC";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String lastName = rst.getString("Nachname");
				
				if(lastName != null)
				{
					employeeObjects.add(new Employee((rst.getInt("Personalnummer")), rst.getString("Vorname"), lastName));
				}
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MeetingTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(databaseConnection);

		return employeeObjects;
	}

	private ArrayList getAllMeetingTypes()
	{
		ArrayList<MeetingType> meetingTypeObjects = new ArrayList<MeetingType>();
		databaseConnection = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = databaseConnection.createStatement();
			String sql = "SELECT * FROM Sitzungsart ORDER BY Name ASC";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				meetingTypeObjects.add(new MeetingType(rst.getInt("SitzungsartID"),
													   rst.getString("Name")));
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MeetingTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(databaseConnection);

		return meetingTypeObjects;
	}

	private void getMeetingData()
	{
		databaseConnection = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = databaseConnection.createStatement();
			String sql = "SELECT * FROM Sitzungsdaten WHERE SitzungsdatenID = " + meetingId;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				currentMeeting.setDate(rst.getDate("Datum"));
				currentMeeting.setPlace(rst.getString("Ort"));
				currentMeeting.setProt(rst.getInt("Protokollant"));
				currentMeeting.setOtherParticipants(rst.getString("Sonstige"));
				jTextFieldSubject.setText(rst.getString("Betreff"));
				int meetingTypeID = rst.getInt("SitzungsartID");
				currentMeeting.setMeetingTypeID(meetingTypeID);
				Statement stmt2 = databaseConnection.createStatement();
				String sql2 = "SELECT * FROM Sitzungsart WHERE SitzungsartID = " + meetingTypeID;
				ResultSet rst2 = stmt2.executeQuery(sql2);

				while (rst2.next())
				{
					currentMeeting.setMeetingType(rst2.getString("Name"));
				}

				rst2.close();
				stmt2.close();

			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MeetingTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(databaseConnection);
	}

	private int getMeetingTypeIDByName(String meetingType)
	{
		int mtID = 0;
		databaseConnection = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = databaseConnection.createStatement();
			String sql = "SELECT * FROM Sitzungsart WHERE Name = '" + currentMeeting.getMeetingType() + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				mtID = rst.getInt("SitzungsartID");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MeetingTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(databaseConnection);

		return mtID;
	}

	private int getProtIDByName(String protName)
	{
		int prID = 0;
		databaseConnection = DatabaseEmployeeConnect.openDB();

		String name = "";
		String lastName = "";

		String splitName[] = protName.split(",");
		lastName = splitName[0].trim();
		name = splitName[1].trim();

		try
		{
			Statement stmt = databaseConnection.createStatement();
			String sql = "SELECT * FROM Stammdaten WHERE Vorname = '" + name + "' AND Nachname = '" + lastName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				prID = rst.getInt("Personalnummer");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MeetingTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(databaseConnection);

		return prID;
	}

	private void getAllParticipants()
	{
		participantsList.clear();
		databaseConnection = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = databaseConnection.createStatement();
			String sql = "SELECT personnelID FROM meeting_attendee_personnel WHERE meetingID = " + meetingId;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				participantsList.add(rst.getInt("personnelID"));
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MeetingTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(databaseConnection);
	}
}
