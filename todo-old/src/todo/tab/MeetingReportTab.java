/**
 * This file is part of 'Todo Application'
 * 
 * @see			http://www.konzept-e.de/
 * @copyright	2006-2011 Konzept-e für Bildung und Soziales GmbH
 * @author		Marcus Hertel, Sven Skrabal
 * @license		LGPL - http://www.gnu.org/licenses/lgpl.html
 * 
 */
package todo.tab;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import todo.db.DatabaseTodoConnect;
import todo.gui.MainGui;
import todo.report.LongProtocolReport;
import todo.report.ShortProtocolReport;
import todo.util.DateFormater;
import todo.util.FocusGainedNotifier;

public class MeetingReportTab extends javax.swing.JPanel implements FocusGainedNotifier
{
	private int meetingId;
	private MainGui mainGui;

	public MeetingReportTab(int meetingId, MainGui mainGui)
	{
		this.meetingId = meetingId;
		this.mainGui = mainGui;

		initComponents();

		setMeetingOverviewTitle();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("- kein Text -");

        jButton1.setText("Kurzes Protokoll erstellen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Langes Protokoll erstellen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
	new ShortProtocolReport().createReport(meetingId);
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
	new LongProtocolReport().createReport(meetingId);
}//GEN-LAST:event_jButton2ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

	@Override
	public void focusGained()
	{
		//load list of corresponding meeting items in table on main gui
		mainGui.updateTableModel(meetingId);
	}

	private void setMeetingOverviewTitle()
	{
		//look up meeting date and type
		Connection tmpCon = DatabaseTodoConnect.openDB();

		try
		{
			Statement tmpStmt = tmpCon.createStatement();
			ResultSet tmpRst = tmpStmt.executeQuery("SELECT * FROM Sitzungsdaten INNER JOIN Sitzungsart ON Sitzungsdaten.SitzungsartID = Sitzungsart.SitzungsartID WHERE Sitzungsdaten.SitzungsdatenID = " + meetingId);

			//properly set meeting date and type
			if (tmpRst.next())
			{
				String displayDate = new DateFormater(tmpRst.getDate("Datum")).toString();
				String tmpSubject = tmpRst.getString("Betreff");
				
				if(tmpSubject == null)
				{
					tmpSubject = "";
				}
				else
				{
					tmpSubject = "'" + tmpSubject + "' ";
				}
				
				jLabel1.setText("Auswertung von Sitzung " + tmpSubject + "vom " + displayDate + " - " + tmpRst.getString("Name"));
			}
			else
			{
				jLabel1.setText("Auswertung von Sitzung");
			}

			tmpRst.close();
			tmpStmt.close();
		}
		catch (SQLException ex)
		{
			Logger.getLogger(MeetingReportTab.class.getName()).log(Level.SEVERE, null, ex);
		}

		DatabaseTodoConnect.closeDB(tmpCon);
	}
}
