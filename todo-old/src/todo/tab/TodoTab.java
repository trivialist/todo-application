/**
 * This file is part of 'Todo Application'
 * 
 * @see			http://www.konzept-e.de/
 * @copyright	2006-2011 Konzept-e für Bildung und Soziales GmbH
 * @author		Marcus Hertel, Sven Skrabal
 * @license		LGPL - http://www.gnu.org/licenses/lgpl.html
 * 
 */
package todo.tab;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.tree.TreePath;
import todo.db.DatabaseEmployeeConnect;
import todo.db.DatabaseTodoConnect;
import todo.dialog.TodoNoteDialog;
import todo.entity.Area;
import todo.entity.Category;
import todo.entity.FinStatus;
import todo.entity.Institution;
import todo.entity.MeetingType;
import todo.entity.Todo;
import todo.entity.Topic;
import todo.gui.MainGui;
import todo.gui.htmleditor.HTMLEditor;
import todo.joc.TaskRequest;
import todo.tablemodel.EmployeeTreeModel;
import todo.tablemodel.EmployeeTreeModel.Group;
import todo.tablemodel.EmployeeTreeModel.NameLeaf;
import todo.tablemodel.InvolvedTableModel;
import todo.tablemodel.ResponsibleTableModel;
import todo.util.DateFormater;
import todo.util.GlobalError;
import todo.util.RelationResolver;

public class TodoTab extends javax.swing.JPanel 
{
	private boolean createElement;
	private int todoId;
	private String cat;
	private String topic;
	private Todo td = new Todo();
	private static Connection con;
	private ArrayList<Integer> responsible = new ArrayList<Integer>();
	private ArrayList<Integer> involved = new ArrayList<Integer>();
	private int meetingId;
	private Calendar cal;
	private boolean tbz_status = false;
	private boolean reDateChange = false;
	private boolean hideElement = false;
	private HTMLEditor htmlEditor = new HTMLEditor();
	private MainGui mainGui;

	/** Creates new form TodoTab */
	public TodoTab(boolean createElement, int todoId, int meetingId, MainGui mainGui)
	{
		this.createElement = createElement;
		this.meetingId = meetingId;
		this.todoId = todoId;
		this.mainGui = mainGui;
		cal = Calendar.getInstance();
		initComponents();
		jComboBoxTopic.setEnabled(false);
		jButtonSendTask.setVisible(false);

		if (createElement == true)
		{
			//Neues Protokollelement soll angelegt werden
			newTodoInit();
		}
		else
		{
			//Bestehendes Protokollelement soll bearbeitet werden
			editTodoInit(true);
		}

		jTableInvolved.setAutoCreateRowSorter(true);
		jTableResponsibles.setAutoCreateRowSorter(true);
		jScrollPane1.setViewportView(htmlEditor);

		EmployeeTreeModel tm = (EmployeeTreeModel) jTreeEmployee.getModel();
		EmployeeTreeModel.Group etm = (Group) tm.getRoot();
		ArrayList<Object> childs = etm.getChilds();
		for (Object child : childs)
		{
			if (child.toString().equals("Verwaltung"))
			{
				Object path[] =
				{
					tm.getRoot(), child
				};
				TreePath tp = new TreePath(path);
				jTreeEmployee.expandPath(tp);
				break;
			}
		}
		
		jTableInvolved.setModel(new InvolvedTableModel(involved, meetingId));
		jTableResponsibles.setModel(new ResponsibleTableModel(responsible, meetingId));
		
		if(meetingId == 0)
		{
			meetingId = td.getMeetingID();
		}
		
		setMeetingOverviewTitle();
	}
	
	private void setMeetingOverviewTitle()
	{
		//look up meeting date and type
		Connection tmpCon = DatabaseTodoConnect.openDB();

		try
		{
			Statement tmpStmt = tmpCon.createStatement();
			ResultSet tmpRst = tmpStmt.executeQuery("SELECT * FROM Sitzungsdaten INNER JOIN Sitzungsart ON Sitzungsdaten.SitzungsartID = Sitzungsart.SitzungsartID WHERE Sitzungsdaten.SitzungsdatenID = " + meetingId);
			
			//properly set meeting date and type
			if (tmpRst.next())
			{
				String displayDate = new DateFormater(tmpRst.getDate("Datum")).toString();
				jLabel13.setText("Protokollelement für Sitzung vom " + displayDate + " - " + tmpRst.getString("Name"));
			}
			else
			{
				jLabel13.setText("Protokollelement für Sitzung");
			}

			tmpRst.close();
			tmpStmt.close();
		}
		catch (SQLException ex)
		{
			Logger.getLogger(MeetingReportTab.class.getName()).log(Level.SEVERE, null, ex);
		}

		DatabaseTodoConnect.closeDB(tmpCon);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jTextHeading = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTreeEmployee = new javax.swing.JTree();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableResponsibles = new javax.swing.JTable();
        jButtonAddResponsible = new javax.swing.JButton();
        jButtonRemoveResponsible = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableInvolved = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jButtonAddInvolved = new javax.swing.JButton();
        jButtonRemoveInvolved = new javax.swing.JButton();
        jButtonSaveAndExit = new javax.swing.JButton();
        jButtonSendTask = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxCategory = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxInstitution = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jComboBoxStatus = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jComboBoxArea = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jComboBoxTopic = new javax.swing.JComboBox();
        jCheckBoxNoReDate = new javax.swing.JCheckBox();
        jCalendarComboBoxReDate = new de.wannawork.jcalendar.JCalendarComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxReMeetType = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();

        jLabel4.setText("Überschrift bzw. Tagesordnungspunkt");

        jTreeEmployee.setModel(new EmployeeTreeModel());
        jTreeEmployee.setRootVisible(false);
        jTreeEmployee.setShowsRootHandles(true);
        jScrollPane5.setViewportView(jTreeEmployee);

        jLabel7.setText("Mitarbeiter");

        jLabel8.setText("Verantwortliche");

        jTableResponsibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTableResponsibles);

        jButtonAddResponsible.setText(">");
        jButtonAddResponsible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddResponsibleActionPerformed(evt);
            }
        });

        jButtonRemoveResponsible.setText("<");
        jButtonRemoveResponsible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveResponsibleActionPerformed(evt);
            }
        });

        jTableInvolved.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTableInvolved);

        jLabel9.setText("Beteiligte");

        jButtonAddInvolved.setText(">");
        jButtonAddInvolved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddInvolvedActionPerformed(evt);
            }
        });

        jButtonRemoveInvolved.setText("<");
        jButtonRemoveInvolved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveInvolvedActionPerformed(evt);
            }
        });

        jButtonSaveAndExit.setText("Speichern und Schliessen");
        jButtonSaveAndExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveAndExitActionPerformed(evt);
            }
        });

        jButtonSendTask.setText("Aufgabe erstellen");
        jButtonSendTask.setActionCommand("Aufgabe senden");
        jButtonSendTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendTaskActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Normales Element");

        jLabel1.setText("Kategorie");

        jLabel2.setText("Institution");

        jLabel10.setText("Status");

        jLabel11.setText("Bereich");

        jLabel12.setText("Thema");

        jCheckBoxNoReDate.setText("keine Wiedervorlage");
        jCheckBoxNoReDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxNoReDate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBoxNoReDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxNoReDateItemStateChanged(evt);
            }
        });

        jCalendarComboBoxReDate.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.shadow")));
        jCalendarComboBoxReDate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCalendarComboBoxReDateStateChanged(evt);
            }
        });

        jLabel5.setText("an Datum");

        jLabel6.setText("bei Sitzung");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("- kein Text -");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 899, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxNoReDate)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCalendarComboBoxReDate, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxReMeetType, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4)
                            .addComponent(jTextHeading, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButtonRemoveResponsible, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonAddResponsible))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButtonRemoveInvolved, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonAddInvolved)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addGap(377, 377, 377))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonSaveAndExit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSendTask)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxArea, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxTopic, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxInstitution, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)))
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jComboBoxArea, jComboBoxCategory, jComboBoxInstitution, jComboBoxStatus, jComboBoxTopic});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jComboBoxArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jComboBoxTopic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxInstitution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCheckBoxNoReDate)
                    .addComponent(jLabel5)
                    .addComponent(jCalendarComboBoxReDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jComboBoxReMeetType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, 0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonAddResponsible)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonRemoveResponsible, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonAddInvolved, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonRemoveInvolved, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSaveAndExit)
                    .addComponent(jButtonSendTask)
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void jCheckBoxNoReDateItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jCheckBoxNoReDateItemStateChanged
	{//GEN-HEADEREND:event_jCheckBoxNoReDateItemStateChanged
		if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED)
		{
			jCalendarComboBoxReDate.setEnabled(false);
			jComboBoxReMeetType.setEnabled(false);
		}
		else
		{
			jCalendarComboBoxReDate.setEnabled(true);
			jComboBoxReMeetType.setEnabled(true);
		}
}//GEN-LAST:event_jCheckBoxNoReDateItemStateChanged

	private void jCalendarComboBoxReDateStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jCalendarComboBoxReDateStateChanged
	{//GEN-HEADEREND:event_jCalendarComboBoxReDateStateChanged
		if (evt.getSource() == jCalendarComboBoxReDate)
		{
			cal.set(jCalendarComboBoxReDate.getCalendar().get(Calendar.YEAR),
					jCalendarComboBoxReDate.getCalendar().get(Calendar.MONTH) + 1,
					jCalendarComboBoxReDate.getCalendar().get(Calendar.DAY_OF_MONTH));
			reDateChange = true;
		}
}//GEN-LAST:event_jCalendarComboBoxReDateStateChanged

	private void jButtonAddResponsibleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAddResponsibleActionPerformed
	{//GEN-HEADEREND:event_jButtonAddResponsibleActionPerformed
		TreePath path = jTreeEmployee.getSelectionPath();
		Object selectedObject = path.getPath()[path.getPathCount() - 1];

		if (selectedObject instanceof NameLeaf)
		{
			NameLeaf selectedName = (NameLeaf) selectedObject;
			if (!responsible.contains(selectedName.getId()))
			{
				responsible.add(selectedName.getId());
			}
		}
		else
		{
			JOptionPane.showMessageDialog(this, "Bitte wählen Sie einen Namen aus und nicht das übergeordnete Gruppenelement.");
		}
		
		jTableResponsibles.setModel(new ResponsibleTableModel(responsible, meetingId));
}//GEN-LAST:event_jButtonAddResponsibleActionPerformed

	private void jButtonRemoveResponsibleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRemoveResponsibleActionPerformed
	{//GEN-HEADEREND:event_jButtonRemoveResponsibleActionPerformed
		if (jTableResponsibles.getSelectedRow() != -1)
		{
			Object respID = jTableResponsibles.getValueAt(jTableResponsibles.getSelectedRow(), -1);
			Integer temp = new Integer(String.valueOf(respID));
			int rID = temp.intValue();
			if (responsible.contains(rID))
			{
				responsible.remove((Integer) rID);
			}
		}
		
		jTableResponsibles.setModel(new ResponsibleTableModel(responsible, meetingId));
}//GEN-LAST:event_jButtonRemoveResponsibleActionPerformed

	private void jButtonAddInvolvedActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAddInvolvedActionPerformed
	{//GEN-HEADEREND:event_jButtonAddInvolvedActionPerformed
		TreePath path = jTreeEmployee.getSelectionPath();
		Object selectedObject = path.getPath()[path.getPathCount() - 1];

		if (selectedObject instanceof NameLeaf)
		{
			NameLeaf selectedName = (NameLeaf) selectedObject;
			if (!involved.contains(selectedName.getId()))
			{
				involved.add(selectedName.getId());
			}
		}
		else
		{
			JOptionPane.showMessageDialog(this, "Bitte wählen Sie einen Namen aus und nicht das übergeordnete Gruppenelement.");
		}
		jTableInvolved.setModel(new InvolvedTableModel(involved, meetingId));
}//GEN-LAST:event_jButtonAddInvolvedActionPerformed

	private void jButtonRemoveInvolvedActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRemoveInvolvedActionPerformed
	{//GEN-HEADEREND:event_jButtonRemoveInvolvedActionPerformed
		if (jTableInvolved.getSelectedRow() != -1)
		{
			Object invID = jTableInvolved.getValueAt(jTableInvolved.getSelectedRow(), -1);
			Integer temp = new Integer(String.valueOf(invID));
			int iID = temp.intValue();
			if (involved.contains(iID))
			{
				involved.remove((Integer) iID);
			}
		}
		jTableInvolved.setModel(new InvolvedTableModel(involved, meetingId));
}//GEN-LAST:event_jButtonRemoveInvolvedActionPerformed

	private void jButtonSaveAndExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveAndExitActionPerformed
	{//GEN-HEADEREND:event_jButtonSaveAndExitActionPerformed

		if (jComboBoxStatus.getSelectedItem().toString().equals("Bitte wählen..."))
		{
			JOptionPane.showMessageDialog(this, "Es wurde kein gültiger Wert für das Feld Status gewählt!");
			return;
		}

		if (createElement == true)
		{
			if (htmlEditor.getText().equals("") || htmlEditor.getText().equals("<p></p>") || jTextHeading.getText().equals(""))
			{
				JOptionPane.showMessageDialog(this, "Die beiden Eingaben für die Überschrift sowie für "
													+ "den Inhalt müssen ausgefüllt werden.");
				return;
			}

			if (jComboBoxCategory.getSelectedItem().toString().equals("Aufgabe") && jCheckBoxNoReDate.isSelected() == true)
			{
				JOptionPane.showMessageDialog(null, "Fehler beim Speichern. "
													+ "Für die Kategorie 'Aufgabe' muss ein Wiedervorlagedatum angegeben werden",
											  "Fehler", JOptionPane.ERROR_MESSAGE);
				reDateChange = true;
			}
			else
			{
				if (jCheckBoxNoReDate.isSelected())
				{
					try
					{
						newTodo();
						
						mainGui.reloadTableData();
						
						//strange ... but it works :-/
						getParent().getParent().getParent().getParent().remove(getParent().getParent().getParent());
					}
					catch (Exception ex)
					{
						Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
					}
				}
				else
				{
					// Überprüfen ob Wiedervorlagedatum nach aktuellem Datum -> sonst Fehlermeldung und break;
					if (jCalendarComboBoxReDate.getCalendar().getTime().before(new java.util.Date()))
					{
						JOptionPane.showMessageDialog(null, "Fehler beim Speichern. "
															+ "Das angegebene Wiedervorlagedatum liegt zeitlich vor dem aktuellen Datum.\n"
															+ "Wählen Sie ein Datum das in der Zukunft liegt.",
													  "Fehler", JOptionPane.ERROR_MESSAGE);
						reDateChange = true;
					}
					else
					{
						try
						{
							newTodo();
							
							mainGui.reloadTableData();
							
							//strange ... but it works :-/
							getParent().getParent().getParent().getParent().remove(getParent().getParent().getParent());
						}
						catch (Exception ex)
						{
							Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
						}
					}
				}
			}
		}
		else
		{
			try
			{
				editTodo();
				
				mainGui.reloadTableData();
				
				//strange ... but it works :-/
				getParent().getParent().getParent().getParent().remove(getParent().getParent().getParent());
			}
			catch (Exception ex)
			{
				Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
}//GEN-LAST:event_jButtonSaveAndExitActionPerformed

	private void jButtonSendTaskActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSendTaskActionPerformed
	{//GEN-HEADEREND:event_jButtonSendTaskActionPerformed

		Vector respMailVec = new Vector();  //enthält Mail-Adressen der unter Verantwortliche eingtragenen MA

		if (!responsible.isEmpty())
		{
			try
			{
				for (int empID : responsible)
				{
					respMailVec.addElement(getMailAddressByEmpID(empID));
				}
			}
			catch (Exception ex)
			{
				Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
				JOptionPane.showMessageDialog(null, "Fehler beim Ermitteln von E-Mail Adressen.", "Fehler", JOptionPane.ERROR_MESSAGE);
			}
		}
		else
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Ermitteln von E-Mail Adressen."
												+ "Es wurden keine Verantwortlichen festgelegt!", "Fehler", JOptionPane.ERROR_MESSAGE);
		}

		TaskRequest task = new TaskRequest("TOP x: " + jComboBoxArea.getSelectedItem().toString() + " - "
										   + jComboBoxTopic.getSelectedItem().toString(), jComboBoxArea.getSelectedItem().toString(),
										   jComboBoxTopic.getSelectedItem().toString(), jTextHeading.getText(),
										   jCalendarComboBoxReDate.getCalendar().getTime(), respMailVec);
		if (task.isSet())
		{
			task.create();
			//Timestamp setzen und in DB speichern
			//INSERT INTO Task VALUES (ProtElemID, created)
		}
		else
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen der Aufgabe. "
												+ "Outlook-Aufgabe konnte nicht erstellt werden", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
}//GEN-LAST:event_jButtonSendTaskActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddInvolved;
    private javax.swing.JButton jButtonAddResponsible;
    private javax.swing.JButton jButtonRemoveInvolved;
    private javax.swing.JButton jButtonRemoveResponsible;
    private javax.swing.JButton jButtonSaveAndExit;
    private javax.swing.JButton jButtonSendTask;
    private de.wannawork.jcalendar.JCalendarComboBox jCalendarComboBoxReDate;
    private javax.swing.JCheckBox jCheckBoxNoReDate;
    private javax.swing.JComboBox jComboBoxArea;
    private javax.swing.JComboBox jComboBoxCategory;
    private javax.swing.JComboBox jComboBoxInstitution;
    private javax.swing.JComboBox jComboBoxReMeetType;
    private javax.swing.JComboBox jComboBoxStatus;
    private javax.swing.JComboBox jComboBoxTopic;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTableInvolved;
    private javax.swing.JTable jTableResponsibles;
    private javax.swing.JTextField jTextHeading;
    private javax.swing.JTree jTreeEmployee;
    // End of variables declaration//GEN-END:variables

	public void newTodoInit()
	{
		clearComboBoxes();
		jComboBoxCategory.addItem("Bitte wählen...");
		jComboBoxInstitution.addItem("Bitte wählen...");
		jComboBoxStatus.addItem("Bitte wählen...");
		jComboBoxArea.addItem("Bitte wählen...");
		jComboBoxTopic.addItem("Bitte wählen...");
		initComboBoxes();
		jCheckBoxNoReDate.setSelected(true);
		if (isTask())
		{
			jButtonSendTask.setVisible(true);
		}
		else
		{
			jButtonSendTask.setVisible(false);
		}
	}

	public void initComboBoxes()
	{
		ArrayList<Category> catAL = getAllCategories();
		ArrayList<Institution> inst = getAllInstitutions();
		ArrayList<FinStatus> stat = getEveryStatus();
		ArrayList<Area> area = getAllAreas();
		ArrayList<Topic> topicAL = getAllTopics();
		ArrayList<MeetingType> meetTypeAL = getAllMeetingTypes();

		for (int i = 0; i < catAL.size(); i++)
		{
			jComboBoxCategory.addItem(catAL.get(i).getCatName());
		}

		for (int i = 0; i < inst.size(); i++)
		{
			jComboBoxInstitution.addItem(inst.get(i).getInstitution());
		}

		for (int i = 0; i < stat.size(); i++)
		{
			jComboBoxStatus.addItem(stat.get(i).getStatusName());
		}

		for (int i = 0; i < area.size(); i++)
		{
			jComboBoxArea.addItem(area.get(i).getAreaName());
		}

		for (int i = 0; i < topicAL.size(); i++)
		{
			jComboBoxTopic.addItem(topicAL.get(i).getName());
		}

		// "Alle" muss hinzugefügt werden da Standard-Wert,
		// aber nicht in Tabelle Sitzungsart enthalten
		jComboBoxReMeetType.addItem("Alle");
		for (int i = 0; i < meetTypeAL.size(); i++)
		{
			jComboBoxReMeetType.addItem(meetTypeAL.get(i).getMeetingType());
		}
	}

	public void newTodo() throws Exception
	{
		PreparedStatement pStmt = null;
		int tbz_id = -1;

		if (!String.valueOf(jComboBoxCategory.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setCategoryID(getCatIDByName(String.valueOf(jComboBoxCategory.getSelectedItem())));
		}
		else
		{
			td.setCategoryID(-1);
		}

		if (!String.valueOf(jComboBoxInstitution.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setInstitutionID(getInstIDByName(String.valueOf(jComboBoxInstitution.getSelectedItem())));
		}
		else
		{
			td.setInstitutionID(-1);
		}

		if (!String.valueOf(jComboBoxStatus.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setStatusID(getStatIDByName(String.valueOf(jComboBoxStatus.getSelectedItem())));
		}
		else
		{
			td.setStatusID(-1);
		}

		if (!String.valueOf(jComboBoxArea.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setAreaID(getAreaIDByName(String.valueOf(jComboBoxArea.getSelectedItem())));
		}
		else
		{
			td.setAreaID(-1);
		}

		if (!String.valueOf(jComboBoxTopic.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setTopicID(getTopicIDByName(String.valueOf(jComboBoxTopic.getSelectedItem())));
		}
		else
		{
			td.setTopicID(-1);
		}

		if (!String.valueOf(jComboBoxReMeetType.getSelectedItem()).equals("Alle"))
		{
			td.setReMeetType(getReMeetTypeByName(String.valueOf(jComboBoxReMeetType.getSelectedItem())));
		}
		else
		{
			td.setReMeetType(-1);
		}

		if (td.getAreaID() != -1 && td.getTopicID() != -1)
		{
			tbz_id = getTBZ_ID_ByAreaAndTopicID(td.getAreaID(), td.getTopicID());
		}
		else
		{
			tbz_id = -1;
		}

		java.util.Date reDate = jCalendarComboBoxReDate.getCalendar().getTime();
		td.setReDate(reDate);

		if (!jCheckBoxNoReDate.isSelected())
		{
			td.setReMeetingEnabled(true);
		}

		td.setHeading(jTextHeading.getText());
		td.setContent(htmlEditor.getText());
		td.setResponsible(responsible);
		td.setInvolved(involved);

		con = DatabaseTodoConnect.openDB();
		Date dat = new Date(td.getReDate().getTime());
		try
		{
			con.setAutoCommit(false);

			Statement id = con.createStatement();
			ResultSet rst = id.executeQuery("SELECT MAX(ToDoID) FROM Protokollelement");
			rst.next();
			int insertId = rst.getInt(1) + 1;
			rst.close();
			id.close();

			String sql = "INSERT INTO Protokollelement "
						 + "(KategorieID, SitzungsID, StatusID, InstitutionsID, BereichID, "
						 + "Inhalt, Wiedervorlagedatum, "
						 + "TBZuordnung_ID, WV_Sitzungsart, Überschrift, WiedervorlageGesetzt, Geloescht, ToDoID) "
						 + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, false, ?)";
			pStmt = con.prepareStatement(sql);
			pStmt.setInt(1, td.getCategoryID());
			pStmt.setInt(2, meetingId);
			pStmt.setInt(3, td.getStatusID());
			pStmt.setInt(4, td.getInstitutionID());
			pStmt.setInt(5, td.getAreaID());
			pStmt.setString(6, td.getContent());
			pStmt.setDate(7, dat);
			pStmt.setInt(8, tbz_id);
			pStmt.setInt(9, td.getReMeetType());
			pStmt.setString(10, td.getHeading());
			pStmt.setBoolean(11, td.getReMeetingEnabled());
			pStmt.setInt(12, insertId);
			pStmt.executeUpdate();

			//set new relations
			RelationResolver.updateRelations(con, "todo_responsible_personnel", "todoID", responsible, insertId);
			RelationResolver.updateRelations(con, "todo_involved_personnel", "todoID", involved, insertId);

			con.commit();
			con.setAutoCommit(true);
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		finally
		{
			pStmt.close();
			DatabaseTodoConnect.closeDB(con);
		}
	}

	public void editTodoInit(boolean hideElements)
	{
		int tbz = 0;
		clearComboBoxes();
		initComboBoxes();
		involved.clear();
		responsible.clear();

		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Protokollelement WHERE ToDoID=" + todoId;
			ResultSet rst = stmt.executeQuery(sql);

			if (rst.next())
			{
				td.setMeetingID(rst.getInt("SitzungsID"));
				meetingId = td.getMeetingID();
				jComboBoxCategory.setSelectedItem(getCatNameByID(rst.getInt("KategorieID")));
				jComboBoxInstitution.setSelectedItem(getInstNameByID(rst.getInt("InstitutionsID")));
				jComboBoxStatus.setSelectedItem(getStatNameByID(rst.getInt("StatusID")));
				tbz = rst.getInt("TBZuordnung_ID");
				jComboBoxArea.setSelectedItem(getAreaNameByTBZ_ID(tbz));
				jComboBoxTopic.setSelectedItem(getTopicNameByTBZ_ID(tbz));
				jComboBoxReMeetType.setSelectedItem(getMeetingTypeByID(rst.getInt("WV_Sitzungsart")));
				jTextHeading.setText(rst.getString("Überschrift"));
				htmlEditor.setText(rst.getString("Inhalt"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					cal.setTime(rst.getDate("Wiedervorlagedatum"));
					jCalendarComboBoxReDate.setCalendar(cal);
					jCheckBoxNoReDate.setSelected(false);
				}
				else
				{
					jCalendarComboBoxReDate.setEnabled(false);
					jCheckBoxNoReDate.setSelected(true);
				}

				con = DatabaseTodoConnect.openDB();

				//load responsible personnel
				Statement responsibleStatement = con.createStatement();
				sql = "SELECT personnelID FROM todo_responsible_personnel WHERE todoID = " + todoId;
				ResultSet rst2 = responsibleStatement.executeQuery(sql);

				while (rst2.next())
				{
					responsible.add(rst2.getInt("personnelID"));
				}
				td.setResponsible(responsible);
				rst2.close();
				responsibleStatement.close();

				//load involved personnel
				Statement involvedStatement = con.createStatement();
				sql = "SELECT personnelID FROM todo_involved_personnel WHERE todoID = " + todoId;
				ResultSet rst3 = involvedStatement.executeQuery(sql);

				while (rst3.next())
				{
					involved.add(rst3.getInt("personnelID"));
				}
				td.setInvolved(involved);
				rst3.close();
				involvedStatement.close();

				String copyReason = rst.getString("Kopiergrund");
				if (copyReason != null)
				{
					jLabel3.setText(copyReason);
				}
			}
			rst.close();
			stmt.close();

		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DatabaseTodoConnect.closeDB(con);

		// Button zum Erstellen einer Outlook-Aufgabe einblenden wenn Kategorie=Aufgabe
		if (isTask())
		{
			jButtonSendTask.setVisible(true);
		}
		else
		{
			jButtonSendTask.setVisible(false);
		}

		if (hideElements)
		{
			setInputDisabled();
		}
	}

	public void editTodo() throws Exception
	{
		StringBuffer dbStringOthers = new StringBuffer("");
		StringBuffer dbStringResponsible = new StringBuffer("");
		PreparedStatement pStmt = null;
		int tbz_id = -1;

		if (!String.valueOf(jComboBoxCategory.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setCategoryID(getCatIDByName(String.valueOf(jComboBoxCategory.getSelectedItem())));
		}
		else
		{
			td.setCategoryID(-1);
		}

		if (!String.valueOf(jComboBoxInstitution.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setInstitutionID(getInstIDByName(String.valueOf(jComboBoxInstitution.getSelectedItem())));
		}
		else
		{
			td.setInstitutionID(-1);
		}

		if (!String.valueOf(jComboBoxStatus.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setStatusID(getStatIDByName(String.valueOf(jComboBoxStatus.getSelectedItem())));
		}
		else
		{
			td.setStatusID(-1);
		}

		if (!String.valueOf(jComboBoxArea.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setAreaID(getAreaIDByName(String.valueOf(jComboBoxArea.getSelectedItem())));
		}
		else
		{
			td.setAreaID(-1);
		}

		if (!String.valueOf(jComboBoxTopic.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setTopicID(getTopicIDByName(String.valueOf(jComboBoxTopic.getSelectedItem())));
		}
		else
		{
			td.setTopicID(-1);
		}

		if (!String.valueOf(jComboBoxReMeetType.getSelectedItem()).equals("Alle"))
		{
			td.setReMeetType(getReMeetTypeByName(String.valueOf(jComboBoxReMeetType.getSelectedItem())));
		}
		else
		{
			td.setReMeetType(-1);
		}

		if (td.getAreaID() != -1 && td.getTopicID() != -1)
		{
			tbz_id = getTBZ_ID_ByAreaAndTopicID(td.getAreaID(), td.getTopicID());
		}
		else
		{
			tbz_id = -1;
		}

		java.util.Date reDate = jCalendarComboBoxReDate.getCalendar().getTime();
		td.setReDate(reDate);

		if (!jCheckBoxNoReDate.isSelected())
		{
			td.setReMeetingEnabled(true);
		}

		td.setHeading(jTextHeading.getText());
		td.setContent(htmlEditor.getText());
		td.setResponsible(responsible);
		td.setInvolved(involved);

		TodoNoteDialog subgui = null;

		if (jComboBoxStatus.getSelectedItem().toString().equals("erledigt")
			&& jComboBoxCategory.getSelectedItem().toString().equals("Aufgabe"))
		{
			subgui = new TodoNoteDialog(mainGui, true);
			subgui.setVisible(true);
		}

		if (subgui != null)
		{
			con = DatabaseTodoConnect.openDB();

			String sql = "INSERT INTO Memo (TodoID, Inhalt, erstellt, Benutzer) VALUES (" + todoId + ", '" + subgui.getNote() + "', " + new java.sql.Date(subgui.getDate().getTime()) + ", '" + subgui.getUser() + "')";

			Statement stmt = con.createStatement();
			stmt.execute(sql);

			DatabaseTodoConnect.closeDB(con);
		}

		// ### Update Prtotokollelement
		con = DatabaseTodoConnect.openDB();
		Date dat = new Date(td.getReDate().getTime());

		try
		{
			String sql = "UPDATE Protokollelement SET"
						 + " KategorieID = ?, SitzungsID = ?, StatusID = ?, InstitutionsID = ?, BereichID = ?"
						 + ", Inhalt = ?, Wiedervorlagedatum = ?, TBZuordnung_ID = ?, WV_Sitzungsart = ?, "
						 + "Überschrift = ?, WiedervorlageGesetzt = ? , Geloescht = ? WHERE ToDoID = ? ;";
			pStmt = con.prepareStatement(sql);
			pStmt.setInt(1, td.getCategoryID());
			pStmt.setInt(2, meetingId);
			pStmt.setInt(3, td.getStatusID());
			pStmt.setInt(4, td.getInstitutionID());
			pStmt.setInt(5, td.getAreaID());
			pStmt.setString(6, td.getContent());
			pStmt.setDate(7, dat);
			pStmt.setInt(8, tbz_id);
			pStmt.setInt(9, td.getReMeetType());
			pStmt.setString(10, td.getHeading());
			pStmt.setBoolean(11, td.getReMeetingEnabled());
			pStmt.setBoolean(12, false);
			pStmt.setInt(13, todoId);
			pStmt.executeUpdate();

			//update relations
			RelationResolver.updateRelations(con, "todo_responsible_personnel", "todoID", responsible, todoId);
			RelationResolver.updateRelations(con, "todo_involved_personnel", "todoID", involved, todoId);
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		finally
		{
			pStmt.close();
			DatabaseTodoConnect.closeDB(con);
		}
	}

	public void setInputDisabled()
	{
		jComboBoxCategory.setEnabled(false);
		jComboBoxInstitution.setEnabled(false);
		jComboBoxArea.setEnabled(false);
		jComboBoxTopic.setEnabled(false);
		jTextHeading.setEnabled(false);
		jTreeEmployee.setEnabled(false);
		jTableResponsibles.setEnabled(false);
		jTableInvolved.setEnabled(false);
		jButtonAddResponsible.setEnabled(false);
		jButtonAddInvolved.setEnabled(false);
		jButtonRemoveResponsible.setEnabled(false);
		jButtonRemoveInvolved.setEnabled(false);
		jCalendarComboBoxReDate.setEnabled(false);
		htmlEditor.setEnabled(false);
		jButtonSendTask.setEnabled(false);
	}

	public ArrayList getAllCategories()
	{
		ArrayList<Category> catObjects = new ArrayList<Category>();
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				catObjects.add(new Category(rst.getString("Name"),
											rst.getString("Beschreibung")));
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return catObjects;
	}

	public ArrayList getAllInstitutions()
	{
		ArrayList<Institution> instObjects = new ArrayList<Institution>();
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Institution";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				instObjects.add(new Institution(rst.getString("Name")));
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return instObjects;
	}

	public ArrayList getEveryStatus()
	{
		ArrayList<FinStatus> statObjects = new ArrayList<FinStatus>();
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				statObjects.add(new FinStatus(rst.getString("Name")));
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return statObjects;
	}

	public ArrayList getAllAreas()
	{
		ArrayList<Area> areaObjects = new ArrayList<Area>();
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Bereich";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				areaObjects.add(new Area(rst.getString("Name"),
										 rst.getString("Beschreibung")));
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return areaObjects;
	}

	public ArrayList getAllTopics()
	{
		ArrayList<Topic> topicObjects = new ArrayList<Topic>();
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Thema";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				topicObjects.add(new Topic(rst.getString("Name")));
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return topicObjects;
	}

	public ArrayList getAllMeetingTypes()
	{
		ArrayList<MeetingType> meetingTypeObjects = new ArrayList<MeetingType>();
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsart";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				meetingTypeObjects.add(new MeetingType(rst.getString("Name")));
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return meetingTypeObjects;
	}

	public ArrayList getAreasForTopic(String topicName)
	{
		ArrayList<Area> areaObjects = new ArrayList<Area>();
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM TBZ WHERE ThemaID=" + getTopicIDByName(topicName);
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				areaObjects.add(new Area(rst.getInt("BereichID")));
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);

		for (int i = 0; i < areaObjects.size(); i++)
		{
			int tempID = areaObjects.get(i).getAreaID();
			areaObjects.get(i).setAreaName(getAreaNameByID(tempID));
		}
		return areaObjects;
	}

	public ArrayList getTopicsForArea(String areaName)
	{
		ArrayList<Topic> topicObjects = new ArrayList<Topic>();
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM TBZ WHERE BereichID=" + getAreaIDByName(areaName);
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				topicObjects.add(new Topic(rst.getInt("ThemaID")));
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);

		for (int i = 0; i < topicObjects.size(); i++)
		{
			int tempID = topicObjects.get(i).getTopicID();
			topicObjects.get(i).setName(getTopicNameByID(tempID));
		}
		return topicObjects;
	}

	public int getCatIDByName(String catName)
	{
		int id = 0;
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie WHERE Name='" + catName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				id = rst.getInt("KategorieID");
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return id;
	}

	public int getInstIDByName(String instName)
	{
		int id = 0;
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Institution WHERE Name='" + instName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				id = rst.getInt("InstitutionID");
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return id;
	}

	public int getStatIDByName(String statName)
	{
		int id = 0;
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status WHERE Name='" + statName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				id = rst.getInt("StatusID");
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return id;
	}

	public int getAreaIDByName(String areaName)
	{
		int id = 0;
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Bereich WHERE Name='" + areaName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				id = rst.getInt("BereichID");
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return id;
	}

	public int getTopicIDByName(String topicName)
	{
		int id = 0;
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Thema WHERE Name='" + topicName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				id = rst.getInt("ThemaID");
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return id;
	}

	public int getReMeetTypeByName(String meetType)
	{
		int id = 0;
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsart WHERE Name='" + meetType + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				id = rst.getInt("SitzungsartID");
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return id;
	}

	public int getTBZ_ID_ByAreaAndTopicID(int areaID, int topicID)
	{
		int tbz_id = -1;
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM TBZ WHERE BereichID=" + td.getAreaID()
						 + " AND ThemaID=" + td.getTopicID();
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				tbz_id = rst.getInt("TBZ_ID");
			}
			rst.close();
			stmt.close();

		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return tbz_id;
	}

	public String getCatNameByID(int id)
	{
		String name = "";
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie WHERE KategorieID=" + id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return name;
	}

	public String getInstNameByID(int id)
	{
		String name = "";
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Institution WHERE InstitutionID=" + id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return name;
	}

	public String getStatNameByID(int id)
	{
		String name = "";
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status WHERE StatusID=" + id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return name;
	}

	public String getAreaNameByTBZ_ID(int tbz_id)
	{
		String name = "";
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM TBZ WHERE TBZ_ID=" + tbz_id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				Statement stmt2 = con.createStatement();
				String sql2 = "SELECT * FROM Bereich WHERE BereichID=" + rst.getInt("BereichID");
				ResultSet rst2 = stmt2.executeQuery(sql2);

				while (rst2.next())
				{
					name = rst2.getString("Name");
				}
				rst2.close();
				stmt2.close();
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return name;
	}

	public String getTopicNameByTBZ_ID(int tbz_id)
	{
		String name = "";
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM TBZ WHERE TBZ_ID=" + tbz_id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				Statement stmt2 = con.createStatement();
				String sql2 = "SELECT * FROM Thema WHERE ThemaID=" + rst.getInt("ThemaID");
				ResultSet rst2 = stmt2.executeQuery(sql2);

				while (rst2.next())
				{
					name = rst2.getString("Name");
				}
				rst2.close();
				stmt2.close();
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return name;
	}

	public String getTopicNameByID(int topicID)
	{
		String name = "";
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Thema WHERE ThemaID=" + topicID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return name;
	}

	public String getAreaNameByID(int areaID)
	{
		String name = "";
		con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Bereich WHERE BereichID=" + areaID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return name;
	}

	public String getMeetingTypeByID(int meetTypeID)
	{
		String name = "";
		con = DatabaseTodoConnect.openDB();

		if (meetTypeID == -1)
		{
			// Wenn MeetTypeID = -1 dann wurde keine Wiedervorlage-Sitzungsart hinterlegt
			// return "Alle"
			name = "Alle";
		}
		else
		{
			try
			{
				Statement stmt = con.createStatement();
				String sql = "SELECT * FROM Sitzungsart WHERE SitzungsartID=" + meetTypeID;
				ResultSet rst = stmt.executeQuery(sql);

				while (rst.next())
				{
					name = rst.getString("Name");
				}
				rst.close();
				stmt.close();
			}
			catch (Exception ex)
			{
				Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}
		}
		DatabaseTodoConnect.closeDB(con);
		return name;
	}

	/**
	 * Anhand der Mitarbeiter-ID die Mail-Adresse aus MA-DB ermitteln
	 *
	 * @param empID
	 * @return String: E-Mail-Adresse
	 */
	public String getMailAddressByEmpID(int empID)
	{
		String mail = "";
		con = DatabaseEmployeeConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Stammdaten WHERE Personalnummer=" + empID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				mail = rst.getString("E_Mail");
				if (mail == null || mail.equals(""))
				{
					mail = rst.getString("E_Mail2");
				}
			}
			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(TodoTab.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DatabaseTodoConnect.closeDB(con);
		return mail;
	}

	/**
	 *
	 * @return boolean
	 * True wenn Protokollelement "Aufgabe" ist, false sonst
	 */
	public boolean isTask()
	{
		if (jComboBoxCategory.getSelectedItem().toString().contains("Aufgabe"))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	public void clearComboBoxes()
	{
		jComboBoxCategory.removeAllItems();
		jComboBoxInstitution.removeAllItems();
		jComboBoxStatus.removeAllItems();
		jComboBoxArea.removeAllItems();
		jComboBoxTopic.removeAllItems();
		jComboBoxReMeetType.removeAllItems();
	}
}
