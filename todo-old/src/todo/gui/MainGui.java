/**
 * This file is part of 'Todo Application'
 * 
 * @see			http://www.konzept-e.de/
 * @copyright	2006-2011 Konzept-e für Bildung und Soziales GmbH
 * @author		Marcus Hertel, Sven Skrabal
 * @license		LGPL - http://www.gnu.org/licenses/lgpl.html
 * 
 */
package todo.gui;

import todo.util.GlobalDatabaseSearch;
import java.awt.Desktop;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import todo.db.DatabaseTodoConnect;
import todo.tab.DefaultScrollTab;
import todo.util.ButtonTabComponent;
import todo.tab.DefaultTab;
import todo.tab.MeetingReportTab;
import todo.tab.MeetingTab;
import todo.tab.TodoTab;
import todo.tab.SearchResultTab;
import todo.util.DateFormater;
import todo.tablemodel.GeneralItemTableModel;
import todo.tablemodel.PersonalItemTableModel;
import todo.tablemodel.SearchResultTableModel;
import todo.tablemodel.TodoTableModel;
import todo.util.DataReloadable;

public class MainGui extends javax.swing.JFrame implements ListSelectionListener, MouseListener
{
	public static final Properties applicationProperties = new Properties();
	private int personnelId = 0, lastSelectedMeetingId, popupSelectionRow;

	public MainGui()
	{
		initComponents();

		//put window in middle of screen and maximize it
		setLocationRelativeTo(null);
		setExtendedState(MAXIMIZED_BOTH);

		//set correct table model on top
		personnelId = PersonalItemTableModel.getPersonnelIdForUsername(System.getenv("USERNAME"));
		if (personnelId == 0)
		{
			jTable1.setModel(new GeneralItemTableModel());
			jTable1.getColumnModel().getColumn(0).setMinWidth(80);
			jTable1.getColumnModel().getColumn(0).setMaxWidth(80);
			jComboBox1.removeItem("Personalisierte Liste");
			jComboBox1.setSelectedItem("Sitzungsübersicht");
			jLabel1.setText("Sitzungsübersicht");
		}
		else
		{
			jTable1.setModel(new PersonalItemTableModel(personnelId));
			jTable1.getColumnModel().getColumn(0).setMinWidth(100);
			jTable1.getColumnModel().getColumn(0).setMaxWidth(100);
			jComboBox1.setSelectedItem("Personalisierte Liste");
			jLabel1.setText("Personalisierte Liste für " + System.getenv("USERNAME"));
		}

		//listen on item selection events for table
		jTable1.getSelectionModel().addListSelectionListener(this);

		//double click event listener
		jTable1.addMouseListener(this);

		//add default tab - cant be closed
		jTabbedPane1.addTab("Standard-Tab", null, new DefaultTab(this));

		//add listener to table for popup menu
		MouseListener popupListener = new PopupListener();
		jTable1.addMouseListener(popupListener);
	}

	class PopupListener extends MouseAdapter
	{
		@Override
		public void mousePressed(MouseEvent e)
		{
			showPopup(e);
		}

		@Override
		public void mouseReleased(MouseEvent e)
		{
			showPopup(e);
		}

		private void showPopup(MouseEvent e)
		{
			if (e.isPopupTrigger())
			{
				//get row at mouse click and show popup
				popupSelectionRow = jTable1.rowAtPoint(new Point(e.getX(), e.getY()));
				jPopupMenu1.show(e.getComponent(), e.getX(), e.getY());
			}
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();

        jMenuItem7.setText("Element bearbeiten");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem7);

        jMenuItem4.setText("Element kopieren");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem4);
        jPopupMenu1.add(jSeparator3);

        jMenuItem6.setText("Element löschen");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem6);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Konzept-e Todo Application");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new DefaultTableModel());
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(jTable1);

        jButton3.setText("Element bearbeiten");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setText("Sitzung anlegen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Personalisierte Liste", "Sitzungsübersicht" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText("- kein Text -");

        jTextField1.setText("Suchbegriff + Enter");
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTextField1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTextField1MouseExited(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jButton2.setText("Protokollelement anlegen");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Sitzung wählen");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, 0, 129, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(7, 7, 7)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addContainerGap())
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)))
        );

        jSplitPane1.setTopComponent(jPanel1);

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 872, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel2);

        jMenu1.setText("Programm");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("alle Tabs schließen");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Beenden");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Hilfe");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem3.setText("Hilfe aufrufen");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);
        jMenu3.add(jSeparator1);

        jMenuItem5.setText("Über dieses Programm");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem5ActionPerformed
	{//GEN-HEADEREND:event_jMenuItem5ActionPerformed
		//dont implemented about box twice, just call it
		showAboutBox();
	}//GEN-LAST:event_jMenuItem5ActionPerformed

	public static void showAboutBox()
	{
		//about dialog of application
		JOptionPane.showMessageDialog(null, "Todo Application ist eine Eigenentwicklung der Konzept-e für Bildung und Soziales GmbH\n\nEntwickelt von:\nMarcus Hertel\nSven Skrabal\n\nBei Problemen und Anregungen wenden Sie sich bitte an Ihren Administrator.", "Über Todo Application", JOptionPane.INFORMATION_MESSAGE);
	}

	private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem1ActionPerformed
	{//GEN-HEADEREND:event_jMenuItem1ActionPerformed
		//on close warning dialog - only active when in production mode
		if (!((String) applicationProperties.getProperty("ProductionMode")).equals("false"))
		{
			if (JOptionPane.showConfirmDialog(this, "Möchten Sie das Programm wirklich beenden?\nNicht gespeicherte Änderungen könnten verloren gehen.", "Todo Application", JOptionPane.YES_NO_OPTION) == 0)
			{
				System.exit(0);
			}
		}
		else
		{
			System.exit(0);
		}
	}//GEN-LAST:event_jMenuItem1ActionPerformed

	private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
	{//GEN-HEADEREND:event_formWindowClosing
		//call menu method so we can save some lines of code for same action ;-)
		jMenuItem1ActionPerformed(null);
	}//GEN-LAST:event_formWindowClosing

	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton3ActionPerformed
	{//GEN-HEADEREND:event_jButton3ActionPerformed
		//open new tab for selected elements
		if (jTable1.getSelectedRow() != -1)
		{
			JPanel newTab = null;
			String tabTitle = "";

			if (jTable1.getModel().getClass() == TodoTableModel.class)
			{
				newTab = new DefaultScrollTab(new TodoTab(false, (Integer) jTable1.getValueAt(jTable1.getSelectedRow(), -1), 0, this));
				tabTitle = "Protokollelement bearbeiten";
			}
			else if (jTable1.getModel().getClass() == GeneralItemTableModel.class)
			{
				newTab = new DefaultScrollTab(new MeetingTab(false, (Integer) jTable1.getValueAt(jTable1.getSelectedRow(), -1), this));
				tabTitle = "Sitzung bearbeiten";
			}
			else if (jTable1.getModel().getClass() == PersonalItemTableModel.class)
			{
				if (((String) jTable1.getValueAt(jTable1.getSelectedRow(), 0)).equals("Protokollelement"))
				{
					newTab = new DefaultScrollTab(new TodoTab(false, (Integer) jTable1.getValueAt(jTable1.getSelectedRow(), -1), 0, this));
					tabTitle = "Protokollelement bearbeiten";
				}
				else
				{
					newTab = new DefaultScrollTab(new MeetingTab(false, (Integer) jTable1.getValueAt(jTable1.getSelectedRow(), -1), this));
					tabTitle = "Sitzung bearbeiten";
				}
			}
			else
			{
				JOptionPane.showMessageDialog(this, "Fehler...");
				return;
			}

			addNewTab(newTab, tabTitle);
		}
	}//GEN-LAST:event_jButton3ActionPerformed

	private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_jComboBox1ItemStateChanged
	{//GEN-HEADEREND:event_jComboBox1ItemStateChanged
		if (evt.getStateChange() == 1)
		{
			//load new model when user changed selection
			if (((String) jComboBox1.getSelectedItem()).equals("Personalisierte Liste"))
			{
				//personalized list
				jTable1.setModel(new PersonalItemTableModel(personnelId));
				jTable1.getColumnModel().getColumn(0).setMinWidth(100);
				jTable1.getColumnModel().getColumn(0).setMaxWidth(100);
				jComboBox1.setSelectedItem("Personalisierte Liste");
				jLabel1.setText("Personalisierte Liste für " + System.getenv("USERNAME"));
				jButton3.setEnabled(false);
				jButton2.setEnabled(false);
				jButton4.setEnabled(false);
			}
			else if (((String) jComboBox1.getSelectedItem()).equals("Protokollelemente"))
			{
				//todo elements for selected meeting
				jTable1.setModel(new TodoTableModel(lastSelectedMeetingId));
				jButton2.setEnabled(true);
				jButton3.setEnabled(false);
				jButton4.setEnabled(false);

				setMeetingOverviewTitle();
			}
			else
			{
				//meeting overview
				jTable1.setModel(new GeneralItemTableModel());
				jTable1.getColumnModel().getColumn(0).setMinWidth(80);
				jTable1.getColumnModel().getColumn(0).setMaxWidth(80);
				jComboBox1.setSelectedItem("Sitzungsübersicht");
				jLabel1.setText("Sitzungsübersicht");
				jButton3.setEnabled(false);
				jButton2.setEnabled(false);
				jButton4.setEnabled(false);
			}
		}
	}//GEN-LAST:event_jComboBox1ItemStateChanged

	private void setMeetingOverviewTitle()
	{
		//look up meeting date and type
		Connection tmpCon = DatabaseTodoConnect.openDB();

		try
		{
			Statement tmpStmt = tmpCon.createStatement();
			ResultSet tmpRst = tmpStmt.executeQuery("SELECT * FROM Sitzungsdaten INNER JOIN Sitzungsart ON Sitzungsdaten.SitzungsartID = Sitzungsart.SitzungsartID WHERE Sitzungsdaten.SitzungsdatenID = " + lastSelectedMeetingId);

			//properly set meeting date and type
			if (tmpRst.next())
			{
				String displayDate = new DateFormater(tmpRst.getDate("Datum")).toString();
				String tmpSubject = tmpRst.getString("Betreff");
				
				if(tmpSubject == null)
				{
					tmpSubject = "";
				}
				else
				{
					tmpSubject = "'" + tmpSubject + "' ";
				}
				
				jLabel1.setText("Protokollelemente für Sitzung " + tmpSubject + "vom " + displayDate + " - " + tmpRst.getString("Name"));
			}
			else
			{
				jLabel1.setText("Protokollelemente für gewählte Sitzung");
			}

			tmpRst.close();
			tmpStmt.close();
		}
		catch (SQLException ex)
		{
			Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
		}

		DatabaseTodoConnect.closeDB(tmpCon);
	}

	private void jTextField1MouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jTextField1MouseEntered
	{//GEN-HEADEREND:event_jTextField1MouseEntered
		//hide text when default value
		if (jTextField1.getText().equals("Suchbegriff + Enter"))
		{
			jTextField1.setText("");
		}
	}//GEN-LAST:event_jTextField1MouseEntered

	private void jTextField1MouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jTextField1MouseExited
	{//GEN-HEADEREND:event_jTextField1MouseExited
		//set text when there was no insertion or field is empty
		if (jTextField1.getText().equals(""))
		{
			jTextField1.setText("Suchbegriff + Enter");
		}
	}//GEN-LAST:event_jTextField1MouseExited

	private void jTextField1KeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField1KeyPressed
	{//GEN-HEADEREND:event_jTextField1KeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER)
		{
			//check for invalid search terms
			if (jTextField1.getText().equals("") || jTextField1.getText().equals("Suchbegriff + Enter"))
			{
				JOptionPane.showMessageDialog(this, "Die Suche kann ohne Suchbegriff nicht gestartet werden.", "Fehler", JOptionPane.ERROR_MESSAGE);
				return;
			}

			//connect to database and search for items
			Connection tmpCon = DatabaseTodoConnect.openDB();
			GlobalDatabaseSearch search = new GlobalDatabaseSearch();
			SearchResultTableModel resultModel = new SearchResultTableModel(search.doSearch(tmpCon, jTextField1.getText()), jTextField1.getText());
			DatabaseTodoConnect.closeDB(tmpCon);

			//if resulting model is emtpy we dont open a new tab but show user an error
			if (resultModel.getRowCount() == 0)
			{
				JOptionPane.showMessageDialog(this, "Für Ihre Suchanfrage wurde kein Element in der Datenbank gefunden!");
			}
			else
			{
				//add new tab with search results
				addNewTab(new SearchResultTab(resultModel, jTextField1.getText(), this), "Suchergebnis für '" + jTextField1.getText() + "'");
			}
		}
		else if (jTextField1.getText().equals("Suchbegriff + Enter"))
		{
			String keyText = KeyEvent.getKeyText(evt.getKeyCode());
			jTextField1.setText(keyText.substring(keyText.length()));
		}
	}//GEN-LAST:event_jTextField1KeyPressed

	private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem3ActionPerformed
	{//GEN-HEADEREND:event_jMenuItem3ActionPerformed
		try
		{
			//@see http://java.sun.com/developer/technicalArticles/J2SE/Desktop/javase6/desktop_api/
			Desktop.getDesktop().open(new File(applicationProperties.getProperty("HelpFile")));
		}
		catch (IOException ex)
		{
			JOptionPane.showMessageDialog(this, "Hilfe konnte nicht gestartet werden, da diese nicht gefunden wurde!");
			Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_jMenuItem3ActionPerformed

	private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem2ActionPerformed
	{//GEN-HEADEREND:event_jMenuItem2ActionPerformed
		if (JOptionPane.showConfirmDialog(this, "Möchten Sie wirklich alle offenen Tabs schließen?\nNicht gespeicherte Änderungen könnten verloren gehen.", "Todo Application", JOptionPane.YES_NO_OPTION) == 0)
		{
			//remove all tabs
			jTabbedPane1.removeAll();

			//and re-add default tab
			jTabbedPane1.addTab("Standard-Tab", null, new DefaultTab(this));
		}
	}//GEN-LAST:event_jMenuItem2ActionPerformed

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
	{//GEN-HEADEREND:event_jButton1ActionPerformed
		addNewTab(new DefaultScrollTab(new MeetingTab(true, 0, this)), "Sitzung erstellen");
	}//GEN-LAST:event_jButton1ActionPerformed

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
	{//GEN-HEADEREND:event_jButton2ActionPerformed
		if (jTable1.getModel().getClass() == PersonalItemTableModel.class)
		{
			addNewTab(new DefaultScrollTab(new TodoTab(true, 0, (Integer) jTable1.getValueAt(jTable1.getSelectedRow(), -1), this)), "Protokollelement erstellen");
		}
		else
		{
			addNewTab(new DefaultScrollTab(new TodoTab(true, 0, lastSelectedMeetingId, this)), "Protokollelement erstellen");
		}
	}//GEN-LAST:event_jButton2ActionPerformed

	private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem7ActionPerformed
	{//GEN-HEADEREND:event_jMenuItem7ActionPerformed
		JPanel newTab = null;
		String tabTitle = "";

		if (jTable1.getModel().getClass() == TodoTableModel.class)
		{
			newTab = new DefaultScrollTab(new TodoTab(false, (Integer) jTable1.getValueAt(popupSelectionRow, -1), 0, this));
			tabTitle = "Protokollelement bearbeiten";
		}
		else if (jTable1.getModel().getClass() == GeneralItemTableModel.class)
		{
			newTab = new DefaultScrollTab(new MeetingTab(false, (Integer) jTable1.getValueAt(popupSelectionRow, -1), this));
			tabTitle = "Sitzung bearbeiten";
		}
		else if (jTable1.getModel().getClass() == PersonalItemTableModel.class)
		{
			if (((String) jTable1.getValueAt(popupSelectionRow, 0)).equals("Protokollelement"))
			{
				newTab = new DefaultScrollTab(new TodoTab(false, (Integer) jTable1.getValueAt(popupSelectionRow, -1), 0, this));
				tabTitle = "Protokollelement bearbeiten";
			}
			else
			{
				newTab = new DefaultScrollTab(new MeetingTab(false, (Integer) jTable1.getValueAt(popupSelectionRow, -1), this));
				tabTitle = "Sitzung bearbeiten";
			}
		}
		else
		{
			JOptionPane.showMessageDialog(this, "Fehler...");
			return;
		}

		addNewTab(newTab, tabTitle);
	}//GEN-LAST:event_jMenuItem7ActionPerformed

	private void copyMeeting()
	{
		if (jTable1.getSelectedRow() != -1)
		{
			int meetingID = (Integer) jTable1.getValueAt(jTable1.getSelectedRow(), -1);
			int insertId = -1;

			Connection con = DatabaseTodoConnect.openDB();

			try
			{
				con.setAutoCommit(false);

				Statement id = con.createStatement();
				ResultSet rst = id.executeQuery("SELECT MAX(SitzungsdatenID) FROM Sitzungsdaten");
				rst.next();
				insertId = rst.getInt(1) + 1;
				rst.close();
				id.close();

				//copy element itself
				Statement stmt = con.createStatement();
				String sql = "INSERT INTO Sitzungsdaten (SitzungsdatenID, Datum, Ort, Tagesordnung, "
							 + "SitzungsartID, Protokollant, Sonstige) SELECT " + insertId
							 + " AS SitzungsdatenID, Datum, Ort, Tagesordnung, SitzungsartID, Protokollant, "
							 + "Sonstige FROM Sitzungsdaten WHERE SitzungsdatenID = " + meetingID;
				stmt.executeUpdate(sql);
				stmt.close();

				//copy relations to it
				Statement relations = con.createStatement();
				String newsql = "INSERT INTO meeting_attendee_personnel (meetingID, personnelID) SELECT " + insertId
								+ " AS meetingID, personnelID FROM meeting_attendee_personnel WHERE meetingID = " + meetingID;
				relations.executeUpdate(newsql);
				relations.close();

				con.commit();
				con.setAutoCommit(true);

				JPanel newTab = new DefaultScrollTab(new MeetingTab(false, insertId, this));
				String tabTitle = "Sitzung bearbeiten";
				addNewTab(newTab, tabTitle);
			}
			catch (Exception ex)
			{
				Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
			}

			DatabaseTodoConnect.closeDB(con);
			reloadTableData();
		}
	}

	private void copyTodo()
	{
		if (jTable1.getSelectedRow() != -1)
		{
			int todoID = (Integer) jTable1.getValueAt(jTable1.getSelectedRow(), -1);
			int insertId = -1;

			String copyReason = JOptionPane.showInputDialog(this, "Sie möchten ein Element kopieren.\nBitte geben Sie den "
																  + "Grund an, warum dieses bereits bestehendes Element kopiert werden soll.\n\n",
															"Grund für Kopie", JOptionPane.QUESTION_MESSAGE);

			if (copyReason == null)
			{
				return;
			}

			copyReason = "Kopiertes Element (" + todoID + "): " + copyReason;

			Connection con = DatabaseTodoConnect.openDB();

			try
			{
				con.setAutoCommit(false);

				Statement id = con.createStatement();
				ResultSet rst = id.executeQuery("SELECT MAX(ToDoID) FROM Protokollelement");
				rst.next();
				insertId = rst.getInt(1) + 1;
				rst.close();
				id.close();

				//copy element itself
				Statement stmt = con.createStatement();
				String sql = "INSERT INTO Protokollelement (ToDoID, KategorieID, SitzungsID, StatusID, "
							 + "InstitutionsID, BereichID, TBZuordnung_ID, Thema, Inhalt, Bereich, "
							 + "Wiedervorlagedatum, WV_Sitzungsart, updated, "
							 + "Überschrift, WiedervorlageGesetzt, Kopiergrund) SELECT " + insertId + " AS ToDoID, KategorieID, "
							 + "SitzungsID, 3 AS StatusID, InstitutionsID, BereichID, TBZuordnung_ID, Thema, "
							 + "Inhalt, Bereich, Wiedervorlagedatum, WV_Sitzungsart, "
							 + "updated, Überschrift, WiedervorlageGesetzt, '" + copyReason
							 + "' AS Kopiergrund FROM Protokollelement WHERE ToDoID = " + todoID;
				stmt.executeUpdate(sql);
				stmt.close();

				//then copy first relations to it
				Statement relations = con.createStatement();
				String newsql = "INSERT INTO todo_responsible_personnel (todoID, personnelID) SELECT " + insertId
								+ " AS todoID, personnelID FROM todo_responsible_personnel WHERE todoID = " + todoID;
				relations.executeUpdate(newsql);
				relations.close();

				//and copy second relations to it (of course)
				relations = con.createStatement();
				newsql = "INSERT INTO todo_involved_personnel (todoID, personnelID) SELECT " + insertId
						 + " AS todoID, personnelID FROM todo_involved_personnel WHERE todoID = " + todoID;
				relations.executeUpdate(newsql);
				relations.close();

				con.commit();
				con.setAutoCommit(true);
				
				JPanel newTab = new DefaultScrollTab(new TodoTab(false, insertId, 0, this));
				String tabTitle = "Protokollelement bearbeiten";
				addNewTab(newTab, tabTitle);
			}
			catch (Exception ex)
			{
				Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
			}

			DatabaseTodoConnect.closeDB(con);
			reloadTableData();
		}
	}

	private void deleteTodo()
	{
		Connection con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "UPDATE Protokollelement SET Geloescht = true WHERE ToDoID = " + (Integer) jTable1.getValueAt(jTable1.getSelectedRow(), -1);
			stmt.executeUpdate(sql);
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
		}

		DatabaseTodoConnect.closeDB(con);
		reloadTableData();
	}

	private void deleteMeeting()
	{
		Connection con = DatabaseTodoConnect.openDB();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "UPDATE Sitzungsdaten SET Geloescht = true WHERE SitzungsdatenID = " + (Integer) jTable1.getValueAt(jTable1.getSelectedRow(), -1);
			stmt.executeUpdate(sql);
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
		}

		DatabaseTodoConnect.closeDB(con);
		reloadTableData();
	}

	private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem4ActionPerformed
	{//GEN-HEADEREND:event_jMenuItem4ActionPerformed
		//delegate action to method based on table model and contents
		if (jTable1.getModel().getClass() == TodoTableModel.class)
		{
			copyTodo();
		}
		else if (jTable1.getModel().getClass() == PersonalItemTableModel.class)
		{
			if (((String) jTable1.getValueAt(popupSelectionRow, 0)).equals("Protokollelement"))
			{
				copyTodo();
			}
			else
			{
				copyMeeting();
			}
		}
		else if (jTable1.getModel().getClass() == GeneralItemTableModel.class)
		{
			copyMeeting();
		}
	}//GEN-LAST:event_jMenuItem4ActionPerformed

	private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem6ActionPerformed
	{//GEN-HEADEREND:event_jMenuItem6ActionPerformed
		if (JOptionPane.showConfirmDialog(this, "Möchten Sie das gewählte Element wirklich löschen?\nDer Vorgang kann nicht rückgängig gemacht werden.", "Todo Application", JOptionPane.YES_NO_OPTION) == 0)
		{
			//delegate action to method based on table model and contents
			if (jTable1.getModel().getClass() == TodoTableModel.class)
			{
				deleteTodo();
			}
			else if (jTable1.getModel().getClass() == PersonalItemTableModel.class)
			{
				if (((String) jTable1.getValueAt(popupSelectionRow, 0)).equals("Protokollelement"))
				{
					deleteTodo();
				}
				else
				{
					deleteMeeting();
				}
			}
			else if (jTable1.getModel().getClass() == GeneralItemTableModel.class)
			{
				deleteMeeting();
			}
		}
	}//GEN-LAST:event_jMenuItem6ActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

	lastSelectedMeetingId = (Integer) jTable1.getValueAt(jTable1.getSelectedRow(), -1);

	//show list of todo elements
	jComboBox1.removeItem("Protokollelemente");
	jComboBox1.addItem("Protokollelemente");
	jComboBox1.setSelectedItem("Protokollelemente");
	jButton2.setEnabled(true);

	//open report creation tab for selected meeting
	addNewTab(new MeetingReportTab(lastSelectedMeetingId, this), "Sitzung auswerten");
}//GEN-LAST:event_jButton4ActionPerformed

	@Override
	public void valueChanged(ListSelectionEvent e)
	{
		//enable button only when valid item was selected
		if (e.getValueIsAdjusting() == false)
		{
			jButton3.setEnabled(true);

			//enable create todo element button
			if (jTable1.getModel().getClass() == PersonalItemTableModel.class
				&& jTable1.getSelectedRow() != -1
				&& ((String) jTable1.getValueAt(jTable1.getSelectedRow(), 0)).equals("Sitzung"))
			{
				jButton2.setEnabled(true);
				jButton4.setEnabled(true);
			}
			else if (jTable1.getModel().getClass() == GeneralItemTableModel.class)
			{
				jButton2.setEnabled(true);
				jButton4.setEnabled(true);
			}
			else if (jTable1.getModel().getClass() == TodoTableModel.class)
			{
				jButton2.setEnabled(true);
				jButton4.setEnabled(false);
			}
			else
			{
				jButton2.setEnabled(false);
				jButton4.setEnabled(false);
			}
		}
	}

	public static void main(String args[])
	{
		try
		{
			//load application settings file based on different environments
			File file = new File("E:\\Konzept-e\\OldCode\\ToDoAppSettings.xml");
			if (!file.exists())
			{
				file = new File("H:\\ToDo\\config\\ToDoAppSettings2.xml");
				if (!file.exists())
				{
					file = new File("H:\\ToDo\\config\\ToDoAppSettings.xml");
				}
			}

			//load settings from XML
			FileInputStream inputStream = new FileInputStream(file);
			applicationProperties.loadFromXML(inputStream);
			inputStream.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
			JOptionPane.showMessageDialog(
					null, "Die Datei 'ToDoAppSettings.xml' konnte "
						  + "nicht gefunden werden oder es trat ein Fehler beim Laden auf!\n"
						  + "Bitte überprüfen Sie, ob die Datei vorhanden ist und starten Sie "
						  + "die Anwendung dann erneut.", "Fehler", JOptionPane.ERROR_MESSAGE);
			System.exit(1);
		}

		try
		{
			//reconfigure default logger so files will be saved in users' home directory
			Logger logger = Logger.getLogger(MainGui.class.getName());

			//set some default values for logger
			FileHandler fileHandler = new FileHandler(applicationProperties.getProperty("LoggerLogfilePath"), true);
			logger.addHandler(fileHandler);
			logger.setLevel(Level.ALL);
			SimpleFormatter formatter = new SimpleFormatter();
			fileHandler.setFormatter(formatter);

			logger.log(Level.INFO, "ToDoApp erfolgreich gestartet und initialisiert.");
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
			JOptionPane.showMessageDialog(
					null, "Die Anwendung konnte die Datei zur "
						  + "Ausgabe von Fehlermeldungen nicht öffnen.\n\nBitte informieren Sie Ihren "
						  + "Administrator über diese Fehlermeldung oder starten Sie die Anwendung erneut.");
			System.exit(1);
		}

		try
		{
			//set correct look & feel
			UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
		}

		//finally open frame in new thread
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			@Override
			public void run()
			{
				new MainGui().setVisible(true);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

	@Override
	public void mouseClicked(MouseEvent e)
	{
		//on double click we continue with actions
		if (e.getClickCount() == 2)
		{
			if (jTable1.getModel().getClass() == PersonalItemTableModel.class)
			{
				//check for meeting as double-clicked element
				if (((String) jTable1.getValueAt(jTable1.getSelectedRow(), 0)).equals("Sitzung"))
				{
					//IMPORTANT: combo box value changed event loads todo element list!
					lastSelectedMeetingId = (Integer) jTable1.getValueAt(jTable1.getSelectedRow(), -1);

					//show list of todo elements
					jComboBox1.removeItem("Protokollelemente");
					jComboBox1.addItem("Protokollelemente");
					jComboBox1.setSelectedItem("Protokollelemente");
					jButton2.setEnabled(true);

					//open report creation tab for selected meeting
					addNewTab(new MeetingReportTab(lastSelectedMeetingId, this), "Sitzung auswerten");
				}
				else
				{
					//edit element normally
					jButton3ActionPerformed(null);
				}
			}
			else if (jTable1.getModel().getClass() == GeneralItemTableModel.class)
			{
				//IMPORTANT: combo box value changed event loads todo element list!
				lastSelectedMeetingId = (Integer) jTable1.getValueAt(jTable1.getSelectedRow(), -1);

				//show list of todo elements
				jComboBox1.removeItem("Protokollelemente");
				jComboBox1.addItem("Protokollelemente");
				jComboBox1.setSelectedItem("Protokollelemente");
				jButton2.setEnabled(true);

				//open report creation tab for selected meeting
				addNewTab(new MeetingReportTab(lastSelectedMeetingId, this), "Sitzung auswerten");
			}
			else
			{
				//edit element normally
				jButton3ActionPerformed(null);
			}
		}
	}

	@Override
	public void mousePressed(MouseEvent e)
	{
		//method not used
	}

	@Override
	public void mouseReleased(MouseEvent e)
	{
		//method not used
	}

	@Override
	public void mouseEntered(MouseEvent e)
	{
		//method not used
	}

	@Override
	public void mouseExited(MouseEvent e)
	{
		//method not used
	}

	public void updateTableModel(int meetingId)
	{
		//todo elements for selected meeting
		lastSelectedMeetingId = meetingId;
		jTable1.setModel(new TodoTableModel(lastSelectedMeetingId));
		jButton2.setEnabled(true);
		jButton3.setEnabled(false);
		jButton4.setEnabled(false);
		jComboBox1.setSelectedItem("Protokollelemente");

		setMeetingOverviewTitle();
	}

	public void addNewTab(JPanel newTabComponent, String newTabTitle)
	{
		//add new tab to tab component if parameters are valid
		if (newTabComponent != null && newTabTitle != null)
		{
			newTabComponent.setVisible(true);
			jTabbedPane1.addTab(newTabTitle, null, newTabComponent);
			jTabbedPane1.setSelectedComponent(newTabComponent);
			jTabbedPane1.setTabComponentAt(jTabbedPane1.getTabCount() - 1, new ButtonTabComponent(jTabbedPane1, newTabComponent));
		}
	}

	public void reloadTableData()
	{
		TableModel tableModel = jTable1.getModel();

		//only table model instance of DataReloadable can be reloaded
		if (tableModel instanceof DataReloadable)
		{
			//now reload table contents
			DataReloadable reloadModel = (DataReloadable) tableModel;
			reloadModel.reloadData();
		}

		//immediately update data in table
		jTable1.invalidate();
	}
}
