/*
 * MainGUI.java
 *
 * Created on 22. November 2006, 10:35
 */
package todo.gui;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import javax.swing.table.AbstractTableModel;
import todo.subgui.MeetingSubGUI;
import todo.subgui.TodoSubGUI;
import todo.core.Todo;
import todo.core.Meeting;
import todo.dbcon.DB_ToDo_Connect;
import java.util.Calendar;
import javax.swing.*;
import java.sql.*;
import java.util.HashMap;
import java.util.Vector;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import java.util.Enumeration;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import todo.dbcon.DB_Mitarbeiter_Connect;
import todo.subgui.SearchResultSubGUI;
import todo.tablemodel.CategoryTodoTableModel;
import todo.tablemodel.OpListTableModel;
import todo.tablemodel.PersonalTodoTableModel;
import todo.tablemodel.SearchResultTableModel;
import todo.tablemodel.WvTodoTableModel;

/**
 *
 * @author  Marcus Hertel
 */
public class MainGUI extends javax.swing.JFrame
{
	private static Connection con;
	private static String winClassName = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
	private static Meeting actMeeting;
	private static MainGUI mainGUI;
	private Vector employees = new Vector();
	private Vector topics = new Vector();
	private Vector categories = new Vector();
	private Vector areas = new Vector();
	private Vector meetingTypes = new Vector();
	private Vector meetingDates = new Vector();
	private boolean noResponsData = false;
	private boolean noInvolvData = false;
	private SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
	private Calendar glCal = Calendar.getInstance();
	public static final Properties applicationProperties = new Properties();

	/** Creates new form MainGUI */
	public MainGUI()
	{
		initComponents();

		setLocationRelativeTo(null);

		actMeeting = new Meeting();
		if (actMeeting.getMeetingID() == 0)
		{
			getLatestMeeting();
		}
		employees.add("");
		employees.add("Alle Mitarbeiter");
		getAllEmployees();
		topics.add("");
		getAllTopics();
		categories.add("");
		getAllCategories();
		areas.add("");
		getAllAreas();
		meetingTypes.add("");
		getAllMeetingTypes();
		meetingDates.add("");
		getAllMeetingDates();
		setComboBoxEmployees();
		setComboBoxFinStatus();
		setComboBoxCategory();
		setComboMeetingType();

		jSearchTerm.requestFocus();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelMeetingDate = new javax.swing.JLabel();
        jLabelMeetingType = new javax.swing.JLabel();
        jLabelMeetingPlace = new javax.swing.JLabel();
        jButtonManageMeeting = new javax.swing.JButton();
        jButtonManageTodo = new javax.swing.JButton();
        jButtonCreateProtocol = new javax.swing.JButton();
        jButtonCreatePersonalProtocolList = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabelAnalysis1 = new javax.swing.JLabel();
        jComboBoxEmployee = new javax.swing.JComboBox();
        jComboBoxFinStatus = new javax.swing.JComboBox();
        jComboBoxCategory = new javax.swing.JComboBox();
        jCalendarComboBoxReDate = new de.wannawork.jcalendar.JCalendarComboBox();
        jButtonCreatePersonalProtocol = new javax.swing.JButton();
        jButtonCreateCategoryList = new javax.swing.JButton();
        jButtonCreateReDateList = new javax.swing.JButton();
        jButtonCreateListProtocol = new javax.swing.JButton();
        CategoryListOutput = new javax.swing.JButton();
        WvListOutput = new javax.swing.JButton();
        jComboMeetingType = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jCalendarComboBoxReDate1 = new de.wannawork.jcalendar.JCalendarComboBox();
        jButton2 = new javax.swing.JButton();
        jLabelEmployee = new javax.swing.JLabel();
        jLabelFinStatus = new javax.swing.JLabel();
        jLabelCategory = new javax.swing.JLabel();
        jLabelReDate = new javax.swing.JLabel();
        jLabelOP_List1 = new javax.swing.JLabel();
        jLabelOP_List = new javax.swing.JLabel();
        jLabelEmployee1 = new javax.swing.JLabel();
        jLabelEmployee2 = new javax.swing.JLabel();
        jSearchTerm = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        Programm = new javax.swing.JMenu();
        jMenuItemNewMeeting = new javax.swing.JMenuItem();
        jMenuItemNewElement = new javax.swing.JMenuItem();
        jMenuItemClose = new javax.swing.JMenuItem();
        jMenuEmloyer = new javax.swing.JMenu();
        jMenuItemEmloyerData = new javax.swing.JMenuItem();
        jMenuItemConditions = new javax.swing.JMenuItem();
        jMenuItemAnstellung = new javax.swing.JMenuItem();
        jMenuStammdaten = new javax.swing.JMenu();
        jMenuItemMeetingType = new javax.swing.JMenuItem();
        jMenuItemFinishingStatus = new javax.swing.JMenuItem();
        jMenuItemCategory = new javax.swing.JMenuItem();
        jMenuItemInstitution = new javax.swing.JMenuItem();
        jMenuItemArea = new javax.swing.JMenuItem();
        jMenuItemTopic = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Protokolldatenbank - Konzept-e für Bildung und Soziales GmbH");
        setFont(new java.awt.Font("Tahoma", 0, 11));
        setMaximizedBounds(new java.awt.Rectangle(20, 20, 600, 800));
        setMinimumSize(new java.awt.Dimension(590, 630));
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jPanel1.setMaximumSize(new java.awt.Dimension(30, 30));
        jPanel1.setMinimumSize(new java.awt.Dimension(30, 30));
        jPanel1.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelMeetingDate.setBackground(new java.awt.Color(255, 255, 255));
        jLabelMeetingDate.setText("00.00.0000");
        jPanel1.add(jLabelMeetingDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 60, -1));

        jLabelMeetingType.setBackground(new java.awt.Color(255, 255, 255));
        jLabelMeetingType.setText("- keine Sitzungsart -");
        jPanel1.add(jLabelMeetingType, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 220, -1));

        jLabelMeetingPlace.setBackground(new java.awt.Color(255, 255, 255));
        jLabelMeetingPlace.setText("- kein Ort -");
        jPanel1.add(jLabelMeetingPlace, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 150, -1));

        jButtonManageMeeting.setText("Sitzungen bearbeiten");
        jButtonManageMeeting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonManageMeetingActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonManageMeeting, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 180, -1));

        jButtonManageTodo.setText("Protokollelemente verwalten");
        jButtonManageTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonManageTodoActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonManageTodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 180, -1));

        jButtonCreateProtocol.setText("Langes Protokoll erstellen");
        jButtonCreateProtocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateProtocolActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreateProtocol, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, 180, -1));

        jButtonCreatePersonalProtocolList.setText("Liste");
        jButtonCreatePersonalProtocolList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreatePersonalProtocolListActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreatePersonalProtocolList, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 350, 140, 20));

        jTextField2.setBackground(new java.awt.Color(0, 0, 0));
        jTextField2.setEditable(false);
        jTextField2.setText("jTextField1");
        jTextField2.setEnabled(false);
        jTextField2.setMinimumSize(new java.awt.Dimension(2, 20));
        jTextField2.setRequestFocusEnabled(false);
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 550, 5));

        jLabelAnalysis1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabelAnalysis1.setText("Auswertungen");
        jPanel1.add(jLabelAnalysis1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 110, -1));

        jPanel1.add(jComboBoxEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 370, 200, -1));

        jComboBoxFinStatus.setToolTipText("Bitte den Bearbeitungsstatus für die Auswerrtung auswählen");
        jComboBoxFinStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFinStatusActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBoxFinStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 430, 130, -1));

        jPanel1.add(jComboBoxCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 440, 200, -1));

        jCalendarComboBoxReDate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCalendarComboBoxReDateStateChanged(evt);
            }
        });
        jPanel1.add(jCalendarComboBoxReDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 270, 130, 20));

        jButtonCreatePersonalProtocol.setText("Druckvorschau");
        jButtonCreatePersonalProtocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreatePersonalProtocolActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreatePersonalProtocol, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 380, 140, 20));

        jButtonCreateCategoryList.setText("Druckvorschau");
        jButtonCreateCategoryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateCategoryListActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreateCategoryList, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 460, 140, -1));

        jButtonCreateReDateList.setText("Druckvorschau");
        jButtonCreateReDateList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateReDateListActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreateReDateList, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 530, 140, -1));

        jButtonCreateListProtocol.setText("Kurzes Protokoll erstellen");
        jButtonCreateListProtocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateListProtocolActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreateListProtocol, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, 180, -1));

        CategoryListOutput.setText("Liste");
        CategoryListOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryListOutputActionPerformed(evt);
            }
        });
        jPanel1.add(CategoryListOutput, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 430, 140, -1));

        WvListOutput.setText("Liste");
        WvListOutput.setEnabled(false);
        WvListOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WvListOutputActionPerformed(evt);
            }
        });
        jPanel1.add(WvListOutput, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 500, 140, -1));

        jPanel1.add(jComboMeetingType, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, 200, -1));

        jButton1.setText("Liste");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 240, 150, -1));

        jCalendarComboBoxReDate1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCalendarComboBoxReDate1StateChanged(evt);
            }
        });
        jPanel1.add(jCalendarComboBoxReDate1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 520, 200, 20));

        jButton2.setText("Druckvorschau");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 270, 150, -1));

        jLabelEmployee.setBackground(new java.awt.Color(255, 255, 255));
        jLabelEmployee.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "WV-Datum", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 250, 150, 50));

        jLabelFinStatus.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bearbeitungstatus", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jLabelFinStatus.setOpaque(true);
        jPanel1.add(jLabelFinStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 320, 150, 240));

        jLabelCategory.setBackground(new java.awt.Color(255, 255, 255));
        jLabelCategory.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Kategorie", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 410, 530, 80));

        jLabelReDate.setBackground(new java.awt.Color(255, 255, 255));
        jLabelReDate.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Wiedervorlagedatum", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelReDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 490, 530, 70));

        jLabelOP_List1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Auswertungen nach Kategorie", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 9))); // NOI18N
        jPanel1.add(jLabelOP_List1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 550, 250));

        jLabelOP_List.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OP-Liste", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 9))); // NOI18N
        jPanel1.add(jLabelOP_List, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 550, 80));

        jLabelEmployee1.setBackground(new java.awt.Color(255, 255, 255));
        jLabelEmployee1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mitarbeiter", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelEmployee1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, 530, 70));

        jLabelEmployee2.setBackground(new java.awt.Color(255, 255, 255));
        jLabelEmployee2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sitzungsart", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelEmployee2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 220, 50));

        jSearchTerm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jSearchTermKeyPressed(evt);
            }
        });
        jPanel1.add(jSearchTerm, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 130, -1));

        jButton3.setText("Suchen");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Gewählte Sitzung:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        Programm.setText("Programm");

        jMenuItemNewMeeting.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemNewMeeting.setText("Neue Sitzung");
        jMenuItemNewMeeting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewMeetingActionPerformed(evt);
            }
        });
        Programm.add(jMenuItemNewMeeting);

        jMenuItemNewElement.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemNewElement.setText("Neues Protokollelement");
        jMenuItemNewElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewElementActionPerformed(evt);
            }
        });
        Programm.add(jMenuItemNewElement);

        jMenuItemClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemClose.setText("Beenden");
        jMenuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCloseActionPerformed(evt);
            }
        });
        Programm.add(jMenuItemClose);

        jMenuBar1.add(Programm);

        jMenuEmloyer.setText("Mitarbeiter");
        jMenuEmloyer.setEnabled(false);

        jMenuItemEmloyerData.setText("Persönliche Daten");
        jMenuEmloyer.add(jMenuItemEmloyerData);

        jMenuItemConditions.setText("Kondition");
        jMenuEmloyer.add(jMenuItemConditions);

        jMenuItemAnstellung.setText("Anstellung");
        jMenuEmloyer.add(jMenuItemAnstellung);

        jMenuBar1.add(jMenuEmloyer);

        jMenuStammdaten.setText("Stammdaten");

        jMenuItemMeetingType.setText("Sitzungsart");
        jMenuItemMeetingType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMeetingTypeActionPerformed(evt);
            }
        });
        jMenuStammdaten.add(jMenuItemMeetingType);

        jMenuItemFinishingStatus.setText("Bearbeitungsstatus");
        jMenuItemFinishingStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFinishingStatusActionPerformed(evt);
            }
        });
        jMenuStammdaten.add(jMenuItemFinishingStatus);

        jMenuItemCategory.setText("Kategorie");
        jMenuItemCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCategoryActionPerformed(evt);
            }
        });
        jMenuStammdaten.add(jMenuItemCategory);

        jMenuItemInstitution.setText("Institution");
        jMenuItemInstitution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemInstitutionActionPerformed(evt);
            }
        });
        jMenuStammdaten.add(jMenuItemInstitution);

        jMenuItemArea.setText("Bereich");
        jMenuItemArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAreaActionPerformed(evt);
            }
        });
        jMenuStammdaten.add(jMenuItemArea);

        jMenuItemTopic.setText("Thema");
        jMenuItemTopic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTopicActionPerformed(evt);
            }
        });
        jMenuStammdaten.add(jMenuItemTopic);

        jMenuBar1.add(jMenuStammdaten);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCreateProtocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateProtocolActionPerformed
		String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "Protokoll.jrxml";
		//String reportDest = "H:\\ToDo\\report\\results\\Protokoll_"
		//                       + actMeeting.getDate() + "_"
		//                    + actMeeting.getMeetingType() + ".html";
		//String pdfDest = "R:\\Protokoll_" + actMeeting.getDate()
		//                + "_" + actMeeting.getMeetingType() + ".pdf";
		ArrayList<Integer> prot = new ArrayList<Integer>();
		prot.add(actMeeting.getProt());

		//erzeuge Tagesordnung
		//StringBuilder agenda = new StringBuilder();
		String agenda = "";
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();
		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Überschrift FROM Protokollelement WHERE Geloescht = false AND "
						 + "SitzungsID = " + actMeeting.getMeetingID() + " ORDER BY ToDoID ASC";

			ResultSet rst = stmt.executeQuery(sql);

			int counter = 1;
			while (rst.next())
			{
				agenda += "TOP " + counter + " " + rst.getString("Überschrift") + "\n";
				counter++;
			}

			rst.close();
			stmt.close();

		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}
		DB_ToDo_Connect.closeDB(con);

		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("Tagesordnung", agenda.toString());
		params.put("SitzName", actMeeting.getMeetingType());
		params.put("Datum", sdf.format(actMeeting.getDate()));
		params.put("Ort", actMeeting.getPlace());
		params.put("Protokollant", getNameAndLastNameByID(prot));
		params.put("Teilnehmer", getNameAndLastNameByID(getPersonnelIdsFromItemId("meeting_attendee_personnel", "meetingID", actMeeting.getMeetingID())));
		params.put("Sonstige", actMeeting.getOtherPaticipants());
		params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");
		params.put("Agenda", agenda);//.toString());
		ArrayList<HashMap> td = loadTodoData();

		JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(td);

		/*if(data.isEmpty()) {
		HashMap<String,String> fields= new HashMap<String,String>();
		fields.put("Kategorie", "! FEHLER !");
		fields.put("Inhalt", "!!! Für diese Sitzung wurden noch keine Daten eingegeben !!!");
		fields.put("Verantwortliche", "Aktueller Benutzer");
		data.add(fields);

		}
		 */
		try
		{
			JasperReport jasperReport =
						 JasperCompileManager.compileReport(reportSource);

			JasperPrint jasperPrint =
						JasperFillManager.fillReport(jasperReport, params, dataSet);

			//++++++++++++++ HTML-Export  +++++++++++++++
			//JasperExportManager.exportReportToHtmlFile(
			//jasperPrint, reportDest);

			//++++++++++++++  PDF-Export  ++++++++++++++++
			//JasperExportManager.exportReportToPdfFile(jasperPrint, pdfDest);

			JasperViewer.viewReport(jasperPrint, false);
		}
		catch (JRException ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_jButtonCreateProtocolActionPerformed

    private void jMenuItemAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAreaActionPerformed
		//AreaGUI öffnen um alle Bereiche anzuzeigen und zu bearbeiten
		AreaGUI area = new AreaGUI();
		area.setVisible(true);
    }//GEN-LAST:event_jMenuItemAreaActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
		if (actMeeting.getMeetingID() == 0)
		{
			getLatestMeeting();
		}
		else
		{
			jLabelMeetingDate.setText(sdf.format(actMeeting.getDate()));
			jLabelMeetingPlace.setText(actMeeting.getPlace());
			jLabelMeetingType.setText(actMeeting.getMeetingType());
			// Daten der gewählten Sitzung(Objekt Meeting) aktualisieren
			getChosenMeeting(actMeeting.getMeetingID());
		}
    }//GEN-LAST:event_formWindowGainedFocus

    private void jButtonManageTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonManageTodoActionPerformed
		//TodoGUI öffnen um alle Protokollelemente anzuzeigen und zu bearbeiten
		if (actMeeting.getMeetingTypeID() != 0)
		{
			TodoGUI todo = new TodoGUI(actMeeting.getMeetingID());
			todo.setVisible(true);
		}
		else
		{
			JOptionPane.showMessageDialog(this, "Bitte als ersten Schritt eine Sitzung auswählen.", "Fehler beim Lande", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_jButtonManageTodoActionPerformed

    private void jButtonManageMeetingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonManageMeetingActionPerformed
		//MeetingGUI öffnen um alle Sitzungen anzuzeigen und zu bearbeiten
		MeetingGUI meet = new MeetingGUI();
		meet.setVisible(true);
    }//GEN-LAST:event_jButtonManageMeetingActionPerformed

    private void jMenuItemCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCategoryActionPerformed
		//CategoryGUI öffnen um alle Kategorien anzuzeigen und zu bearbeiten
		CategoryGUI cat = new CategoryGUI();
		cat.setVisible(true);
    }//GEN-LAST:event_jMenuItemCategoryActionPerformed

    private void jMenuItemInstitutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemInstitutionActionPerformed
		//InstitutionGUI öffnen um alle Stati anzuzeigen und zu bearbeiten
		InstitutionGUI inst = new InstitutionGUI();
		inst.setVisible(true);
    }//GEN-LAST:event_jMenuItemInstitutionActionPerformed

    private void jMenuItemFinishingStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFinishingStatusActionPerformed
		//FinStatusGUI öffnen um alle Stati anzuzeigen und zu bearbeiten
		FinStatusGUI fs = new FinStatusGUI();
		fs.setVisible(true);
    }//GEN-LAST:event_jMenuItemFinishingStatusActionPerformed

    private void jMenuItemMeetingTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMeetingTypeActionPerformed
		//MeetingTypeGUI öffnen um alle Sitzungsarten anzuzeigen und zu bearbeiten
		MeetingTypeGUI mt = new MeetingTypeGUI();
		mt.setVisible(true);
    }//GEN-LAST:event_jMenuItemMeetingTypeActionPerformed

    private void jMenuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCloseActionPerformed
		System.exit(0);
    }//GEN-LAST:event_jMenuItemCloseActionPerformed

    private void jMenuItemTopicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTopicActionPerformed
		//TopicGUI öffnen um alle Themen anzuzeigen und zu bearbeiten
		TopicGUI topic = new TopicGUI();
		topic.setVisible(true);
    }//GEN-LAST:event_jMenuItemTopicActionPerformed

    private void jButtonCreatePersonalProtocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreatePersonalProtocolActionPerformed
		int empID = 0;
		if (jComboBoxEmployee.getSelectedItem().toString().equals("Alle Mitarbeiter"))
		{
			//JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
			//        "Die Auswahl 'Alle Mitarbeiter' ist für diesen Report unzulässig.", "Fehler", JOptionPane.ERROR_MESSAGE);
			empID = -1;
		} //else {
		if (jComboBoxEmployee.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. "
												+ "Sie haben keinen Mitarbeiter ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			if (jComboBoxFinStatus.getSelectedItem().toString().equals(""))
			{
				JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. "
													+ "Sie haben keinen Status ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
			}
			else
			{
				ArrayList<HashMap> ptd;
				String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "PersönlicheTodos.jrxml";
				Calendar cal = Calendar.getInstance();
				noResponsData = true;
				noInvolvData = true;

				HashMap<String, Object> params = new HashMap<String, Object>();
				String actDate = getDayString(cal.get(Calendar.DAY_OF_WEEK)) + ", " + cal.get(Calendar.DAY_OF_MONTH) + "." + (cal.get(Calendar.MONTH) + 1) + "." + cal.get(Calendar.YEAR);
				params.put("Datum", actDate);
				params.put("Mitarbeiter", jComboBoxEmployee.getSelectedItem().toString());
				params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");
				params.put("IMAGE2", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\wichtig.jpg");
				params.put("IMAGE3", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\info.jpg");
				/*
				 * Laden aller mit dem ausgewählten Benutzer verknüpften Protokollelemente
				 * in die HashMap ptd unter Berücksichtigung des Bearbeitungsstatus
				 * zuerst Verantwortlich-, danach Beteiligt-Protokollelemente
				 */

				if (empID == -1)
				{
					ptd = loadCompleteOpListData();
					noResponsData = false;
					noInvolvData = false;
				}
				else
				{
					ptd = loadPersonalTodoData(jComboBoxFinStatus.getSelectedItem().toString());
				}

				if (!noResponsData && !noInvolvData)
				{
					JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(ptd);

					/*if(data.isEmpty()) {
					HashMap<String,String> fields= new HashMap<String,String>();
					fields.put("Kategorie", "! FEHLER !");
					fields.put("Inhalt", "!!! Für diese Sitzung wurden noch keine Daten eingegeben !!!");
					fields.put("Verantwortliche", "Aktueller Benutzer");
					data.add(fields);

					}
					 */
					try
					{
						JasperReport jasperReport = JasperCompileManager.compileReport(reportSource);
						JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, dataSet);

						JasperViewer.viewReport(jasperPrint, false);
					}
					catch (JRException ex)
					{
						Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
					}
				}
				else
				{
					JOptionPane.showMessageDialog(this, "Es wurden keine Elemente gefunden!");
				}
			}
		}
		//}

}//GEN-LAST:event_jButtonCreatePersonalProtocolActionPerformed

    private void jButtonCreateCategoryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateCategoryListActionPerformed
		if (jComboBoxCategory.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. "
												+ "Sie haben keine Kategorie ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else if (jComboBoxFinStatus.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. "
												+ "Sie haben keinen Status ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "Kategorienliste.jrxml";
			Calendar cal = Calendar.getInstance();

			HashMap<String, Object> params = new HashMap<String, Object>();
			String actDate = getDayString(cal.get(Calendar.DAY_OF_WEEK)) + ", " + cal.get(Calendar.DAY_OF_MONTH) + "." + (cal.get(Calendar.MONTH) + 1) + "." + cal.get(Calendar.YEAR);
			params.put("Datum", actDate);
			params.put("Kategorie", jComboBoxCategory.getSelectedItem().toString());
			params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");
			/*
			 * Laden aller mit dem ausgewählten Thema verknüpften Protokollelemente
			 * in die HashMap cl
			 */
			ArrayList<HashMap> cl = loadCategoryData(jComboBoxCategory.getSelectedItem().toString(), getFinStatusIDByName(jComboBoxFinStatus.getSelectedItem().toString()));
			JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(cl);

			if (!cl.isEmpty())
			{
				try
				{
					JasperReport jasperReport = JasperCompileManager.compileReport(reportSource);
					JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, dataSet);

					JasperViewer.viewReport(jasperPrint, false);
				}
				catch (JRException ex)
				{
					Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
			else
			{
				JOptionPane.showMessageDialog(this, "Es wurden keine Elemente gefunden!");
			}
		}
}//GEN-LAST:event_jButtonCreateCategoryListActionPerformed

    private void jButtonCreateReDateListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateReDateListActionPerformed
		if (jComboBoxFinStatus.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. "
												+ "Sie haben keinen Status ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "WV_Liste.jrxml";
			Calendar cal = Calendar.getInstance();
			Todo td = new Todo();

			HashMap<String, Object> params = new HashMap<String, Object>();

			params.put("Datum", sdf.format(cal.getTime()));
			params.put("Wiedervorlagedatum", sdf.format(jCalendarComboBoxReDate.getCalendar().getTime()));
			params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");
			/*
			 * Laden aller mit dem ausgewählten Datum verknüpften Protokollelemente
			 * in die HashMap rdl
			 */
			td.setReDate(jCalendarComboBoxReDate.getCalendar().getTime());
			java.sql.Date date = new Date(td.getReDate().getTime());
			ArrayList<HashMap> rdl = loadReDateData(date, getFinStatusIDByName(jComboBoxFinStatus.getSelectedItem().toString()));
			JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(rdl);

			if (!rdl.isEmpty())
			{
				try
				{
					JasperReport jasperReport = JasperCompileManager.compileReport(reportSource);
					JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, dataSet);

					JasperViewer.viewReport(jasperPrint, false);
				}
				catch (JRException ex)
				{
					Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
			else
			{
				JOptionPane.showMessageDialog(this, "Es wurden keine Elemente gefunden!");
			}
		}
    }//GEN-LAST:event_jButtonCreateReDateListActionPerformed

    private void jMenuItemNewMeetingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewMeetingActionPerformed
		String meetingType = "";
		String date = "";
		int meetingID = 0;
		String otherPart = "";
		MeetingSubGUI newMeet = new MeetingSubGUI(0, meetingID, meetingType, date, otherPart);
		newMeet.setVisible(true);
    }//GEN-LAST:event_jMenuItemNewMeetingActionPerformed

    private void jMenuItemNewElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewElementActionPerformed
		//TodoGUI öffnen um alle Protokollelemente anzuzeigen und zu bearbeiten
		if (actMeeting.getMeetingTypeID() != 0)
		{
			TodoGUI todo = new TodoGUI(actMeeting.getMeetingID());
			todo.setVisible(true);
		}
		else
		{
			JOptionPane.showMessageDialog(this, "Bitte als ersten Schritt eine Sitzung auswählen.", "Fehler beim Lande", JOptionPane.ERROR_MESSAGE);
		}
		TodoSubGUI newTodo = new TodoSubGUI(0, actMeeting.getMeetingID(), "", "", 0, true);
		newTodo.setVisible(true);
    }//GEN-LAST:event_jMenuItemNewElementActionPerformed

    private void jCalendarComboBoxReDateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCalendarComboBoxReDateStateChanged
		if (evt.getSource() == jCalendarComboBoxReDate)
		{
			glCal.set(jCalendarComboBoxReDate.getCalendar().get(glCal.YEAR),
					  jCalendarComboBoxReDate.getCalendar().get(glCal.MONTH) + 1,
					  jCalendarComboBoxReDate.getCalendar().get(glCal.DAY_OF_MONTH));
		}
}//GEN-LAST:event_jCalendarComboBoxReDateStateChanged

    private void jButtonCreatePersonalProtocolListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreatePersonalProtocolListActionPerformed
		int empID = 0;
		if (jComboBoxEmployee.getSelectedItem().toString().equals("Alle Mitarbeiter"))
		{
			empID = -1;
		}

		if (jComboBoxEmployee.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. "
												+ "Sie haben keinen Mitarbeiter ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			if (jComboBoxFinStatus.getSelectedItem().toString().equals(""))
			{
				JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. "
													+ "Sie haben keinen Status ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
			}
			else
			{
				int statID = getFinStatusIDByName(jComboBoxFinStatus.getSelectedItem().toString());
				empID = getEmployeeIDByName(jComboBoxEmployee.getSelectedItem().toString());

				final int finalEmpID = empID;
				final int finalStatID = statID;

				TodoListGUI newPTDL = new TodoListGUI(new UpdateDataMethod()
				{
					@Override
					public AbstractTableModel dataModelHasChanged()
					{
						return new PersonalTodoTableModel(finalEmpID, finalStatID);
					}
				});
				newPTDL.setVisible(true);
			}
		}
    }//GEN-LAST:event_jButtonCreatePersonalProtocolListActionPerformed

	private String getParticipiants(int meetingId)
	{
		DB_ToDo_Connect.openDB();
		DB_Mitarbeiter_Connect.openDB();
		con = DB_ToDo_Connect.getCon();
		Connection con2 = DB_Mitarbeiter_Connect.getCon();
		String returnString = "";

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT meeting_attendee_personnel.personnelID FROM meeting_attendee_personnel " +
					"INNER JOIN Sitzungsdaten ON meeting_attendee_personnel.meetingID = Sitzungsdaten.SitzungsdatenID " +
					"WHERE Sitzungsdaten.SitzungsdatenID = " + meetingId;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				Statement stmt2 = con2.createStatement();
				String sql2 = "SELECT * FROM Stammdaten WHERE Personalnummer = " + rst.getInt("personnelID");
				ResultSet rst2 = stmt2.executeQuery(sql2);
				rst2.next();

				returnString += rst2.getString("Vorname") + " " + rst2.getString("Nachname") + ", ";

				rst2.close();
				stmt2.close();
			}

			rst.close();
			stmt.close();

		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		DB_Mitarbeiter_Connect.closeDB(con2);

		return (returnString.length() > 2 ) ? returnString.substring(0, returnString.length() - 2) : "";
	}

    private void jButtonCreateListProtocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateListProtocolActionPerformed
		String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "ProtokollKurz.jrxml";

		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("SitzDatum", sdf.format(actMeeting.getDate()));
		params.put("SitzName", actMeeting.getMeetingType());
		params.put("SitzOrt", actMeeting.getPlace());
		params.put("SitzParticipiants", getParticipiants(actMeeting.getMeetingID()));
		ArrayList<HashMap> std = loadShortTodoData();

		JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(std);

		try
		{
			JasperReport jasperReport = JasperCompileManager.compileReport(reportSource);
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, dataSet);

			JasperViewer.viewReport(jasperPrint, false);
		}
		catch (JRException ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_jButtonCreateListProtocolActionPerformed

	private void jComboBoxFinStatusActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBoxFinStatusActionPerformed
	{//GEN-HEADEREND:event_jComboBoxFinStatusActionPerformed
	}//GEN-LAST:event_jComboBoxFinStatusActionPerformed

	private void CategoryListOutputActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CategoryListOutputActionPerformed
	{//GEN-HEADEREND:event_CategoryListOutputActionPerformed
		if (jComboBoxFinStatus.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. "
												+ "Sie haben keinen Status ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			TodoListGUI tmpGui = new TodoListGUI(new UpdateDataMethod()
			{
				@Override
				public AbstractTableModel dataModelHasChanged()
				{
					return new CategoryTodoTableModel(getCategoryIDByName(jComboBoxCategory.getSelectedItem().toString()), getFinStatusIDByName(jComboBoxFinStatus.getSelectedItem().toString()));
				}
			});
			tmpGui.setVisible(true);
		}
	}//GEN-LAST:event_CategoryListOutputActionPerformed

	private void WvListOutputActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_WvListOutputActionPerformed
	{//GEN-HEADEREND:event_WvListOutputActionPerformed
		if (jComboBoxFinStatus.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. "
												+ "Sie haben keinen Status ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			TodoListGUI tmpGui = new TodoListGUI(new UpdateDataMethod()
			{
				@Override
				public AbstractTableModel dataModelHasChanged()
				{
					return new WvTodoTableModel(new java.sql.Date(jCalendarComboBoxReDate.getCalendar().getTime().getTime()), getFinStatusIDByName(jComboBoxFinStatus.getSelectedItem().toString()));
				}
			});
			tmpGui.setVisible(true);
		}
	}//GEN-LAST:event_WvListOutputActionPerformed

	private void jCalendarComboBoxReDate1StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jCalendarComboBoxReDate1StateChanged
	{//GEN-HEADEREND:event_jCalendarComboBoxReDate1StateChanged
		// TODO add your handling code here:
	}//GEN-LAST:event_jCalendarComboBoxReDate1StateChanged

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
	{//GEN-HEADEREND:event_jButton1ActionPerformed
		if (jComboMeetingType.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Das Feld für die Auswahl der Sitzungsart ist leer bzw. wurde nicht gewählt!", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			TodoListGUI newPTDL = new TodoListGUI(new UpdateDataMethod()
			{
				@Override
				public AbstractTableModel dataModelHasChanged()
				{
					return new OpListTableModel(getMeetingTypeIDByName(jComboMeetingType.getSelectedItem().toString()), jCalendarComboBoxReDate.getCalendar().getTime());
				}
			});
			newPTDL.setVisible(true);
		}
	}//GEN-LAST:event_jButton1ActionPerformed

	private ArrayList<HashMap> loadMeetingTypeData(java.util.Date wvDate, int meetingTypeId)
	{
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();
		ArrayList<HashMap> data = new ArrayList<HashMap>();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT SitzungsID, Überschrift, Protokollelement.InstitutionsID, TBZuordnung_ID, Sitzungsart.Name as Sitzungsart, Protokollelement.WV_Sitzungsart, Protokollelement.Überschrift, Status.Name as Status, Kategorie.Name as Kategorie, Thema.Name as Thema, Protokollelement.Wiedervorlagedatum, Protokollelement.Inhalt, Protokollelement.ToDoID, Protokollelement.WiedervorlageGesetzt FROM Thema INNER JOIN (TBZ INNER JOIN (Sitzungsart INNER JOIN (Sitzungsdaten INNER JOIN (Status INNER JOIN (Kategorie INNER JOIN Protokollelement ON Kategorie.KategorieID = Protokollelement.KategorieID) ON Status.StatusID = Protokollelement.StatusID) ON Sitzungsdaten.SitzungsdatenID = Protokollelement.SitzungsID) ON Sitzungsart.SitzungsartID = Sitzungsdaten.SitzungsartID) ON TBZ.TBZ_ID = Protokollelement.TBZuordnung_ID) ON Thema.ThemaID = TBZ.ThemaID WHERE Sitzungsart.SitzungsartID = " + meetingTypeId + " AND Status.Name = 'Neu' AND WiedervorlageGesetzt = true AND WiedervorlageDatum <= #" + new SimpleDateFormat("dd/MM/yyyy").format(wvDate) + "#";
			ResultSet rst = stmt.executeQuery(sql);
			Statement stmt2 = con.createStatement();

			while (rst.next())
			{
				HashMap<String, String> fields = new HashMap<String, String>();

				int tbz_id = rst.getInt("TBZuordnung_ID");
				fields.put("Kategorie", rst.getString("Kategorie"));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", rst.getString("Status"));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				fields.put("Ueberschrift", rst.getString("Überschrift"));
				int todoId = rst.getInt("ToDoID");
				fields.put("Verantwortliche", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_responsible_personnel", "todoID", todoId)));
				fields.put("Beteiligte", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_involved_personnel", "todoID", todoId)));

				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				String sql2 = "SELECT * FROM Sitzungsdaten INNER JOIN Sitzungsart ON Sitzungsdaten.SitzungsartID = Sitzungsart.SitzungsartID WHERE SitzungsdatenID = " + rst.getInt("SitzungsID");
				ResultSet rst2 = stmt2.executeQuery(sql2);
				rst2.next();

				fields.put("SitzOrt", rst2.getString("Ort"));
				java.util.Date md = rst2.getDate("Datum");

				if (md != null)
				{
					fields.put("SitzDatum", sdf.format(md));
				}
				else
				{
					fields.put("SitzDatum", "kein");
				}

				fields.put("SitzName", rst2.getString("Name"));
				data.add(fields);
				rst2.close();
			}

			rst.close();
			stmt.close();
			stmt2.close();

		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return data;
	}

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
	{//GEN-HEADEREND:event_jButton2ActionPerformed
		if (jComboMeetingType.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Das Feld für die Auswahl der Sitzungsart ist leer bzw. wurde nicht gewählt!", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			ArrayList<HashMap> ptd;
			String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "MeetingTypeTodos.jrxml";
			Calendar cal = Calendar.getInstance();

			HashMap<String, Object> params = new HashMap<String, Object>();
			String actDate = getDayString(cal.get(Calendar.DAY_OF_WEEK)) + ", " + cal.get(Calendar.DAY_OF_MONTH) + "." + (cal.get(Calendar.MONTH) + 1) + "." + cal.get(Calendar.YEAR);
			params.put("Datum", actDate);
			params.put("Sitzungsart", jComboMeetingType.getSelectedItem().toString());
			params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");

			ptd = loadMeetingTypeData(jCalendarComboBoxReDate.getCalendar().getTime(), getMeetingTypeIDByName(jComboMeetingType.getSelectedItem().toString()));

			JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(ptd);

			try
			{
				JasperReport jasperReport = JasperCompileManager.compileReport(reportSource);
				JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, dataSet);
				JasperViewer.viewReport(jasperPrint, false);
			}
			catch (JRException ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
	}//GEN-LAST:event_jButton2ActionPerformed

	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton3ActionPerformed
	{//GEN-HEADEREND:event_jButton3ActionPerformed
		if (jSearchTerm.getText().equals(""))
		{
			JOptionPane.showMessageDialog(this, "Die Suche kann ohne Suchbegriff nicht gestartet werden.", "Fehler", JOptionPane.ERROR_MESSAGE);
			return;
		}

		DB_ToDo_Connect.openDB();
		Connection tmpCon = DB_ToDo_Connect.getCon();

		GlobalDatabaseSearch search = new GlobalDatabaseSearch();
		SearchResultTableModel resultModel = new SearchResultTableModel(search.doSearch(tmpCon, jSearchTerm.getText()), jSearchTerm.getText());

		new SearchResultSubGUI(resultModel).setVisible(true);

		DB_ToDo_Connect.closeDB(tmpCon);
	}//GEN-LAST:event_jButton3ActionPerformed

	private void jSearchTermKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jSearchTermKeyPressed
	{//GEN-HEADEREND:event_jSearchTermKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER)
		{
			jButton3ActionPerformed(null);
		}
	}//GEN-LAST:event_jSearchTermKeyPressed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		try
		{
			File file = new File("E:\\Konzept-e\\OldCode\\ToDoAppSettings.xml");
			if (!file.exists())
			{
				file = new File("H:\\ToDo\\config\\ToDoAppSettings2.xml");
				if (!file.exists())
				{
					file = new File("H:\\ToDo\\config\\ToDoAppSettings.xml");
				}
			}

			FileInputStream inputStream = new FileInputStream(file);
			applicationProperties.loadFromXML(inputStream);
			inputStream.close();

		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			JOptionPane.showMessageDialog(mainGUI, "Die Datei 'ToDoAppSettings.xml' konnte "
												   + "nicht gefunden werden oder es trat ein Fehler beim Laden auf!\n"
												   + "Bitte überprüfen Sie, ob die Datei vorhanden ist und starten Sie "
												   + "die Anwendung dann erneut.", "Fehler", JOptionPane.ERROR_MESSAGE);
			System.exit(1);
		}

		try
		{
			Logger logger = Logger.getLogger(MainGUI.class.getName());

			FileHandler fh = new FileHandler(applicationProperties.getProperty("LoggerLogfilePath"), true);
			logger.addHandler(fh);
			logger.setLevel(Level.ALL);
			SimpleFormatter formatter = new SimpleFormatter();
			fh.setFormatter(formatter);

			logger.log(Level.INFO, "ToDoApp erfolgreich gestartet und initialisiert.");

		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			JOptionPane.showMessageDialog(mainGUI, "Die Anwendung konnte die Datei zur "
												   + "Ausgabe von Fehlermeldungen nicht öffnen.\n\nBitte informieren Sie Ihren "
												   + "Administrator über diese Fehlermeldung oder starten Sie die Anwendung erneut.");
			System.exit(1);
		}

		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				setLookAndFeel();
				mainGUI = new MainGUI();
				mainGUI.setVisible(true);
			}
		});
	}

	public static void setLookAndFeel()
	{
		try
		{
			UIManager.setLookAndFeel(winClassName);
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

	}

	public ArrayList loadTodoData()
	{
		ArrayList<HashMap> todoData = new ArrayList<HashMap>();
		int tbz_id = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Protokollelement WHERE Geloescht = false AND SitzungsID="
						 + actMeeting.getMeetingID() + " ORDER BY ToDoID ASC";
			ResultSet rst = stmt.executeQuery(sql);
			int counter = 1;

			while (rst.next())
			{
				HashMap<String, String> fields = new HashMap<String, String>();
				tbz_id = rst.getInt("TBZuordnung_ID");
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				fields.put("Ueberschrift", "TOP " + counter + " " + rst.getString("Überschrift"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				int todoId = rst.getInt("ToDoID");
				fields.put("Verantwortliche", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_responsible_personnel", "todoID", todoId)));
				fields.put("Beteiligte", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_involved_personnel", "todoID", todoId)));
				todoData.add(fields);
				counter++;
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return todoData;
	}

	public ArrayList loadShortTodoData()
	{
		ArrayList<HashMap> shortTodoData = new ArrayList<HashMap>();
		int tbz_id = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Protokollelement WHERE Geloescht = false AND SitzungsID = " + actMeeting.getMeetingID();
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				HashMap<String, String> fields = new HashMap<String, String>();
				tbz_id = rst.getInt("TBZuordnung_ID");
				fields.put("TOP", rst.getString("Überschrift"));
				fields.put("Inhalt", rst.getString("Inhalt"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				fields.put("Verantwortliche", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_responsible_personnel", "todoID", rst.getInt("ToDoID"))));
				shortTodoData.add(fields);
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return shortTodoData;
	}

	public ArrayList loadTopicData(String topic, int statusId)
	{
		ArrayList<HashMap> topicData = new ArrayList<HashMap>();
		int topID = getTopicIDByName(topic);
		int tbz_id = -1;
		Vector topicTBZ = getTBZ_ListByAreaOrTopicID(topID, 1);

		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			Enumeration eTbz = topicTBZ.elements();
			while (eTbz.hasMoreElements())
			{
				tbz_id = ((Integer) eTbz.nextElement()).intValue();
				if (tbz_id != -1)
				{
					String sql;
					if (statusId == -1)
					{
						sql = "SELECT * FROM Protokollelement WHERE "
							  + "TBZuordnung_ID=" + tbz_id + " AND Geloescht = false ORDER BY ToDoID DESC";
					}
					else
					{
						sql = "SELECT * FROM Protokollelement WHERE "
							  + "TBZuordnung_ID=" + tbz_id + " AND Geloescht = false "
							  + "AND StatusID = " + statusId + " "
							  + "ORDER BY ToDoID DESC";
					}
					ResultSet rst = stmt.executeQuery(sql);

					while (rst.next())
					{
						HashMap<String, String> fields = new HashMap<String, String>();
						int meetingID = rst.getInt("SitzungsID");
						Meeting m = getMeetingDataByID(meetingID);
						fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
						fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
						fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
						fields.put("Status", getStatByID(rst.getInt("StatusID")));
						fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
						fields.put("Inhalt", rst.getString("Inhalt"));
						if (rst.getBoolean("WiedervorlageGesetzt"))
						{
							fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
						}
						else
						{
							fields.put("Wiedervorlagedatum", "kein");
						}

						int todoId = rst.getInt("ToDoID");
						fields.put("Verantwortliche", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_responsible_personnel", "todoID", todoId)));
						fields.put("Beteiligte", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_involved_personnel", "todoID", todoId)));
						fields.put("SitzOrt", m.getPlace());
						fields.put("SitzDatum", sdf.format(m.getDate()));
						fields.put("SitzName", m.getMeetingType());
						topicData.add(fields);
					}

					rst.close();
				}

			}
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return topicData;
	}

	public ArrayList loadPersonalTodoData(String status)
	{
		ArrayList<HashMap> personalTodoData = new ArrayList<HashMap>();
		String empName = jComboBoxEmployee.getSelectedItem().toString();
		int tbz_id = -1;
		int empID = getEmployeeIDByName(empName);
		String sql = "";    //Query-String für Verantwortliche
		String sql2 = "";   //Query-String für Beteiligte

		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		/*  zuerst alle Protokollpunkte ermitteln bei denen der ausgewählte
		 *  Mitarbeiter als Verantwortlicher eingetragen ist
		 *
		 *  hier wird die Variable  PersonalTodo.response auf TRUE gesetzt um
		 *  bei der Berichtserstellung die richtigen Grafiken und Column-Überschriften
		 *  setzen zu können
		 */
		try
		{
			Statement stmt = con.createStatement();
			if (status.equals("Alle"))
			{
				sql = "SELECT Protokollelement.* FROM Protokollelement INNER JOIN todo_responsible_personnel ON "
					  + "Protokollelement.ToDoID = todo_responsible_personnel.todoID "
					  + "WHERE todo_responsible_personnel.personnelID = " + empID + " AND Protokollelement.Geloescht = false";
			}
			else
			{
				sql = "SELECT Protokollelement.* FROM Protokollelement INNER JOIN todo_responsible_personnel ON "
					  + "Protokollelement.ToDoID = todo_responsible_personnel.todoID "
					  + "WHERE todo_responsible_personnel.personnelID = " + empID + " AND Protokollelement.Geloescht = false "
					  + "AND Protokollelement.StatusID = " + getFinStatusIDByName(status);
			}

			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				noResponsData = false;
				HashMap<String, String> fields = new HashMap<String, String>();
				int meetingID = rst.getInt("SitzungsID");
				Meeting m = getMeetingDataByID(meetingID);
				tbz_id = rst.getInt("TBZuordnung_ID");
				fields.put("Typ", "Verantwortlich");
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				int todoId = rst.getInt("ToDoID");
				fields.put("Verantwortliche", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_responsible_personnel", "todoID", todoId)));
				fields.put("Beteiligte", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_involved_personnel", "todoID", todoId)));
				fields.put("SitzOrt", m.getPlace());
				fields.put("SitzDatum", sdf.format(m.getDate()));
				fields.put("SitzName", m.getMeetingType());
				personalTodoData.add(fields);

			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);

		/*  jetzt alle Protokollelemente ermitteln bei denen der ausgewählte Mitarbeiter
		 *  als Beteiligter eingetragen ist
		 */
		DB_ToDo_Connect.openDB();
		con =
		DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt2 = con.createStatement();
			if (status.equals("Alle"))
			{
				sql2 = "SELECT Protokollelement.* FROM Protokollelement INNER JOIN todo_involved_personnel ON "
					   + "Protokollelement.ToDoID = todo_involved_personnel.todoID "
					   + "WHERE todo_involved_personnel.personnelID = " + empID + " AND Protokollelement.Geloescht = false";
			}
			else
			{
				sql2 = "SELECT Protokollelement.* FROM Protokollelement INNER JOIN todo_involved_personnel ON "
					   + "Protokollelement.ToDoID = todo_involved_personnel.todoID "
					   + "WHERE todo_involved_personnel.personnelID = " + empID + " AND Protokollelement.Geloescht = false "
					   + "AND StatusID = " + getFinStatusIDByName(status);
			}

			ResultSet rst2 = stmt2.executeQuery(sql2);

			while (rst2.next())
			{
				noInvolvData = false;
				int meetingID = rst2.getInt("SitzungsID");
				Meeting m = getMeetingDataByID(meetingID);
				HashMap<String, String> fields = new HashMap<String, String>();
				fields.put("Typ", "Beteiligt");
				fields.put("Kategorie", getCatByID(rst2.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(rst2.getInt("BereichID")));
				fields.put("Institution", getInstByID(rst2.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst2.getInt("StatusID")));
				fields.put("Thema", rst2.getString("Thema"));
				fields.put("Inhalt", rst2.getString("Inhalt"));
				fields.put("Wiedervorlagedatum", rst2.getString("Wiedervorlagedatum"));
				int todoId = rst2.getInt("ToDoID");
				fields.put("Verantwortliche", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_responsible_personnel", "todoID", todoId)));
				fields.put("Beteiligte", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_involved_personnel", "todoID", todoId)));
				fields.put("SitzOrt", m.getPlace());
				fields.put("SitzDatum", sdf.format(m.getDate()));
				fields.put("SitzName", m.getMeetingType());
				personalTodoData.add(fields);
			}

			rst2.close();
			stmt2.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return personalTodoData;
	}

	public ArrayList loadCategoryData(String cat, int statusId)
	{
		ArrayList<HashMap> topicData = new ArrayList<HashMap>();
		int catID = getCategoryIDByName(cat);
		int tbz_id = -1;

		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			PreparedStatement pStmt;
			if (statusId == -1)
			{
				pStmt = con.prepareStatement("SELECT * FROM Protokollelement INNER JOIN "
											 + "(Sitzungsdaten INNER JOIN Sitzungsart ON Sitzungsdaten.SitzungsartID = Sitzungsart.SitzungsartID) "
											 + "ON Protokollelement.SitzungsID = Sitzungsdaten.SitzungsdatenID WHERE Protokollelement.Geloescht "
											 + "= false AND Sitzungsdaten.Geloescht = false AND KategorieID = ?");
			}
			else
			{
				pStmt = con.prepareStatement("SELECT * FROM Protokollelement INNER JOIN "
											 + "(Sitzungsdaten INNER JOIN Sitzungsart ON Sitzungsdaten.SitzungsartID = Sitzungsart.SitzungsartID) "
											 + "ON Protokollelement.SitzungsID = Sitzungsdaten.SitzungsdatenID WHERE Protokollelement.Geloescht "
											 + "= false AND Sitzungsdaten.Geloescht = false AND KategorieID = ? AND StatusID = ?");
				pStmt.setInt(2, statusId);
			}
			pStmt.setInt(1, catID);
			ResultSet rst = pStmt.executeQuery();

			while (rst.next())
			{
				HashMap<String, String> fields = new HashMap<String, String>();
				tbz_id = rst.getInt("TBZuordnung_ID");
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				int todoId = rst.getInt("ToDoID");
				fields.put("Verantwortliche", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_responsible_personnel", "todoID", todoId)));
				fields.put("Beteiligte", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_involved_personnel", "todoID", todoId)));
				fields.put("SitzOrt", rst.getString("Ort"));
				java.util.Date md = rst.getDate("Datum");

				if (md != null)
				{
					fields.put("SitzDatum", sdf.format(md));
				}
				else
				{
					fields.put("SitzDatum", "kein");
				}

				fields.put("SitzName", rst.getString("Name"));
				topicData.add(fields);
			}

			rst.close();
			pStmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DB_ToDo_Connect.closeDB(con);
		return topicData;
	}

	public ArrayList loadAreaData(
			String area)
	{
		ArrayList<HashMap> areaData = new ArrayList<HashMap>();
		int arID = getAreaIDByName(area);
		int temp = -1;
		Vector topicTBZ = getTBZ_ListByAreaOrTopicID(arID, 2);

		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			Enumeration eTbz = topicTBZ.elements();
			while (eTbz.hasMoreElements())
			{
				temp = ((Integer) eTbz.nextElement()).intValue();
				if (temp != -1)
				{
					String sql = "SELECT * FROM Protokollelement WHERE "
								 + "TBZuordnung_ID=" + temp + " AND Geloescht = false ORDER BY ToDoID DESC";
					ResultSet rst = stmt.executeQuery(sql);

					while (rst.next())
					{
						HashMap<String, String> fields = new HashMap<String, String>();
						int meetingID = rst.getInt("SitzungsID");
						Meeting m = getMeetingDataByID(meetingID);
						fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
						fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(temp)));
						fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
						fields.put("Status", getStatByID(rst.getInt("StatusID")));
						fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(temp)));
						fields.put("Inhalt", rst.getString("Inhalt"));
						if (rst.getBoolean("WiedervorlageGesetzt"))
						{
							fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
						}
						else
						{
							fields.put("Wiedervorlagedatum", "kein");
						}

						int todoId = rst.getInt("ToDoID");
						fields.put("Verantwortliche", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_responsible_personnel", "todoID", todoId)));
						fields.put("Beteiligte", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_involved_personnel", "todoID", todoId)));
						fields.put("SitzOrt", m.getPlace());
						fields.put("SitzDatum", sdf.format(m.getDate()));
						fields.put("SitzName", m.getMeetingType());
						areaData.add(fields);
					}

					rst.close();
				}

			}
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return areaData;
	}

	public ArrayList loadMeetingDateData(Date dat)
	{
		ArrayList<HashMap> meetingDateData = new ArrayList<HashMap>();
		int tbz_id = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();
		try
		{
			PreparedStatement pStmt = con.prepareStatement("SELECT * FROM Protokollelement INNER JOIN "
														   + "Sitzungsdaten ON Protokollelement.SitzungsID = Sitzungsdaten.SitzungsdatenID "
														   + "WHERE Datum = ? AND Protokollelement.Geloescht = false AND "
														   + "Sitzungsdaten.Geloescht = false ORDER BY ToDoID DESC");
			pStmt.setDate(1, dat);
			ResultSet rst = pStmt.executeQuery();

			while (rst.next())
			{
				tbz_id = rst.getInt("TBZuordnung_ID");
				HashMap<String, String> fields = new HashMap<String, String>();
				Meeting m = getMeetingDataByID(rst.getInt("SitzungsID"));
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				int todoId = rst.getInt("ToDoID");
				fields.put("Verantwortliche", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_responsible_personnel", "todoID", todoId)));
				fields.put("Beteiligte", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_involved_personnel", "todoID", todoId)));
				fields.put("SitzOrt", m.getPlace());
				fields.put("SitzDatum", sdf.format(m.getDate()));
				fields.put("SitzName", m.getMeetingType());
				meetingDateData.add(fields);
			}

			rst.close();
			pStmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return meetingDateData;
	}

	public ArrayList loadMeetingTypeData(
			String type)
	{
		ArrayList<HashMap> meetingTypeData = new ArrayList<HashMap>();
		int tbz_id = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();
		try
		{
			PreparedStatement pStmt = con.prepareStatement("SELECT * FROM Sitzungsart INNER JOIN (Protokollelement INNER JOIN "
														   + "Sitzungsdaten ON Protokollelement.SitzungsID = Sitzungsdaten.SitzungsdatenID) "
														   + "ON Sitzungsart.SitzungsartID = Sitzungsdaten.SitzungsartID "
														   + "WHERE Sitzungsart.Name = ? AND Protokollelement.Geloescht = false AND Sitzungsdaten.Geloescht = "
														   + "false ORDER BY Protokollelement.ToDoID DESC");
			pStmt.setString(1, type);
			ResultSet rst = pStmt.executeQuery();

			while (rst.next())
			{
				HashMap<String, String> fields = new HashMap<String, String>();
				tbz_id = rst.getInt("TBZuordnung_ID");
				int sid = rst.getInt("SitzungsID");
				Meeting m = getMeetingDataByID(sid);
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				int todoId = rst.getInt("ToDoID");
				fields.put("Verantwortliche", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_responsible_personnel", "todoID", todoId)));
				fields.put("Beteiligte", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_involved_personnel", "todoID", todoId)));
				fields.put("SitzOrt", m.getPlace());
				fields.put("SitzDatum", sdf.format(m.getDate()));
				fields.put("SitzName", m.getMeetingType());
				meetingTypeData.add(fields);
			}

			rst.close();
			pStmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return meetingTypeData;
	}

	public ArrayList loadReDateData(Date date, int statusId)
	{
		ArrayList<HashMap> reDateData = new ArrayList<HashMap>();
		int tbz_id = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			PreparedStatement pStmt;
			if (statusId == -1)
			{
				pStmt = con.prepareStatement("SELECT * FROM Protokollelement WHERE "
											 + "Wiedervorlagedatum < ? AND Wiedervorlagedatum > ? AND WiedervorlageGesetzt = true AND Geloescht = false "
											 + "ORDER BY Wiedervorlagedatum DESC");
			}
			else
			{
				pStmt = con.prepareStatement("SELECT * FROM Protokollelement WHERE "
											 + "Wiedervorlagedatum < ? AND Wiedervorlagedatum > ? AND WiedervorlageGesetzt = true AND Geloescht = false "
											 + "AND StatusID = ? "
											 + "ORDER BY Wiedervorlagedatum DESC");
				pStmt.setInt(3, statusId);
			}
			pStmt.setDate(1, date);
			pStmt.setDate(2, new java.sql.Date(new java.util.Date().getTime()));
			ResultSet rst = pStmt.executeQuery();

			while (rst.next())
			{
				HashMap<String, String> fields = new HashMap<String, String>();
				Meeting m = getMeetingDataByID(rst.getInt("SitzungsID"));
				tbz_id = rst.getInt("TBZuordnung_ID");
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				int todoId = rst.getInt("ToDoID");
				fields.put("Verantwortliche", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_responsible_personnel", "todoID", todoId)));
				fields.put("Beteiligte", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_involved_personnel", "todoID", todoId)));
				fields.put("SitzOrt", m.getPlace());
				fields.put("SitzDatum", sdf.format(m.getDate()));
				fields.put("SitzName", m.getMeetingType());
				reDateData.add(fields);
			}

			rst.close();
			pStmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return reDateData;
	}

	public ArrayList loadCompleteOpListData()
	{
		ArrayList<HashMap> opData = new ArrayList<HashMap>();
		int tbz_id = -1;
		DB_ToDo_Connect.openDB();
		con =
		DB_ToDo_Connect.getCon();

		try
		{
			PreparedStatement pStmt = con.prepareStatement("SELECT * FROM Protokollelement "
														   + "INNER JOIN TBZ ON Protokollelement.TBZuordnung_ID=TBZ.TBZ_ID "
														   + "WHERE Protokollelement.StatusID = ? AND Geloescht = false "
														   + "ORDER BY Wiedervorlagedatum DESC");
			pStmt.setInt(1, getFinStatusIDByName(jComboBoxFinStatus.getSelectedItem().toString()));
			ResultSet rst = pStmt.executeQuery();

			while (rst.next())
			{
				HashMap<String, String> fields = new HashMap<String, String>();
				tbz_id = rst.getInt("TBZuordnung_ID");
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				fields.put("Typ", "");
				java.util.Date rd = rst.getDate("Wiedervorlagedatum");
				if (rd != null)
				{
					fields.put("Wiedervorlagedatum", sdf.format(rd));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				int todoId = rst.getInt("ToDoID");
				fields.put("Verantwortliche", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_responsible_personnel", "todoID", todoId)));
				fields.put("Beteiligte", getNameAndLastNameByID(getPersonnelIdsFromItemId("todo_involved_personnel", "todoID", todoId)));

				//fields.put("SitzOrt", rst.getString("Ort"));
                    /*md = rst.getDate("Datum");
				if(md != null) {
				fields.put("SitzDatum", sdf.format(md));
				} else {
				fields.put("SitzDatum", "kein");
				}
				fields.put("SitzName", getMeetingTypeByID(rst.getInt("SitzungsartID")));
				 */
				opData.add(fields);
			}

			rst.close();
			pStmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return opData;
	}

	private ArrayList<Integer> getPersonnelIdsFromItemId(String dbTable, String dbColumn, int searchId)
	{
		ArrayList<Integer> extractedIds = new ArrayList<Integer>();

		try
		{
			DB_ToDo_Connect.openDB();
			con = DB_ToDo_Connect.getCon();

			Statement stmt = con.createStatement();
			ResultSet resultSet = stmt.executeQuery("SELECT personnelID FROM " + dbTable + " WHERE " + dbColumn + " = " + searchId);

			while (resultSet.next())
			{
				extractedIds.add(resultSet.getInt("personnelID"));
			}

			DB_ToDo_Connect.closeDB(con);
		}
		catch (SQLException ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		return extractedIds;
	}

	public void getLatestMeeting()
	{
		// Lade Datum der zuletzt erstellten Sitzung aus Datenbank
		actMeeting.clear();
		jLabelMeetingDate.setText("-");
		jLabelMeetingType.setText("-");
		jLabelMeetingPlace.setText("-");
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsdaten WHERE Geloescht = false "
						 + "ORDER BY SitzungsdatenID DESC";
			ResultSet rst = stmt.executeQuery(sql);
			rst.next();

			actMeeting.setMeetingID(rst.getInt("SitzungsdatenID"));
			actMeeting.setDate(rst.getDate("Datum"));
			actMeeting.setMeetingTypeID(rst.getInt("SitzungsartID"));
			actMeeting.setPlace(rst.getString("Ort"));
			actMeeting.setProt(rst.getInt("Protokollant"));

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		if (actMeeting.getDate() != null)
		{
			jLabelMeetingDate.setText(sdf.format(actMeeting.getDate()));
		}

		if (actMeeting.getMeetingTypeID() != 0)
		{
			setMeetingType();
		}

		if (!actMeeting.getPlace().equals(""))
		{
			jLabelMeetingPlace.setText(actMeeting.getPlace());
		}

	}

	public void getChosenMeeting(int mID)
	{
		actMeeting.clear();
		jLabelMeetingDate.setText("-");
		jLabelMeetingType.setText("-");
		jLabelMeetingPlace.setText("-");
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsdaten WHERE SitzungsdatenID=" + mID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				actMeeting.setDate(rst.getDate("Datum"));
				actMeeting.setMeetingTypeID(rst.getInt("SitzungsartID"));
				actMeeting.setPlace(rst.getString("Ort"));
				actMeeting.setProt(rst.getInt("Protokollant"));
				actMeeting.setOtherParticipants(rst.getString("Sonstige"));
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		if (actMeeting.getDate() != null)
		{
			jLabelMeetingDate.setText(sdf.format(actMeeting.getDate()));
		}

		if (actMeeting.getMeetingTypeID() != 0)
		{
			setMeetingType();
		}

		if (!actMeeting.getPlace().equals(""))
		{
			jLabelMeetingPlace.setText(actMeeting.getPlace());
		}

	}

	public void setMeetingType()
	{
		//Lade Sitzungsart der zuletzt bearbeiteten Sitzung aus Datenbank
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT SitzungsartID, Name FROM Sitzungsart WHERE SitzungsartID="
						 + actMeeting.getMeetingTypeID();
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				actMeeting.setMeetingType(rst.getString("Name"));
				jLabelMeetingType.setText(actMeeting.getMeetingType());
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	public static void setActMeeting(int meetingID, String place, Date date, String meetingType)
	{
		actMeeting.setMeetingID(meetingID);
		actMeeting.setPlace(place);
		actMeeting.setDate(date);
		actMeeting.setMeetingType(meetingType);
	}

	public String getNameAndLastNameByID(ArrayList<Integer> ids)
	{
		StringBuffer participantsBuffer = new StringBuffer();
		DB_Mitarbeiter_Connect.openDB();
		con = DB_Mitarbeiter_Connect.getCon();

		// Vector mit einzelnen Mitarbeiter ID's einzeln auslesen und
		// Vorname_Nachname in Strinbuffer schreiben
		for (int id : ids)
		{
			try
			{
				Statement stmt = con.createStatement();
				String sql = "SELECT Nachname, Vorname FROM Stammdaten WHERE Personalnummer = " + id;
				ResultSet rst = stmt.executeQuery(sql);

				while (rst.next())
				{
					// String mit (Vorname Nachname) für jasperReports
					participantsBuffer.append(rst.getString("Vorname") + " " + rst.getString("Nachname") + ", ");
				}

				rst.close();
				stmt.close();
			}
			catch (Exception ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}

		}
		DB_ToDo_Connect.closeDB(con);
		String participantsString = participantsBuffer.length() > 0 ? participantsBuffer.substring(0, participantsBuffer.length() - 2).toString() : "";
		return participantsString;
	}

	/*
	 * HashMap fields füllen, einzelne HashMaps in ArrayList data aufnehemen
	 */
	public String getCatByID(
			int catID)
	{
		String name = "";
		DB_ToDo_Connect.openDB();
		con =
		DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie WHERE KategorieID=" + catID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return name;
	}

	public String getAreaByID(
			int areaID)
	{
		//wenn areaID = -1, wurde kein bereich angegeben, return "kein"
		if (areaID != -1)
		{
			String name = "";
			DB_ToDo_Connect.openDB();
			con =
			DB_ToDo_Connect.getCon();

			try
			{
				Statement stmt = con.createStatement();
				String sql = "SELECT * FROM Bereich WHERE BereichID=" + areaID;
				ResultSet rst = stmt.executeQuery(sql);

				while (rst.next())
				{
					name = rst.getString("Name");
				}

				rst.close();
				stmt.close();
			}
			catch (Exception ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}

			DB_ToDo_Connect.closeDB(con);
			return name;
		}
		else
		{
			return "kein";
		}

	}

	public int getAreaIDByTBZ_ID(int tbzID)
	{
		//wenn tbzID = -1, wurde keine TB-Zuordnung gewählt; return -1
		if (tbzID != -1)
		{
			int id = 0;
			DB_ToDo_Connect.openDB();
			con =
			DB_ToDo_Connect.getCon();

			try
			{
				Statement stmt = con.createStatement();
				String sql = "SELECT * FROM TBZ WHERE TBZ_ID=" + tbzID;
				ResultSet rst = stmt.executeQuery(sql);

				while (rst.next())
				{
					id = rst.getInt("BereichID");
				}

				rst.close();
				stmt.close();
			}
			catch (Exception ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}

			DB_ToDo_Connect.closeDB(con);
			return id;
		}
		else
		{
			return -1;
		}

	}

	public String getTopicByID(
			int topicID)
	{
		//wenn topicID = -1, wurde kein Thema angegeben, return "kein"
		if (topicID != -1)
		{
			String name = "";
			DB_ToDo_Connect.openDB();
			con =
			DB_ToDo_Connect.getCon();

			try
			{
				Statement stmt = con.createStatement();
				String sql = "SELECT * FROM Thema WHERE ThemaID=" + topicID;
				ResultSet rst = stmt.executeQuery(sql);

				while (rst.next())
				{
					name = rst.getString("Name");
				}

				rst.close();
				stmt.close();
			}
			catch (Exception ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}

			DB_ToDo_Connect.closeDB(con);
			return name;
		}
		else
		{
			return "kein";
		}

	}

	public int getTopicIDByTBZ_ID(int tbzID)
	{
		//wenn tbzID = -1, wurde keine TB-Zuordnung gewählt; return -1
		if (tbzID != -1)
		{
			int id = 0;
			DB_ToDo_Connect.openDB();
			con =
			DB_ToDo_Connect.getCon();

			try
			{
				Statement stmt = con.createStatement();
				String sql = "SELECT * FROM TBZ WHERE TBZ_ID=" + tbzID;
				ResultSet rst = stmt.executeQuery(sql);

				while (rst.next())
				{
					id = rst.getInt("ThemaID");
				}

				rst.close();
				stmt.close();
			}
			catch (Exception ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}

			DB_ToDo_Connect.closeDB(con);
			return id;
		}
		else
		{
			return -1;
		}

	}

	public String getInstByID(
			int instID)
	{
		String name = "";
		DB_ToDo_Connect.openDB();
		con =
		DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Institution WHERE InstitutionID=" + instID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return name;
	}

	public String getStatByID(
			int statID)
	{
		String name = "";
		DB_ToDo_Connect.openDB();
		con =
		DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status WHERE StatusID=" + statID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return name;
	}

	/*
	 * Ermittlet alle Mitarbeiter aus den Stammdaten der Mitarbeiter-DB
	 * und füllt damit den globalen Vector "employees" auf.
	 * Dessen Elemente werden im Auswahlfeld jComboBoxEmployee angezeigt
	 *
	 * DB Query - Mitarbeiter-DB, Tabelle "Stammdaten"
	 *
	 */
	public void getAllEmployees()
	{
		DB_Mitarbeiter_Connect.openDB();
		con = DB_Mitarbeiter_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Nachname, Vorname FROM Stammdaten ORDER BY Nachname";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String em = rst.getString("Nachname") + ", "
							+ rst.getString("Vorname");
				employees.add(em);
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	/*
	 * Ermittlet alle Themen aus den Stammdaten der Tabelle "Thema"
	 * und füllt damit den globalen Vector "topics" auf.
	 * Dessen Elemente werden im Auswahlfeld jComboBoxTopic angezeigt
	 *
	 * DB Query - todo-DB, Tabelle "Thema"
	 *
	 */
	public void getAllTopics()
	{
		DB_ToDo_Connect.openDB();
		con =
		DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Thema ORDER BY NAME";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String to = rst.getString("Name");
				topics.add(to);
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	/*
	 * Ermittlet alle Kategorien aus den Stammdaten der Tabelle "Kategorie"
	 * und füllt damit den globalen Vector "categories" auf.
	 * Dessen Elemente werden im Auswahlfeld jComboBoxCategory angezeigt
	 *
	 * DB Query - todo-DB, Tabelle "Kategorie"
	 *
	 */
	public void getAllCategories()
	{
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie ORDER BY NAME";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String ca = rst.getString("Name");
				categories.add(ca);
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	/*
	 * Ermittlet alle Bereiche aus den Stammdaten der Tabelle "Bereich"
	 * und füllt damit den globalen Vector "areas" auf.
	 * Dessen Elemente werden im Auswahlfeld jComboBoxArea angezeigt
	 *
	 * DB Query - todo-DB, Tabelle "Bereich"
	 *
	 */
	public void getAllAreas()
	{
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Name FROM Bereich ORDER BY NAME";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String ar = rst.getString("Name");
				areas.add(ar);
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	/*
	 * Ermittlet alle Sitzungsarten aus den Stammdaten der Tabelle "Sitzungsart"
	 * und füllt damit den globalen Vector "meetingTypes" auf.
	 * Dessen Elemente werden im Auswahlfeld jComboBoxMeetingType2 angezeigt
	 *
	 * DB Query - todo-DB, Tabelle "Sitzungsart"
	 *
	 */
	public void getAllMeetingTypes()
	{
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Name FROM Sitzungsart ORDER BY Name";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String mT = rst.getString("Name");
				meetingTypes.add(mT);
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	/*
	 * Ermittlet jedes Datum der Sitzungen aus der Tabelle "Sitzungsdaten"
	 * und füllt damit den globalen Vector "meetingDates" auf.
	 * Dessen Elemente werden im Auswahlfeld jComboBoxMeetingDate2 angezeigt
	 *
	 * DB Query - todo-DB, Tabelle "Sitzungsdaten"
	 *
	 */
	public void getAllMeetingDates()
	{
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT DISTINCT Datum FROM Sitzungsdaten ORDER BY Datum DESC";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{

				String date = sdf.format(rst.getDate("Datum"));
				meetingDates.add(date);
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	public int getEmployeeIDByName(String name)
	{
		int empID = -1;
		String fn = getFirstNameOfEmployee(name);
		String ln = getLastNameOfEmployee(name);
		DB_Mitarbeiter_Connect.openDB();
		con = DB_Mitarbeiter_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Nachname, Vorname, Personalnummer FROM Stammdaten "
						 + "WHERE Nachname LIKE '" + ln + "' AND Vorname LIKE '" + fn + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				empID = rst.getInt("Personalnummer");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return empID;
	}

	public Meeting getMeetingDataByID(int meetingID)
	{
		Meeting m = new Meeting();
		m.setMeetingID(meetingID);
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsdaten WHERE SitzungsdatenID = " + m.getMeetingID();
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				int tmp = rst.getInt("SitzungsartID");
				m.setMeetingType(getMeetingTypeByID(tmp));
				m.setPlace(rst.getString("Ort"));
				m.setDate(rst.getDate("Datum"));
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return m;
	}

	public String getMeetingTypeByID(
			int id)
	{
		String mType = "";
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsart WHERE SitzungsartID=" + id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				mType = rst.getString("Name");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return mType;
	}

	public String getFirstNameOfEmployee(
			String name)
	{
		String fn = "";
		if (name != null)
		{
			StringTokenizer tokenizer = new StringTokenizer(name, ", ");
			while (tokenizer.hasMoreTokens())
			{
				fn = tokenizer.nextToken();
			}

		}
		return fn;
	}

	public String getLastNameOfEmployee(
			String name)
	{
		String ln = "";
		if (name != null)
		{
			StringTokenizer tokenizer = new StringTokenizer(name, ", ");
			while (tokenizer.hasMoreTokens())
			{
				ln = tokenizer.nextToken();
				break;

			}


		}
		return ln;
	}

	public void setComboBoxEmployees()
	{
		jComboBoxEmployee.removeAllItems();
		Enumeration e = employees.elements();
		while (e.hasMoreElements())
		{
			String em = String.valueOf(e.nextElement());
			jComboBoxEmployee.addItem(em);
		}

	}

	public void setComboBoxCategory()
	{
		jComboBoxCategory.removeAllItems();
		Enumeration e = categories.elements();
		while (e.hasMoreElements())
		{
			String ca = String.valueOf(e.nextElement());
			jComboBoxCategory.addItem(ca);
		}

	}

	public void setComboMeetingType()
	{
		jComboMeetingType.removeAllItems();
		Enumeration e = meetingTypes.elements();
		while (e.hasMoreElements())
		{
			String ca = String.valueOf(e.nextElement());
			jComboMeetingType.addItem(ca);
		}
	}

	public void setComboBoxFinStatus()
	{
		jComboBoxFinStatus.removeAllItems();
		jComboBoxFinStatus.addItem("");
		jComboBoxFinStatus.addItem("Alle");
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				jComboBoxFinStatus.addItem(rst.getString("Name"));
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	public String getFinStatusByID(
			int statusID)
	{
		String statName = "";
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status WHERE StatusID=" + statusID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				statName = rst.getString("Name");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return statName;
	}

	public int getFinStatusIDByName(String statusName)
	{
		int statID = 0;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		if (statusName.equals("Alle"))
		{
			return -1;
		}

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status WHERE Name='" + statusName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				statID = rst.getInt("StatusID");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return statID;
	}

	public int getCategoryIDByName(String categoryName)
	{
		int catID = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie WHERE Name='" + categoryName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				catID = rst.getInt("KategorieID");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return catID;
	}

	public int getTopicIDByName(String topicName)
	{
		int topID = 0;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Thema WHERE Name='" + topicName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				topID = rst.getInt("ThemaID");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return topID;
	}

	public int getMeetingTypeIDByName(String meetingTypeName)
	{
		int meetingTypeId = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsart WHERE Name='" + meetingTypeName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				meetingTypeId = rst.getInt("SitzungsartID");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return meetingTypeId;
	}

	public int getAreaIDByName(String areaName)
	{
		int arID = 0;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Bereich WHERE Name='" + areaName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				arID = rst.getInt("BereichID");
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return arID;
	}

	/*
	 * ermittelt eine Liste aller TBZ_ID's bei denen ThemaID = topID(stat=1)
	 * oder BereichID = arID(stat2)
	 */
	public Vector getTBZ_ListByAreaOrTopicID(int id, int stat)
	{
		Vector tbz_list = new Vector();
		String s = "";
		if (stat == 1)
		{
			s = "ThemaID";
		}
		else
		{
			s = "BereichID";
		}

		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM TBZ WHERE " + s + "=" + id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				tbz_list.add(rst.getInt("TBZ_ID"));
			}

			rst.close();
			stmt.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return tbz_list;
	}

	public static boolean relationItemExists(Connection openConnection, String destinationTable, String destinationColumn, int destinationId, int personnelId)
	{
		try
		{
			Statement statement = openConnection.createStatement();
			ResultSet resultSet = statement.executeQuery("SELECT " + destinationColumn + " FROM " + destinationTable + " WHERE " + destinationColumn + " = " + destinationId + " AND personnelID = " + personnelId);

			//try to access item -> if this throws an exception it doesnt exist
			resultSet.next();
			resultSet.getInt("destinationColumn");

			resultSet.close();
			statement.close();

			return true;
		}
		catch (Exception ex)
		{
			//do nothing just return
			return false;
		}
	}

	public static void insertRelation(Connection openConnection, String destinationTable, String destinationColumn, int personnelId, int destinationId)
	{
		try
		{
			Statement statement = openConnection.createStatement();
			statement.execute("INSERT INTO " + destinationTable + " (personnelID, " + destinationColumn + ") VALUES (" + personnelId + ", " + destinationId + ")");
			statement.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
	}

	public static void removeRelation(Connection openConnection, String destinationTable, String destinationColumn, int personnelId, int destinationId)
	{
		try
		{
			Statement statement = openConnection.createStatement();
			statement.execute("DELETE FROM " + destinationTable + " WHERE " + destinationColumn + " = " + destinationId + " AND personnelID = " + personnelId);
			statement.close();
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
	}

	public static void updateRelations(Connection openConnection, String destinationTable, String destinationColumn, ArrayList<Integer> personnelIds, int destinationId)
	{
		try
		{
			Statement statement = openConnection.createStatement();
			ResultSet resultSet = statement.executeQuery("SELECT personnelID FROM " + destinationTable + " WHERE " + destinationColumn + " = " + destinationId);

			//get all existing relations
			ArrayList<Integer> existingPersonnelIds = new ArrayList<Integer>();
			while (resultSet.next())
			{
				existingPersonnelIds.add(resultSet.getInt("personnelID"));
			}

			resultSet.close();
			statement.close();

			//find new relations
			for (int currentRelation : personnelIds)
			{
				if (!existingPersonnelIds.contains(currentRelation))
				{
					insertRelation(openConnection, destinationTable, destinationColumn, currentRelation, destinationId);
				}
			}

			//find removed relations
			for (int currentRelation : existingPersonnelIds)
			{
				if (!personnelIds.contains(currentRelation))
				{
					removeRelation(openConnection, destinationTable, destinationColumn, currentRelation, destinationId);
				}
			}
		}
		catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
	}

	/*
	 * ermittelt den Wochentag anhand des Integerwerts von DAY_OF_WEEK
	 */
	public String getDayString(int weekDayID)
	{
		String dayString = "";
		switch (weekDayID)
		{
			case 1:
				dayString = "Sonntag";
				break;

			case 2:
				dayString = "Montag";
				break;

			case 3:
				dayString = "Dienstag";
				break;

			case 4:
				dayString = "Mittwoch";
				break;

			case 5:
				dayString = "Donnerstag";
				break;

			case 6:
				dayString = "Freitag";
				break;

			case 7:
				dayString = "Samstag";
				break;

			default:
				dayString = "";
				break;
		}

		return dayString;
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CategoryListOutput;
    private javax.swing.JMenu Programm;
    private javax.swing.JButton WvListOutput;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonCreateCategoryList;
    private javax.swing.JButton jButtonCreateListProtocol;
    private javax.swing.JButton jButtonCreatePersonalProtocol;
    private javax.swing.JButton jButtonCreatePersonalProtocolList;
    private javax.swing.JButton jButtonCreateProtocol;
    private javax.swing.JButton jButtonCreateReDateList;
    private javax.swing.JButton jButtonManageMeeting;
    private javax.swing.JButton jButtonManageTodo;
    private de.wannawork.jcalendar.JCalendarComboBox jCalendarComboBoxReDate;
    private de.wannawork.jcalendar.JCalendarComboBox jCalendarComboBoxReDate1;
    private javax.swing.JComboBox jComboBoxCategory;
    private javax.swing.JComboBox jComboBoxEmployee;
    private javax.swing.JComboBox jComboBoxFinStatus;
    private javax.swing.JComboBox jComboMeetingType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelAnalysis1;
    private javax.swing.JLabel jLabelCategory;
    private javax.swing.JLabel jLabelEmployee;
    private javax.swing.JLabel jLabelEmployee1;
    private javax.swing.JLabel jLabelEmployee2;
    private javax.swing.JLabel jLabelFinStatus;
    private javax.swing.JLabel jLabelMeetingDate;
    private javax.swing.JLabel jLabelMeetingPlace;
    private javax.swing.JLabel jLabelMeetingType;
    private javax.swing.JLabel jLabelOP_List;
    private javax.swing.JLabel jLabelOP_List1;
    private javax.swing.JLabel jLabelReDate;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEmloyer;
    private javax.swing.JMenuItem jMenuItemAnstellung;
    private javax.swing.JMenuItem jMenuItemArea;
    private javax.swing.JMenuItem jMenuItemCategory;
    private javax.swing.JMenuItem jMenuItemClose;
    private javax.swing.JMenuItem jMenuItemConditions;
    private javax.swing.JMenuItem jMenuItemEmloyerData;
    private javax.swing.JMenuItem jMenuItemFinishingStatus;
    private javax.swing.JMenuItem jMenuItemInstitution;
    private javax.swing.JMenuItem jMenuItemMeetingType;
    private javax.swing.JMenuItem jMenuItemNewElement;
    private javax.swing.JMenuItem jMenuItemNewMeeting;
    private javax.swing.JMenuItem jMenuItemTopic;
    private javax.swing.JMenu jMenuStammdaten;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jSearchTerm;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
