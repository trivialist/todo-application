/*
 * MainGUI.java
 *
 * Created on 22. November 2006, 10:35
 */
package todo.gui;

import java.io.File;
import java.io.FileInputStream;
import todo.subgui.MeetingSubGUI;
import todo.subgui.TodoSubGUI;
import todo.dialog.NoPersonalTodoDialog;
import todo.core.Todo;
import todo.core.Meeting;
import todo.dbcon.DB_ToDo_Connect;
import java.util.Calendar;
import javax.swing.*;
import java.sql.*;
import java.util.HashMap;
import java.util.Vector;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import java.text.ParseException;
import java.util.Enumeration;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import todo.dbcon.DB_Mitarbeiter_Connect;

/**
 *
 * @author  Marcus Hertel
 */
public class MainGUI extends javax.swing.JFrame
{

	private static Connection con;
	private static String winClassName = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
	private static Meeting actMeeting;
	private static MainGUI mainGUI;
	private Vector employees = new Vector();
	private Vector topics = new Vector();
	private Vector categories = new Vector();
	private Vector areas = new Vector();
	private Vector meetingTypes = new Vector();
	private Vector meetingDates = new Vector();
	private boolean noResponsData = false;
	private boolean noInvolvData = false;
	private SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
	private Calendar glCal = Calendar.getInstance();
	private boolean __BUTTON_CREATE_OP_LIST_VISIBLE = false;
	public static final Properties applicationProperties = new Properties();

	/** Creates new form MainGUI */
	public MainGUI()
	{
		initComponents();
		actMeeting = new Meeting();
		jButtonCreateOP_List.setVisible(__BUTTON_CREATE_OP_LIST_VISIBLE);
		jLabelError.setText("");
		if (actMeeting.getMeetingID() == 0)
		{
			getLatestMeeting();
		}
		employees.add("");
		employees.add("Alle Mitarbeiter");
		getAllEmployees();
		topics.add("");
		getAllTopics();
		categories.add("");
		getAllCategories();
		areas.add("");
		getAllAreas();
		meetingTypes.add("");
		getAllMeetingTypes();
		meetingDates.add("");
		getAllMeetingDates();
		setComboBoxEmployees();
		setComboBoxFinStatus();
		setComboBoxTopics();
		setComboBoxCategory();
		setComboBoxArea();
		setComboBoxMeetingType();
		setComboBoxMeetingDate();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelMeeting = new javax.swing.JLabel();
        jLabelMeetingDate = new javax.swing.JLabel();
        jLabelMeetingType = new javax.swing.JLabel();
        jLabelMeetingPlace = new javax.swing.JLabel();
        jButtonManageMeeting = new javax.swing.JButton();
        jButtonManageTodo = new javax.swing.JButton();
        jButtonCreateProtocol = new javax.swing.JButton();
        jButtonCreatePersonalProtocolList = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabelAnalysis1 = new javax.swing.JLabel();
        jComboBoxEmployee = new javax.swing.JComboBox();
        jComboBoxFinStatus = new javax.swing.JComboBox();
        jComboBoxTopic = new javax.swing.JComboBox();
        jComboBoxArea = new javax.swing.JComboBox();
        jComboBoxCategory = new javax.swing.JComboBox();
        jComboBoxMeetingType = new javax.swing.JComboBox();
        jCalendarComboBoxReDate = new de.wannawork.jcalendar.JCalendarComboBox();
        jComboBoxMeetingDate = new javax.swing.JComboBox();
        jButtonCreatePersonalProtocol = new javax.swing.JButton();
        jButtonCreateTopicList = new javax.swing.JButton();
        jButtonCreateAreaList = new javax.swing.JButton();
        jButtonCreateCategoryList = new javax.swing.JButton();
        jButtonCreateOP_List = new javax.swing.JButton();
        jButtonCreateMeetingTypeList = new javax.swing.JButton();
        jButtonCreateMeetingDateList = new javax.swing.JButton();
        jButtonCreateReDateList = new javax.swing.JButton();
        jButtonCreateListProtocol = new javax.swing.JButton();
        jLabelError = new javax.swing.JLabel();
        jLabelEmployee = new javax.swing.JLabel();
        jLabelFinStatus = new javax.swing.JLabel();
        jLabelCategory = new javax.swing.JLabel();
        jLabelTopic = new javax.swing.JLabel();
        jLabelArea = new javax.swing.JLabel();
        jLabelMeetingType2 = new javax.swing.JLabel();
        jLabelMeetingDate2 = new javax.swing.JLabel();
        jLabelReDate = new javax.swing.JLabel();
        jLabelOP_List = new javax.swing.JLabel();
        jLabelOP_List1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        Programm = new javax.swing.JMenu();
        jMenuItemNewMeeting = new javax.swing.JMenuItem();
        jMenuItemNewElement = new javax.swing.JMenuItem();
        jMenuItemClose = new javax.swing.JMenuItem();
        jMenuEmloyer = new javax.swing.JMenu();
        jMenuItemEmloyerData = new javax.swing.JMenuItem();
        jMenuItemConditions = new javax.swing.JMenuItem();
        jMenuItemAnstellung = new javax.swing.JMenuItem();
        jMenuStammdaten = new javax.swing.JMenu();
        jMenuItemMeetingType = new javax.swing.JMenuItem();
        jMenuItemFinishingStatus = new javax.swing.JMenuItem();
        jMenuItemCategory = new javax.swing.JMenuItem();
        jMenuItemInstitution = new javax.swing.JMenuItem();
        jMenuItemArea = new javax.swing.JMenuItem();
        jMenuItemTopic = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Protokolldatenbank - Konzept-e für Bildung und Soziales GmbH");
        setFont(new java.awt.Font("Tahoma", 0, 11));
        setMaximizedBounds(new java.awt.Rectangle(20, 20, 600, 800));
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jPanel1.setMaximumSize(new java.awt.Dimension(1024, 768));
        jPanel1.setMinimumSize(new java.awt.Dimension(600, 700));
        jPanel1.setPreferredSize(new java.awt.Dimension(600, 750));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelMeeting.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabelMeeting.setText("Aktuelle Sitzung:");
        jPanel1.add(jLabelMeeting, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 110, -1));

        jLabelMeetingDate.setBackground(new java.awt.Color(255, 255, 255));
        jLabelMeetingDate.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datum", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelMeetingDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 90, 30));

        jLabelMeetingType.setBackground(new java.awt.Color(255, 255, 255));
        jLabelMeetingType.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sitzungsart", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelMeetingType, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 320, 30));

        jLabelMeetingPlace.setBackground(new java.awt.Color(255, 255, 255));
        jLabelMeetingPlace.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ort", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelMeetingPlace, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 190, 30));

        jButtonManageMeeting.setText("Sitzungen bearbeiten");
        jButtonManageMeeting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonManageMeetingActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonManageMeeting, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, 160, -1));

        jButtonManageTodo.setText("Protokollelement");
        jButtonManageTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonManageTodoActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonManageTodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 110, 160, -1));

        jButtonCreateProtocol.setText("Protokoll erstellen");
        jButtonCreateProtocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateProtocolActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreateProtocol, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 150, 160, -1));

        jButtonCreatePersonalProtocolList.setText("Liste ToDo");
        jButtonCreatePersonalProtocolList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreatePersonalProtocolListActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreatePersonalProtocolList, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 250, 140, 20));

        jTextField2.setBackground(new java.awt.Color(0, 0, 0));
        jTextField2.setEditable(false);
        jTextField2.setText("jTextField1");
        jTextField2.setEnabled(false);
        jTextField2.setMinimumSize(new java.awt.Dimension(2, 20));
        jTextField2.setRequestFocusEnabled(false);
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 550, 5));

        jLabelAnalysis1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabelAnalysis1.setText("Auswertungen");
        jPanel1.add(jLabelAnalysis1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 110, -1));

        jPanel1.add(jComboBoxEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, 200, -1));

        jComboBoxFinStatus.setToolTipText("Bitte den Bearbeitungsstatus für die Auswerrtung auswählen");
        jComboBoxFinStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFinStatusActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBoxFinStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 270, 130, -1));

        jPanel1.add(jComboBoxTopic, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 400, 200, -1));

        jPanel1.add(jComboBoxArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 570, 200, -1));

        jPanel1.add(jComboBoxCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 200, -1));

        jPanel1.add(jComboBoxMeetingType, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 620, 200, -1));

        jCalendarComboBoxReDate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCalendarComboBoxReDateStateChanged(evt);
            }
        });
        jPanel1.add(jCalendarComboBoxReDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 450, 200, 20));

        jPanel1.add(jComboBoxMeetingDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 670, 200, -1));

        jButtonCreatePersonalProtocol.setText("Druck ToDo");
        jButtonCreatePersonalProtocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreatePersonalProtocolActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreatePersonalProtocol, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 280, 140, 20));

        jButtonCreateTopicList.setText("Druckvorschau");
        jButtonCreateTopicList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateTopicListActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreateTopicList, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 400, 140, -1));

        jButtonCreateAreaList.setText("Druckvorschau");
        jButtonCreateAreaList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateAreaListActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreateAreaList, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 570, 140, -1));

        jButtonCreateCategoryList.setText("Druckvorschau");
        jButtonCreateCategoryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateCategoryListActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreateCategoryList, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 350, 140, -1));

        jButtonCreateOP_List.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonCreateOP_List.setText("OP Liste - Druck");
        jButtonCreateOP_List.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateOP_ListActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreateOP_List, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 500, 140, -1));

        jButtonCreateMeetingTypeList.setText("Druckvorschau");
        jButtonCreateMeetingTypeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateMeetingTypeListActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreateMeetingTypeList, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 620, 140, -1));

        jButtonCreateMeetingDateList.setText("Druckvorschau");
        jButtonCreateMeetingDateList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateMeetingDateListActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreateMeetingDateList, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 670, 140, -1));

        jButtonCreateReDateList.setText("Druckvorschau");
        jButtonCreateReDateList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateReDateListActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreateReDateList, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 450, 140, -1));

        jButtonCreateListProtocol.setText("Protokoll (kurz)");
        jButtonCreateListProtocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateListProtocolActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCreateListProtocol, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 150, 160, -1));

        jLabelError.setForeground(new java.awt.Color(255, 0, 0));
        jPanel1.add(jLabelError, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 310, 40));

        jLabelEmployee.setBackground(new java.awt.Color(255, 255, 255));
        jLabelEmployee.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mitarbeiter", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 220, 50));

        jLabelFinStatus.setBackground(new java.awt.Color(255, 255, 255));
        jLabelFinStatus.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bearbeitungstatus", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelFinStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 250, 150, 50));

        jLabelCategory.setBackground(new java.awt.Color(255, 255, 255));
        jLabelCategory.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Kategorie", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 530, 50));

        jLabelTopic.setBackground(new java.awt.Color(255, 255, 255));
        jLabelTopic.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thema", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelTopic, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, 530, 50));

        jLabelArea.setBackground(new java.awt.Color(255, 255, 255));
        jLabelArea.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bereich", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 550, 530, 50));

        jLabelMeetingType2.setBackground(new java.awt.Color(255, 255, 255));
        jLabelMeetingType2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sitzungsart", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelMeetingType2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 600, 530, 50));

        jLabelMeetingDate2.setBackground(new java.awt.Color(255, 255, 255));
        jLabelMeetingDate2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sitzungsdatum", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelMeetingDate2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 650, 530, 50));

        jLabelReDate.setBackground(new java.awt.Color(255, 255, 255));
        jLabelReDate.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Wiedervorlagedatum", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 9))); // NOI18N
        jPanel1.add(jLabelReDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, 530, 50));

        jLabelOP_List.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OP-Liste", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 9))); // NOI18N
        jPanel1.add(jLabelOP_List, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 550, 80));

        jLabelOP_List1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Auswertungen nach Kategorie", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 9))); // NOI18N
        jPanel1.add(jLabelOP_List1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 550, 180));

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        Programm.setText("Programm");

        jMenuItemNewMeeting.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemNewMeeting.setText("Neue Sitzung");
        jMenuItemNewMeeting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewMeetingActionPerformed(evt);
            }
        });
        Programm.add(jMenuItemNewMeeting);

        jMenuItemNewElement.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemNewElement.setText("Neues Protokollelement");
        jMenuItemNewElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewElementActionPerformed(evt);
            }
        });
        Programm.add(jMenuItemNewElement);

        jMenuItemClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemClose.setText("Beenden");
        jMenuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCloseActionPerformed(evt);
            }
        });
        Programm.add(jMenuItemClose);

        jMenuBar1.add(Programm);

        jMenuEmloyer.setText("Mitarbeiter");
        jMenuEmloyer.setEnabled(false);

        jMenuItemEmloyerData.setText("Persönliche Daten");
        jMenuEmloyer.add(jMenuItemEmloyerData);

        jMenuItemConditions.setText("Kondition");
        jMenuEmloyer.add(jMenuItemConditions);

        jMenuItemAnstellung.setText("Anstellung");
        jMenuEmloyer.add(jMenuItemAnstellung);

        jMenuBar1.add(jMenuEmloyer);

        jMenuStammdaten.setText("Stammdaten");

        jMenuItemMeetingType.setText("Sitzungsart");
        jMenuItemMeetingType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMeetingTypeActionPerformed(evt);
            }
        });
        jMenuStammdaten.add(jMenuItemMeetingType);

        jMenuItemFinishingStatus.setText("Bearbeitungsstatus");
        jMenuItemFinishingStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFinishingStatusActionPerformed(evt);
            }
        });
        jMenuStammdaten.add(jMenuItemFinishingStatus);

        jMenuItemCategory.setText("Kategorie");
        jMenuItemCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCategoryActionPerformed(evt);
            }
        });
        jMenuStammdaten.add(jMenuItemCategory);

        jMenuItemInstitution.setText("Institution");
        jMenuItemInstitution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemInstitutionActionPerformed(evt);
            }
        });
        jMenuStammdaten.add(jMenuItemInstitution);

        jMenuItemArea.setText("Bereich");
        jMenuItemArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAreaActionPerformed(evt);
            }
        });
        jMenuStammdaten.add(jMenuItemArea);

        jMenuItemTopic.setText("Thema");
        jMenuItemTopic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTopicActionPerformed(evt);
            }
        });
        jMenuStammdaten.add(jMenuItemTopic);

        jMenuBar1.add(jMenuStammdaten);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCreateTopicListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateTopicListActionPerformed
		if (jComboBoxTopic.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
					"Sie haben kein Thema ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "Themenliste.jrxml";
			Calendar cal = Calendar.getInstance();

			HashMap<String, Object> params = new HashMap<String, Object>();
			String actDate = getDayString(cal.get(Calendar.DAY_OF_WEEK)) + ", " + cal.get(Calendar.DAY_OF_MONTH) + "." + (cal.get(Calendar.MONTH) + 1) + "." + cal.get(Calendar.YEAR);
			params.put("Datum", actDate);
			params.put("Thema", jComboBoxTopic.getSelectedItem().toString());
			params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");

			/*
			 * Laden aller mit dem ausgewählten Thema verknüpften Protokollelemente
			 * in die HashMap tl
			 */

			ArrayList<HashMap> tl = loadTopicData(jComboBoxTopic.getSelectedItem().toString());
			JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(tl);

			if (!tl.isEmpty())
			{
				try
				{
					JasperReport jasperReport =
							JasperCompileManager.compileReport(reportSource);

					JasperPrint jasperPrint =
							JasperFillManager.fillReport(jasperReport, params, dataSet);

					JasperViewer.viewReport(jasperPrint, false);
				} catch (JRException ex)
				{
					Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
			else
			{
				NoPersonalTodoDialog nPTD = new NoPersonalTodoDialog(mainGUI, true,
						jComboBoxTopic.getSelectedItem().toString());
				nPTD.setVisible(true);
			}
		}
}//GEN-LAST:event_jButtonCreateTopicListActionPerformed

    private void jButtonCreateProtocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateProtocolActionPerformed
		String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "Protokoll.jrxml";
		//String reportDest = "H:\\ToDo\\report\\results\\Protokoll_"
		//                       + actMeeting.getDate() + "_"
		//                    + actMeeting.getMeetingType() + ".html";
		//String pdfDest = "R:\\Protokoll_" + actMeeting.getDate()
		//                + "_" + actMeeting.getMeetingType() + ".pdf";
		Vector prot = new Vector();
		prot.add(actMeeting.getProt());

		//erzeuge Tagesordnung
		StringBuilder agenda = new StringBuilder();

		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();
		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Überschrift FROM Protokollelement WHERE Geloescht = false AND " +
					"SitzungsID = " + actMeeting.getMeetingID() + " ORDER BY ToDoID ASC";

			ResultSet rst = stmt.executeQuery(sql);

			int counter = 1;
			while (rst.next())
			{
				agenda.append("TOP " + counter + " " + rst.getString("Überschrift") + "\n");
				counter++;
			}

			rst.close();
			stmt.close();

		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}
		DB_ToDo_Connect.closeDB(con);

		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("SitzName", actMeeting.getMeetingType());
		params.put("Datum", sdf.format(actMeeting.getDate()));
		params.put("Ort", actMeeting.getPlace());
		params.put("Protokollant", getNameAndLastNameByID(prot));
		params.put("Teilnehmer", getNameAndLastNameByID(getIdsFromIdString(actMeeting.getPartic())));
		params.put("Sonstige", actMeeting.getOtherPaticipants());
		params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");
		params.put("Tagesordnung", agenda.toString());
		ArrayList<HashMap> td = loadTodoData();

		JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(td);

		/*if(data.isEmpty()) {
		HashMap<String,String> fields= new HashMap<String,String>();
		fields.put("Kategorie", "! FEHLER !");
		fields.put("Inhalt", "!!! Für diese Sitzung wurden noch keine Daten eingegeben !!!");
		fields.put("Verantwortliche", "Aktueller Benutzer");
		data.add(fields);

		}
		 */
		try
		{
			JasperReport jasperReport =
					JasperCompileManager.compileReport(reportSource);

			JasperPrint jasperPrint =
					JasperFillManager.fillReport(jasperReport, params, dataSet);

			//++++++++++++++ HTML-Export  +++++++++++++++
			//JasperExportManager.exportReportToHtmlFile(
			//jasperPrint, reportDest);

			//++++++++++++++  PDF-Export  ++++++++++++++++
			//JasperExportManager.exportReportToPdfFile(jasperPrint, pdfDest);

			JasperViewer.viewReport(jasperPrint, false);
		} catch (JRException ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_jButtonCreateProtocolActionPerformed

    private void jMenuItemAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAreaActionPerformed
		//AreaGUI öffnen um alle Bereiche anzuzeigen und zu bearbeiten
		AreaGUI area = new AreaGUI();
		area.setVisible(true);
    }//GEN-LAST:event_jMenuItemAreaActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
		if (actMeeting.getMeetingID() == 0)
		{
			getLatestMeeting();
		}
		else
		{
			jLabelMeetingDate.setText(sdf.format(actMeeting.getDate()));
			jLabelMeetingPlace.setText(actMeeting.getPlace());
			jLabelMeetingType.setText(actMeeting.getMeetingType());
			// Daten der gewählten Sitzung(Objekt Meeting) aktualisieren
			getChosenMeeting(actMeeting.getMeetingID());
		}
    }//GEN-LAST:event_formWindowGainedFocus

    private void jButtonManageTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonManageTodoActionPerformed
		//TodoGUI öffnen um alle Protokollelemente anzuzeigen und zu bearbeiten
		if (actMeeting.getMeetingTypeID() != 0)
		{
			TodoGUI todo = new TodoGUI(actMeeting.getMeetingID());
			todo.setVisible(true);
		}
		else
		{
			jLabelError.setText("Bitte Sitzung wählen");
		}
    }//GEN-LAST:event_jButtonManageTodoActionPerformed

    private void jButtonManageMeetingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonManageMeetingActionPerformed
		//MeetingGUI öffnen um alle Sitzungen anzuzeigen und zu bearbeiten
		MeetingGUI meet = new MeetingGUI();
		meet.setVisible(true);
    }//GEN-LAST:event_jButtonManageMeetingActionPerformed

    private void jMenuItemCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCategoryActionPerformed
		//CategoryGUI öffnen um alle Kategorien anzuzeigen und zu bearbeiten
		CategoryGUI cat = new CategoryGUI();
		cat.setVisible(true);
    }//GEN-LAST:event_jMenuItemCategoryActionPerformed

    private void jMenuItemInstitutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemInstitutionActionPerformed
		//InstitutionGUI öffnen um alle Stati anzuzeigen und zu bearbeiten
		InstitutionGUI inst = new InstitutionGUI();
		inst.setVisible(true);
    }//GEN-LAST:event_jMenuItemInstitutionActionPerformed

    private void jMenuItemFinishingStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFinishingStatusActionPerformed
		//FinStatusGUI öffnen um alle Stati anzuzeigen und zu bearbeiten
		FinStatusGUI fs = new FinStatusGUI();
		fs.setVisible(true);
    }//GEN-LAST:event_jMenuItemFinishingStatusActionPerformed

    private void jMenuItemMeetingTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMeetingTypeActionPerformed
		//MeetingTypeGUI öffnen um alle Sitzungsarten anzuzeigen und zu bearbeiten
		MeetingTypeGUI mt = new MeetingTypeGUI();
		mt.setVisible(true);
    }//GEN-LAST:event_jMenuItemMeetingTypeActionPerformed

    private void jMenuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCloseActionPerformed
		System.exit(0);
    }//GEN-LAST:event_jMenuItemCloseActionPerformed

    private void jMenuItemTopicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTopicActionPerformed
		//TopicGUI öffnen um alle Themen anzuzeigen und zu bearbeiten
		TopicGUI topic = new TopicGUI();
		topic.setVisible(true);
    }//GEN-LAST:event_jMenuItemTopicActionPerformed

    private void jButtonCreatePersonalProtocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreatePersonalProtocolActionPerformed
		int empID = 0;
		if (jComboBoxEmployee.getSelectedItem().toString().equals("Alle Mitarbeiter"))
		{
			//JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
			//        "Die Auswahl 'Alle Mitarbeiter' ist für diesen Report unzulässig.", "Fehler", JOptionPane.ERROR_MESSAGE);
			empID = -1;
		} //else {
		if (jComboBoxEmployee.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
					"Sie haben keinen Mitarbeiter ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			if (jComboBoxFinStatus.getSelectedItem().toString().equals(""))
			{
				JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
						"Sie haben keinen Status ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
			}
			else
			{
				ArrayList<HashMap> ptd;
				String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "PersönlicheTodos.jrxml";
				Calendar cal = Calendar.getInstance();
				noResponsData = true;
				noInvolvData = true;

				HashMap<String, Object> params = new HashMap<String, Object>();
				String actDate = getDayString(cal.get(Calendar.DAY_OF_WEEK)) + ", " + cal.get(Calendar.DAY_OF_MONTH) + "." + (cal.get(Calendar.MONTH) + 1) + "." + cal.get(Calendar.YEAR);
				params.put("Datum", actDate);
				params.put("Mitarbeiter", jComboBoxEmployee.getSelectedItem().toString());
				params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");
				params.put("IMAGE2", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\wichtig.jpg");
				params.put("IMAGE3", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\info.jpg");
				/*
				 * Laden aller mit dem ausgewählten Benutzer verknüpften Protokollelemente
				 * in die HashMap ptd unter Berücksichtigung des Bearbeitungsstatus
				 * zuerst Verantwortlich-, danach Beteiligt-Protokollelemente
				 */

				if (empID == -1)
				{
					ptd = loadCompleteOpListData();
					noResponsData = false;
					noInvolvData = false;
				}
				else
				{
					ptd = loadPersonalTodoData(jComboBoxFinStatus.getSelectedItem().toString());
				}

				if (!noResponsData && !noInvolvData)
				{
					JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(ptd);

					/*if(data.isEmpty()) {
					HashMap<String,String> fields= new HashMap<String,String>();
					fields.put("Kategorie", "! FEHLER !");
					fields.put("Inhalt", "!!! Für diese Sitzung wurden noch keine Daten eingegeben !!!");
					fields.put("Verantwortliche", "Aktueller Benutzer");
					data.add(fields);

					}
					 */
					try
					{
						JasperReport jasperReport =
								JasperCompileManager.compileReport(reportSource);

						JasperPrint jasperPrint =
								JasperFillManager.fillReport(jasperReport, params, dataSet);

						JasperViewer.viewReport(jasperPrint, false);
					} catch (JRException ex)
					{
						Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
					}
				}
				else
				{
					NoPersonalTodoDialog nPTD = new NoPersonalTodoDialog(mainGUI, true,
							jComboBoxEmployee.getSelectedItem().toString());
					nPTD.setVisible(true);
				}
			}
		}
		//}

}//GEN-LAST:event_jButtonCreatePersonalProtocolActionPerformed

    private void jButtonCreateCategoryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateCategoryListActionPerformed
		if (jComboBoxCategory.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
					"Sie haben keine Kategorie ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "Kategorienliste.jrxml";
			Calendar cal = Calendar.getInstance();

			HashMap<String, Object> params = new HashMap<String, Object>();
			String actDate = getDayString(cal.get(Calendar.DAY_OF_WEEK)) + ", " + cal.get(Calendar.DAY_OF_MONTH) + "." + (cal.get(Calendar.MONTH) + 1) + "." + cal.get(Calendar.YEAR);
			params.put("Datum", actDate);
			params.put("Kategorie", jComboBoxCategory.getSelectedItem().toString());
			params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");
			/*
			 * Laden aller mit dem ausgewählten Thema verknüpften Protokollelemente
			 * in die HashMap cl
			 */
			ArrayList<HashMap> cl = loadCategoryData(jComboBoxCategory.getSelectedItem().toString());
			JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(cl);

			if (!cl.isEmpty())
			{
				try
				{
					JasperReport jasperReport =
							JasperCompileManager.compileReport(reportSource);

					JasperPrint jasperPrint =
							JasperFillManager.fillReport(jasperReport, params, dataSet);

					JasperViewer.viewReport(jasperPrint, false);
				} catch (JRException ex)
				{
					Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
			else
			{
				NoPersonalTodoDialog nPTD = new NoPersonalTodoDialog(mainGUI, true,
						jComboBoxCategory.getSelectedItem().toString());
				nPTD.setVisible(true);
			}
		}
}//GEN-LAST:event_jButtonCreateCategoryListActionPerformed

    private void jButtonCreateAreaListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateAreaListActionPerformed
		if (jComboBoxArea.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
					"Sie haben keinen Bereich ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "Bereicheliste.jrxml";
			Calendar cal = Calendar.getInstance();

			HashMap<String, Object> params = new HashMap<String, Object>();
			String actDate = getDayString(cal.get(Calendar.DAY_OF_WEEK)) + ", " + cal.get(Calendar.DAY_OF_MONTH) + "." + (cal.get(Calendar.MONTH) + 1) + "." + cal.get(Calendar.YEAR);
			params.put("Datum", actDate);
			params.put("Bereich", jComboBoxArea.getSelectedItem().toString());
			params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");
			/*
			 * Laden aller mit dem ausgewählten Thema verknüpften Protokollelemente
			 * in die HashMap al
			 */
			ArrayList<HashMap> al = loadAreaData(jComboBoxArea.getSelectedItem().toString());
			JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(al);

			if (!al.isEmpty())
			{
				try
				{
					JasperReport jasperReport =
							JasperCompileManager.compileReport(reportSource);

					JasperPrint jasperPrint =
							JasperFillManager.fillReport(jasperReport, params, dataSet);

					JasperViewer.viewReport(jasperPrint, false);
				} catch (JRException ex)
				{
					Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
			else
			{
				NoPersonalTodoDialog nPTD = new NoPersonalTodoDialog(mainGUI, true,
						jComboBoxArea.getSelectedItem().toString());
				nPTD.setVisible(true);
			}
		}
    }//GEN-LAST:event_jButtonCreateAreaListActionPerformed

    private void jButtonCreateReDateListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateReDateListActionPerformed
		String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "WV_Liste.jrxml";
		Calendar cal = Calendar.getInstance();
		Todo td = new Todo();

		HashMap<String, Object> params = new HashMap<String, Object>();

		params.put("Datum", sdf.format(cal.getTime()));
		params.put("Wiedervorlagedatum", sdf.format(jCalendarComboBoxReDate.getCalendar().getTime()));
		params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");
		/*
		 * Laden aller mit dem ausgewählten Datum verknüpften Protokollelemente
		 * in die HashMap rdl
		 */
		td.setReDate(jCalendarComboBoxReDate.getCalendar().getTime());
		java.sql.Date date = new Date(td.getReDate().getTime());
		ArrayList<HashMap> rdl = loadReDateData(date);
		JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(rdl);

		if (!rdl.isEmpty())
		{
			try
			{
				JasperReport jasperReport =
						JasperCompileManager.compileReport(reportSource);

				JasperPrint jasperPrint =
						JasperFillManager.fillReport(jasperReport, params, dataSet);

				JasperViewer.viewReport(jasperPrint, false);
			} catch (JRException ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
		else
		{
			NoPersonalTodoDialog nPTD = new NoPersonalTodoDialog(mainGUI, true,
					jComboBoxArea.getSelectedItem().toString());
			nPTD.setVisible(true);
		}
    }//GEN-LAST:event_jButtonCreateReDateListActionPerformed

    private void jButtonCreateMeetingDateListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateMeetingDateListActionPerformed
		if (jComboBoxMeetingDate.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
					"Sie haben kein Sitzungsdatum ausgewählt.", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "Sitzungsdatumliste.jrxml";
			Calendar cal = Calendar.getInstance();

			HashMap<String, Object> params = new HashMap<String, Object>();
			String actDate = getDayString(cal.get(Calendar.DAY_OF_WEEK)) + ", " + cal.get(Calendar.DAY_OF_MONTH) + "." + (cal.get(Calendar.MONTH) + 1) + "." + cal.get(Calendar.YEAR);
			params.put("Datum", actDate);
			params.put("Sitzungsdatum", jComboBoxMeetingDate.getSelectedItem().toString());
			params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");
			/*
			 * Laden aller mit dem ausgewählten Datum verknüpften Protokollelemente
			 * in die HashMap rdl
			 */
			java.util.Date temp = new java.util.Date();
			try
			{
				temp = sdf.parse(jComboBoxMeetingDate.getSelectedItem().toString());
			} catch (ParseException ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			}
			java.sql.Date d = new java.sql.Date(temp.getTime());
			ArrayList<HashMap> mdl = loadMeetingDateData(d);
			JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(mdl);

			if (!mdl.isEmpty())
			{
				try
				{
					JasperReport jasperReport =
							JasperCompileManager.compileReport(reportSource);

					JasperPrint jasperPrint =
							JasperFillManager.fillReport(jasperReport, params, dataSet);

					JasperViewer.viewReport(jasperPrint, false);
				} catch (JRException ex)
				{
					Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
			else
			{
				NoPersonalTodoDialog nPTD = new NoPersonalTodoDialog(mainGUI, true,
						jComboBoxArea.getSelectedItem().toString());
				nPTD.setVisible(true);
			}
		}
    }//GEN-LAST:event_jButtonCreateMeetingDateListActionPerformed

    private void jButtonCreateMeetingTypeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateMeetingTypeListActionPerformed
		if (jComboBoxMeetingType.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
					"Sie haben keine Sitzungsart ausgewählt.", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "Sitzungsartliste.jrxml";
			Calendar cal = Calendar.getInstance();

			HashMap<String, Object> params = new HashMap<String, Object>();
			String actDate = getDayString(cal.get(Calendar.DAY_OF_WEEK)) + ", " + cal.get(Calendar.DAY_OF_MONTH) + "." + (cal.get(Calendar.MONTH) + 1) + "." + cal.get(Calendar.YEAR);
			params.put("Datum", actDate);
			params.put("Sitzungsart", jComboBoxMeetingType.getSelectedItem().toString());
			params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");
			/*
			 * Laden aller mit dem ausgewählten Datum verknüpften Protokollelemente
			 * in die HashMap rdl
			 */

			ArrayList<HashMap> mtl = loadMeetingTypeData(jComboBoxMeetingType.getSelectedItem().toString());
			JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(mtl);

			if (!mtl.isEmpty())
			{
				try
				{
					JasperReport jasperReport =
							JasperCompileManager.compileReport(reportSource);

					JasperPrint jasperPrint =
							JasperFillManager.fillReport(jasperReport, params, dataSet);

					JasperViewer.viewReport(jasperPrint, false);
				} catch (JRException ex)
				{
					Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
			else
			{
				NoPersonalTodoDialog nPTD = new NoPersonalTodoDialog(mainGUI, true,
						jComboBoxArea.getSelectedItem().toString());
				nPTD.setVisible(true);
			}
		}
    }//GEN-LAST:event_jButtonCreateMeetingTypeListActionPerformed

    private void jButtonCreateOP_ListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateOP_ListActionPerformed
		// Auswahl für THEMA darf nicht leer sein
		if (jComboBoxTopic.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
					"Sie haben kein ! Thema ! ausgewählt. Für diesen Report müssen Sie " +
					"Thema, Bereich, Kategorie und Wiedervorlagedatum angeben. " +
					"Außerdem müssen Sie einen oder \"Alle Mitarbeiter \" auswählen", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			// Auswahl für BEREICH darf nicht leer sein
			if (jComboBoxArea.getSelectedItem().toString().equals(""))
			{
				JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
						"Sie haben keinen ! Bereich ! ausgewählt. Für diesen Report müssen Sie " +
						"Thema, Bereich, Kategorie und Wiedervorlagedatum angeben. " +
						"Außerdem müssen Sie einen oder \"Alle Mitarbeiter \" auswählen", "Fehler", JOptionPane.ERROR_MESSAGE);
			}
			else
			{
				// Auswahl für KATEGORIE darf nicht leer sein
				if (jComboBoxCategory.getSelectedItem().toString().equals(""))
				{
					JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
							"Sie haben keine ! Kategorie ! ausgewählt. Für diesen Report müssen Sie " +
							"Thema, Bereich, Kategorie und Wiedervorlagedatum angeben. " +
							"Außerdem müssen Sie einen oder \"Alle Mitarbeiter \" auswählen", "Fehler", JOptionPane.ERROR_MESSAGE);
				}
				else
				{
					String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "OP_Liste.jrxml";
					Calendar cal = Calendar.getInstance();

					HashMap<String, Object> params = new HashMap<String, Object>();

					params.put("Datum", sdf.format(cal.getTime()));
					params.put("Thema", jComboBoxTopic.getSelectedItem().toString());
					params.put("Bereich", jComboBoxArea.getSelectedItem().toString());
					params.put("Kategorie", jComboBoxCategory.getSelectedItem().toString());
					params.put("IMAGE", applicationProperties.getProperty("JasperReportsTemplatePath") + "img\\logo_konzepte.gif");
					/*
					 * Laden aller mit dem ausgewählten Parametern verknüpften Protokollelemente
					 * in die HashMap opl
					 */

					ArrayList<HashMap> opl = loadOpListData();
					JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(opl);

					if (!opl.isEmpty())
					{
						try
						{
							JasperReport jasperReport =
									JasperCompileManager.compileReport(reportSource);

							JasperPrint jasperPrint =
									JasperFillManager.fillReport(jasperReport, params, dataSet);

							JasperViewer.viewReport(jasperPrint, false);
						} catch (JRException ex)
						{
							Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
						}
					}
				}
			}
		}
    }//GEN-LAST:event_jButtonCreateOP_ListActionPerformed

    private void jMenuItemNewMeetingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewMeetingActionPerformed
		String meetingType = "";
		String date = "";
		int meetingID = 0;
		String otherPart = "";
		MeetingSubGUI newMeet = new MeetingSubGUI(0, meetingID, meetingType, date, otherPart);
		newMeet.setVisible(true);
    }//GEN-LAST:event_jMenuItemNewMeetingActionPerformed

    private void jMenuItemNewElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewElementActionPerformed
		//TodoGUI öffnen um alle Protokollelemente anzuzeigen und zu bearbeiten
		if (actMeeting.getMeetingTypeID() != 0)
		{
			TodoGUI todo = new TodoGUI(actMeeting.getMeetingID());
			todo.setVisible(true);
		}
		else
		{
			jLabelError.setText("Bitte Sitzung wählen");
		}
		TodoSubGUI newTodo = new TodoSubGUI(0, actMeeting.getMeetingID(), "", "", 0, true);
		newTodo.setVisible(true);
    }//GEN-LAST:event_jMenuItemNewElementActionPerformed

    private void jCalendarComboBoxReDateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCalendarComboBoxReDateStateChanged
		if (evt.getSource() == jCalendarComboBoxReDate)
		{
			glCal.set(jCalendarComboBoxReDate.getCalendar().get(glCal.YEAR),
					jCalendarComboBoxReDate.getCalendar().get(glCal.MONTH) + 1,
					jCalendarComboBoxReDate.getCalendar().get(glCal.DAY_OF_MONTH));
		}
}//GEN-LAST:event_jCalendarComboBoxReDateStateChanged

    private void jButtonCreatePersonalProtocolListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreatePersonalProtocolListActionPerformed
		int empID = 0;
		if (jComboBoxEmployee.getSelectedItem().toString().equals("Alle Mitarbeiter"))
		{
			//JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
			//        "Die Auswahl 'Alle Mitarbeiter' ist für diesen Report unzulässig.", "Fehler", JOptionPane.ERROR_MESSAGE);
			empID = -1;
		} /*else {*/
		if (jComboBoxEmployee.getSelectedItem().toString().equals(""))
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
					"Sie haben keinen Mitarbeiter ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			if (jComboBoxFinStatus.getSelectedItem().toString().equals(""))
			{
				JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
						"Sie haben keinen Status ausgewählt", "Fehler", JOptionPane.ERROR_MESSAGE);
			}
			else
			{
				int statID = getFinStatusIDByName(jComboBoxFinStatus.getSelectedItem().toString());
				empID = getEmployeeIDByName(jComboBoxEmployee.getSelectedItem().toString());
				PersonalTodoListGUI newPTDL = new PersonalTodoListGUI(empID, statID);
				newPTDL.setVisible(true);
			}
		}
		// }
    }//GEN-LAST:event_jButtonCreatePersonalProtocolListActionPerformed

    private void jButtonCreateListProtocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateListProtocolActionPerformed
		String reportSource = applicationProperties.getProperty("JasperReportsTemplatePath") + "ProtokollKurz.jrxml";
		//String reportDest = "H:\\ToDo\\report\\results\\Protokoll_"
		//                       + actMeeting.getDate() + "_"
		//                    + actMeeting.getMeetingType() + ".html";
		//String pdfDest = "R:\\Protokoll_" + actMeeting.getDate()
		//                + "_" + actMeeting.getMeetingType() + ".pdf";

		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("SitzDatum", sdf.format(actMeeting.getDate()));
		params.put("SitzName", actMeeting.getMeetingType());
		params.put("SitzOrt", actMeeting.getPlace());
		ArrayList<HashMap> std = loadShortTodoData();

		JRMapCollectionDataSource dataSet = new JRMapCollectionDataSource(std);

		/*if(data.isEmpty()) {
		HashMap<String,String> fields= new HashMap<String,String>();
		fields.put("Kategorie", "! FEHLER !");
		fields.put("Inhalt", "!!! Für diese Sitzung wurden noch keine Daten eingegeben !!!");
		fields.put("Verantwortliche", "Aktueller Benutzer");
		data.add(fields);

		}
		 */
		try
		{
			JasperReport jasperReport =
					JasperCompileManager.compileReport(reportSource);

			JasperPrint jasperPrint =
					JasperFillManager.fillReport(jasperReport, params, dataSet);

			//++++++++++++++ HTML-Export  +++++++++++++++
			//JasperExportManager.exportReportToHtmlFile(
			//jasperPrint, reportDest);

			//++++++++++++++  PDF-Export  ++++++++++++++++
			//JasperExportManager.exportReportToPdfFile(jasperPrint, pdfDest);

			JasperViewer.viewReport(jasperPrint, false);
		} catch (JRException ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_jButtonCreateListProtocolActionPerformed

	private void jComboBoxFinStatusActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBoxFinStatusActionPerformed
	{//GEN-HEADEREND:event_jComboBoxFinStatusActionPerformed
	}//GEN-LAST:event_jComboBoxFinStatusActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{

		try
		{
			FileInputStream inputStream = new FileInputStream(new File("./ToDoAppSettings.xml"));
			applicationProperties.loadFromXML(inputStream);
			inputStream.close();

		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			JOptionPane.showMessageDialog(mainGUI, "Die Datei 'ToDoAppSettings.xml' konnte " +
					"nicht gefunden werden oder es trat ein Fehler beim Laden auf!\n" +
					"Bitte überprüfen Sie, ob die Datei vorhanden ist und starten Sie " +
					"die Anwendung dann erneut.", "Fehler", JOptionPane.ERROR_MESSAGE);
			System.exit(1);
		}

		try
		{
			Logger logger = Logger.getLogger(MainGUI.class.getName());

			FileHandler fh = new FileHandler(applicationProperties.getProperty("LoggerLogfilePath"), true);
			logger.addHandler(fh);
			logger.setLevel(Level.ALL);
			SimpleFormatter formatter = new SimpleFormatter();
			fh.setFormatter(formatter);

			logger.log(Level.INFO, "ToDoApp erfolgreich gestartet und initialisiert.");

		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			JOptionPane.showMessageDialog(mainGUI, "Die Anwendung konnte die Datei zur " +
					"Ausgabe von Fehlermeldungen nicht öffnen.\n\nBitte informieren Sie Ihren " +
					"Administrator über diese Fehlermeldung oder starten Sie die Anwendung erneut.");
			System.exit(1);
		}

		java.awt.EventQueue.invokeLater(new Runnable()
		{

			public void run()
			{
				setLookAndFeel();
				mainGUI = new MainGUI();
				mainGUI.setVisible(true);
			}
		});

	}

	public static void setLookAndFeel()
	{
		try
		{
			UIManager.setLookAndFeel(winClassName);
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

	}

	public ArrayList loadTodoData()
	{
		ArrayList<HashMap> todoData = new ArrayList<HashMap>();
		int tbz_id = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Protokollelement WHERE Geloescht = false AND SitzungsID=" +
					actMeeting.getMeetingID() + " ORDER BY ToDoID ASC";
			ResultSet rst = stmt.executeQuery(sql);
			int counter = 1;

			while (rst.next())
			{
				HashMap<String, String> fields = new HashMap<String, String>();
				tbz_id = rst.getInt("TBZuordnung_ID");
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				fields.put("Ueberschrift", "TOP " + counter + " " + rst.getString("Überschrift"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				fields.put("Verantwortliche",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Verantwortliche"))));
				fields.put("Beteiligte",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Beteiligte"))));
				todoData.add(fields);
				counter++;
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return todoData;
	}

	public ArrayList loadShortTodoData()
	{
		ArrayList<HashMap> shortTodoData = new ArrayList<HashMap>();
		int tbz_id = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Protokollelement WHERE Geloescht = false AND SitzungsID=" +
					actMeeting.getMeetingID();
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				HashMap<String, String> fields = new HashMap<String, String>();
				tbz_id = rst.getInt("TBZuordnung_ID");
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				fields.put("Verantwortliche",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Verantwortliche"))));
				shortTodoData.add(fields);
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return shortTodoData;
	}

	public ArrayList loadTopicData(String topic)
	{
		ArrayList<HashMap> topicData = new ArrayList<HashMap>();
		int topID = getTopicIDByName(topic);
		int tbz_id = -1;
		Vector topicTBZ = getTBZ_ListByAreaOrTopicID(topID, 1);

		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			Enumeration eTbz = topicTBZ.elements();
			while (eTbz.hasMoreElements())
			{
				tbz_id = ((Integer) eTbz.nextElement()).intValue();
				if (tbz_id != -1)
				{
					String sql = "SELECT * FROM Protokollelement WHERE " +
							"TBZuordnung_ID=" + tbz_id + " AND Geloescht = false ORDER BY ToDoID DESC";
					ResultSet rst = stmt.executeQuery(sql);

					while (rst.next())
					{
						HashMap<String, String> fields = new HashMap<String, String>();
						int meetingID = rst.getInt("SitzungsID");
						Meeting m = getMeetingDataByID(meetingID);
						fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
						fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
						fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
						fields.put("Status", getStatByID(rst.getInt("StatusID")));
						fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
						fields.put("Inhalt", rst.getString("Inhalt"));
						if (rst.getBoolean("WiedervorlageGesetzt"))
						{
							fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
						}
						else
						{
							fields.put("Wiedervorlagedatum", "kein");
						}

						fields.put("Verantwortliche",
								getNameAndLastNameByID(getIdsFromIdString(rst.getString("Verantwortliche"))));
						fields.put("Beteiligte",
								getNameAndLastNameByID(getIdsFromIdString(rst.getString("Beteiligte"))));
						fields.put("SitzOrt", m.getPlace());
						fields.put("SitzDatum", sdf.format(m.getDate()));
						fields.put("SitzName", m.getMeetingType());
						topicData.add(fields);
					}

					rst.close();
				}

			}
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return topicData;
	}

	public ArrayList loadPersonalTodoData(String status)
	{
		ArrayList<HashMap> personalTodoData = new ArrayList<HashMap>();
		String empName = jComboBoxEmployee.getSelectedItem().toString();
		int tbz_id = -1;
		int empID = getEmployeeIDByName(empName);
		String sql = "";    //Query-String für Verantwortliche
		String sql2 = "";   //Query-String für Beteiligte

		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		/*  zuerst alle Protokollpunkte ermitteln bei denen der ausgewählte
		 *  Mitarbeiter als Verantwortlicher eingetragen ist
		 *
		 *  hier wird die Variable  PersonalTodo.response auf TRUE gesetzt um
		 *  bei der Berichtserstellung die richtigen Grafiken und Column-Überschriften
		 *  setzen zu können
		 */
		try
		{
			Statement stmt = con.createStatement();
			if (status.equals("Alle"))
			{
				sql = "SELECT * FROM Protokollelement WHERE Geloescht = false AND Verantwortliche LIKE '%" + empID + "%'";
			}
			else
			{
				sql = "SELECT * FROM Protokollelement WHERE Geloescht = false AND Verantwortliche LIKE '%" + empID + "%' AND StatusID=" + getFinStatusIDByName(status);
			}

			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				noResponsData = false;
				HashMap<String, String> fields = new HashMap<String, String>();
				int meetingID = rst.getInt("SitzungsID");
				Meeting m = getMeetingDataByID(meetingID);
				tbz_id = rst.getInt("TBZuordnung_ID");
				fields.put("Typ", "Verantwortlich");
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				fields.put("Verantwortliche",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Verantwortliche"))));
				fields.put("Beteiligte",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Beteiligte"))));
				fields.put("SitzOrt", m.getPlace());
				fields.put("SitzDatum", sdf.format(m.getDate()));
				fields.put("SitzName", m.getMeetingType());
				personalTodoData.add(fields);

			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);

		/*  jetzt alle Protokollelemente ermitteln bei denen der ausgewählte Mitarbeiter
		 *  als Beteiligter eingetragen ist
		 */
		DB_ToDo_Connect.openDB();
		con =
				DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt2 = con.createStatement();
			if (status.equals("Alle"))
			{
				sql2 = "SELECT * FROM Protokollelement WHERE Beteiligte LIKE '%" +
						empID + "%'";
			}
			else
			{
				sql2 = "SELECT * FROM Protokollelement WHERE Beteiligte LIKE '%" +
						empID + "%' AND StatusID=" + getFinStatusIDByName(status);
			}

			ResultSet rst2 = stmt2.executeQuery(sql2);

			while (rst2.next())
			{
				noInvolvData = false;
				int meetingID = rst2.getInt("SitzungsID");
				Meeting m = getMeetingDataByID(meetingID);
				HashMap<String, String> fields = new HashMap<String, String>();
				fields.put("Typ", "Beteiligt");
				fields.put("Kategorie", getCatByID(rst2.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(rst2.getInt("BereichID")));
				fields.put("Institution", getInstByID(rst2.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst2.getInt("StatusID")));
				fields.put("Thema", rst2.getString("Thema"));
				fields.put("Inhalt", rst2.getString("Inhalt"));
				fields.put("Wiedervorlagedatum", rst2.getString("Wiedervorlagedatum"));
				fields.put("Verantwortliche",
						getNameAndLastNameByID(getIdsFromIdString(rst2.getString("Verantwortliche"))));
				fields.put("Beteiligte",
						getNameAndLastNameByID(getIdsFromIdString(rst2.getString("Beteiligte"))));
				fields.put("SitzOrt", m.getPlace());
				fields.put("SitzDatum", sdf.format(m.getDate()));
				fields.put("SitzName", m.getMeetingType());
				personalTodoData.add(fields);
			}

			rst2.close();
			stmt2.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return personalTodoData;
	}

	public ArrayList loadCategoryData(String cat)
	{
		ArrayList<HashMap> topicData = new ArrayList<HashMap>();
		int catID = getCategoryIDByName(cat);
		int tbz_id = -1;

		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			PreparedStatement pStmt = con.prepareStatement("SELECT * FROM Protokollelement INNER JOIN " +
					"(Sitzungsdaten INNER JOIN Sitzungsart ON Sitzungsdaten.SitzungsartID = Sitzungsart.SitzungsartID) " +
					"ON Protokollelement.SitzungsID = Sitzungsdaten.SitzungsdatenID WHERE Protokollelement.Geloescht " +
					"= false AND Sitzungsdaten.Geloescht = false AND KategorieID = ?");
			pStmt.setInt(1, catID);
			ResultSet rst = pStmt.executeQuery();

			while (rst.next())
			{
				HashMap<String, String> fields = new HashMap<String, String>();
				tbz_id = rst.getInt("TBZuordnung_ID");
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				fields.put("Verantwortliche",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Verantwortliche"))));
				fields.put("Beteiligte",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Beteiligte"))));
				fields.put("SitzOrt", rst.getString("Ort"));
				java.util.Date md = rst.getDate("Datum");

				if (md != null)
				{
					fields.put("SitzDatum", sdf.format(md));
				}
				else
				{
					fields.put("SitzDatum", "kein");
				}

				fields.put("SitzName", rst.getString("Name"));
				topicData.add(fields);
			}

			rst.close();
			pStmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}
		DB_ToDo_Connect.closeDB(con);
		return topicData;
	}

	public ArrayList loadAreaData(
			String area)
	{
		ArrayList<HashMap> areaData = new ArrayList<HashMap>();
		int arID = getAreaIDByName(area);
		int temp = -1;
		Vector topicTBZ = getTBZ_ListByAreaOrTopicID(arID, 2);

		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			Enumeration eTbz = topicTBZ.elements();
			while (eTbz.hasMoreElements())
			{
				temp = ((Integer) eTbz.nextElement()).intValue();
				if (temp != -1)
				{
					String sql = "SELECT * FROM Protokollelement WHERE " +
							"TBZuordnung_ID=" + temp + " AND Geloescht = false ORDER BY ToDoID DESC";
					ResultSet rst = stmt.executeQuery(sql);

					while (rst.next())
					{
						HashMap<String, String> fields = new HashMap<String, String>();
						int meetingID = rst.getInt("SitzungsID");
						Meeting m = getMeetingDataByID(meetingID);
						fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
						fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(temp)));
						fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
						fields.put("Status", getStatByID(rst.getInt("StatusID")));
						fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(temp)));
						fields.put("Inhalt", rst.getString("Inhalt"));
						if (rst.getBoolean("WiedervorlageGesetzt"))
						{
							fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
						}
						else
						{
							fields.put("Wiedervorlagedatum", "kein");
						}

						fields.put("Verantwortliche",
								getNameAndLastNameByID(getIdsFromIdString(rst.getString("Verantwortliche"))));
						fields.put("Beteiligte",
								getNameAndLastNameByID(getIdsFromIdString(rst.getString("Beteiligte"))));
						fields.put("SitzOrt", m.getPlace());
						fields.put("SitzDatum", sdf.format(m.getDate()));
						fields.put("SitzName", m.getMeetingType());
						areaData.add(fields);
					}

					rst.close();
				}

			}
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return areaData;
	}

	public ArrayList loadMeetingDateData(Date dat)
	{
		ArrayList<HashMap> meetingDateData = new ArrayList<HashMap>();
		int tbz_id = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();
		try
		{
			PreparedStatement pStmt = con.prepareStatement("SELECT * FROM Protokollelement INNER JOIN " +
					"Sitzungsdaten ON Protokollelement.SitzungsID = Sitzungsdaten.SitzungsdatenID " +
					"WHERE Datum = ? AND Protokollelement.Geloescht = false AND " +
					"Sitzungsdaten.Geloescht = false ORDER BY ToDoID DESC");
			pStmt.setDate(1, dat);
			ResultSet rst = pStmt.executeQuery();

			while (rst.next())
			{
				tbz_id = rst.getInt("TBZuordnung_ID");
				HashMap<String, String> fields = new HashMap<String, String>();
				Meeting m = getMeetingDataByID(rst.getInt("SitzungsID"));
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				fields.put("Verantwortliche",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Verantwortliche"))));
				fields.put("Beteiligte",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Beteiligte"))));
				fields.put("SitzOrt", m.getPlace());
				fields.put("SitzDatum", sdf.format(m.getDate()));
				fields.put("SitzName", m.getMeetingType());
				meetingDateData.add(fields);
			}

			rst.close();
			pStmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return meetingDateData;
	}

	public ArrayList loadMeetingTypeData(
			String type)
	{
		ArrayList<HashMap> meetingTypeData = new ArrayList<HashMap>();
		int tbz_id = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();
		try
		{
			PreparedStatement pStmt = con.prepareStatement("SELECT * FROM Sitzungsart INNER JOIN (Protokollelement INNER JOIN " +
					"Sitzungsdaten ON Protokollelement.SitzungsID = Sitzungsdaten.SitzungsdatenID) " +
					"ON Sitzungsart.SitzungsartID = Sitzungsdaten.SitzungsartID " +
					"WHERE Sitzungsart.Name = ? AND Protokollelement.Geloescht = false AND Sitzungsdaten.Geloescht = " +
					"false ORDER BY Protokollelement.ToDoID DESC");
			pStmt.setString(1, type);
			ResultSet rst = pStmt.executeQuery();

			while (rst.next())
			{
				HashMap<String, String> fields = new HashMap<String, String>();
				tbz_id = rst.getInt("TBZuordnung_ID");
				int sid = rst.getInt("SitzungsID");
				Meeting m = getMeetingDataByID(sid);
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				fields.put("Verantwortliche",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Verantwortliche"))));
				fields.put("Beteiligte",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Beteiligte"))));
				fields.put("SitzOrt", m.getPlace());
				fields.put("SitzDatum", sdf.format(m.getDate()));
				fields.put("SitzName", m.getMeetingType());
				meetingTypeData.add(fields);
			}

			rst.close();
			pStmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return meetingTypeData;
	}

	public ArrayList loadReDateData(
			Date date)
	{
		ArrayList<HashMap> reDateData = new ArrayList<HashMap>();
		int tbz_id = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			PreparedStatement pStmt = con.prepareStatement("SELECT * FROM Protokollelement WHERE " +
					"Wiedervorlagedatum < ? AND WiedervorlageGesetzt = true AND Geloescht = false " +
					"ORDER BY Wiedervorlagedatum DESC");
			pStmt.setDate(1, date);
			ResultSet rst = pStmt.executeQuery();

			while (rst.next())
			{
				HashMap<String, String> fields = new HashMap<String, String>();
				Meeting m = getMeetingDataByID(rst.getInt("SitzungsID"));
				tbz_id = rst.getInt("TBZuordnung_ID");
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				if (rst.getBoolean("WiedervorlageGesetzt"))
				{
					fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				fields.put("Verantwortliche",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Verantwortliche"))));
				fields.put("Beteiligte",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Beteiligte"))));
				fields.put("SitzOrt", m.getPlace());
				fields.put("SitzDatum", sdf.format(m.getDate()));
				fields.put("SitzName", m.getMeetingType());
				reDateData.add(fields);
			}

			rst.close();
			pStmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return reDateData;
	}

	public ArrayList loadOpListData()
	{
		ArrayList<HashMap> opData = new ArrayList<HashMap>();
		int tbz_id = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		if (!jComboBoxEmployee.getSelectedItem().toString().equals("") &&
				!jComboBoxEmployee.getSelectedItem().toString().equals("Alle Mitarbeiter"))
		{
			// Es wurde ein Mitarbeiter ausgewählt
			try
			{
				PreparedStatement pStmt = con.prepareStatement("SELECT * FROM Protokollelement " +
						"INNER JOIN TBZ ON Protokollelement.TBZuordnung_ID=TBZ.TBZ_ID " +
						"WHERE TBZ.BereichID = ?" +
						"AND TBZ.ThemaID = ? " +
						"AND Protokollelement.KategorieID = ? " +
						"AND Protokollelement.Verantwortliche LIKE '%?%' " +
						"ORDER BY Wiedervorlagedatum DESC");
				pStmt.setInt(1, getAreaIDByName(jComboBoxArea.getSelectedItem().toString()));
				pStmt.setInt(2, getTopicIDByName(jComboBoxTopic.getSelectedItem().toString()));
				pStmt.setInt(3, getCategoryIDByName(jComboBoxCategory.getSelectedItem().toString()));
				pStmt.setString(4, String.valueOf(getEmployeeIDByName(jComboBoxEmployee.getSelectedItem().toString())));
				ResultSet rst = pStmt.executeQuery();
				/*pStmt.setInt(1, getAreaIDByName(jComboBoxArea.getSelectedItem().toString()));
				pStmt.setInt(2, getTopicIDByName(jComboBoxTopic.getSelectedItem().toString()));
				pStmt.setInt(3, getCategoryIDByName(jComboBoxCategory.getSelectedItem().toString()));
				pStmt.setInt(4, empID);
				ps.setInt(5, getAreaIDByName(jComboBoxArea.getSelectedItem().toString()));
				ps.setInt(6, getTopicIDByName(jComboBoxTopic.getSelectedItem().toString()));
				ps.setInt(7, getCategoryIDByName(jComboBoxCategory.getSelectedItem().toString()));
				ps.setInt(8, empID);*/
				//ResultSet rst = pStmt.executeQuery();

				while (rst.next())
				{
					HashMap<String, String> fields = new HashMap<String, String>();
					tbz_id = rst.getInt("TBZuordnung_ID");
					fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
					fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
					fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
					fields.put("Status", getStatByID(rst.getInt("StatusID")));
					fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
					fields.put("Inhalt", rst.getString("Inhalt"));
					if (rst.getBoolean("WiedervorlageGesetzt"))
					{
						fields.put("Wiedervorlagedatum", sdf.format(rst.getDate("Wiedervorlagedatum")));
					}
					else
					{
						fields.put("Wiedervorlagedatum", "kein");
					}

					fields.put("Verantwortliche",
							getNameAndLastNameByID(getIdsFromIdString(rst.getString("Verantwortliche"))));
					fields.put("Beteiligte",
							getNameAndLastNameByID(getIdsFromIdString(rst.getString("Beteiligte"))));
					//fields.put("SitzOrt", rst.getString("Ort"));
                    /*md = rst.getDate("Datum");
					if(md != null) {
					fields.put("SitzDatum", sdf.format(md));
					} else {
					fields.put("SitzDatum", "kein");
					}
					fields.put("SitzName", getMeetingTypeByID(rst.getInt("SitzungsartID")));
					 */
					opData.add(fields);
				}

				rst.close();
				pStmt.close();
			} catch (Exception ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}

			/*"OR (TBZ.BereichID = ? "
			"AND TBZ.ThemaID = ? " +                                //p6=ThemaID
			"AND Protokollelement.KategorieID = ? " +               //p7=KategorieID
			"AND Protokollelement.Beteiligte LIKE '%?%') " +        //p8=empID
			"");*/
		}
		else
		{
			// Es wurde "Alle Mitarbeiter" ausgewählt -> ergibt vollständige OP-Liste
			if (!jComboBoxEmployee.getSelectedItem().toString().equals(""))
			{
				try
				{
					PreparedStatement pStmt = con.prepareStatement("SELECT * FROM (Protokollelement INNER JOIN " +
							"Sitzungsdaten ON Protokollelement.SitzungsID=Sitzungsdaten.SitzungsdatenID) " +
							"INNER JOIN TBZ ON Protokollelement.TBZuordnung_ID=TBZ.TBZ_ID " +
							"WHERE TBZ.BereichID = ? " + //p1=BereichID
							"AND TBZ.ThemaID = ? " + //p2=ThemaID
							"AND Protokollelement.KategorieID = ? " + //p3=KategorieID
							"ORDER BY Wiedervorlagedatum DESC");
					pStmt.setInt(1, getAreaIDByName(jComboBoxArea.getSelectedItem().toString()));
					pStmt.setInt(2, getTopicIDByName(jComboBoxTopic.getSelectedItem().toString()));
					pStmt.setInt(3, getCategoryIDByName(jComboBoxCategory.getSelectedItem().toString()));
					ResultSet rst = pStmt.executeQuery();

					while (rst.next())
					{
						HashMap<String, String> fields = new HashMap<String, String>();
						tbz_id = rst.getInt("TBZuordnung_ID");
						fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
						fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
						fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
						fields.put("Status", getStatByID(rst.getInt("StatusID")));
						fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
						fields.put("Inhalt", rst.getString("Inhalt"));
						java.util.Date rd = rst.getDate("Wiedervorlagedatum");
						if (rd != null)
						{
							fields.put("Wiedervorlagedatum", sdf.format(rd));
						}
						else
						{
							fields.put("Wiedervorlagedatum", "kein");
						}

						fields.put("Verantwortliche",
								getNameAndLastNameByID(getIdsFromIdString(rst.getString("Verantwortliche"))));
						fields.put("Beteiligte",
								getNameAndLastNameByID(getIdsFromIdString(rst.getString("Beteiligte"))));
						fields.put("SitzOrt", rst.getString("Ort"));
						java.util.Date md = rst.getDate("Datum");
						if (md != null)
						{
							fields.put("SitzDatum", sdf.format(md));
						}
						else
						{
							fields.put("SitzDatum", "kein");
						}

						fields.put("SitzName", getMeetingTypeByID(rst.getInt("SitzungsartID")));
						opData.add(fields);
					}

					rst.close();
					pStmt.close();
				} catch (Exception ex)
				{
					Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
					GlobalError.showErrorAndExit();
				}

			}
			else
			{
				JOptionPane.showMessageDialog(null, "Fehler beim Erstellen des Reports. " +
						"Sie haben keine Auswahl bei ! Mitarbeiter ! getroffen. Für diesen Report müssen Sie " +
						"Thema, Bereich, Kategorie und Wiedervorlagedatum angeben. " +
						"Außerdem müssen Sie einen oder \"Alle Mitarbeiter \" auswählen", "Fehler", JOptionPane.ERROR_MESSAGE);
			}

		}
		DB_ToDo_Connect.closeDB(con);
		return opData;
	}

	public ArrayList loadCompleteOpListData()
	{
		ArrayList<HashMap> opData = new ArrayList<HashMap>();
		int tbz_id = -1;
		DB_ToDo_Connect.openDB();
		con =
				DB_ToDo_Connect.getCon();

		try
		{
			PreparedStatement pStmt = con.prepareStatement("SELECT * FROM Protokollelement " +
					"INNER JOIN TBZ ON Protokollelement.TBZuordnung_ID=TBZ.TBZ_ID " +
					"WHERE Protokollelement.StatusID = ? AND Geloescht = false " +
					"ORDER BY Wiedervorlagedatum DESC");
			pStmt.setInt(1, getFinStatusIDByName(jComboBoxFinStatus.getSelectedItem().toString()));
			ResultSet rst = pStmt.executeQuery();

			while (rst.next())
			{
				HashMap<String, String> fields = new HashMap<String, String>();
				tbz_id = rst.getInt("TBZuordnung_ID");
				fields.put("Kategorie", getCatByID(rst.getInt("KategorieID")));
				fields.put("Bereich", getAreaByID(getAreaIDByTBZ_ID(tbz_id)));
				fields.put("Institution", getInstByID(rst.getInt("InstitutionsID")));
				fields.put("Status", getStatByID(rst.getInt("StatusID")));
				fields.put("Thema", getTopicByID(getTopicIDByTBZ_ID(tbz_id)));
				fields.put("Inhalt", rst.getString("Inhalt"));
				java.util.Date rd = rst.getDate("Wiedervorlagedatum");
				if (rd != null)
				{
					fields.put("Wiedervorlagedatum", sdf.format(rd));
				}
				else
				{
					fields.put("Wiedervorlagedatum", "kein");
				}

				fields.put("Verantwortliche",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Verantwortliche"))));
				fields.put("Beteiligte",
						getNameAndLastNameByID(getIdsFromIdString(rst.getString("Beteiligte"))));
				//fields.put("SitzOrt", rst.getString("Ort"));
                    /*md = rst.getDate("Datum");
				if(md != null) {
				fields.put("SitzDatum", sdf.format(md));
				} else {
				fields.put("SitzDatum", "kein");
				}
				fields.put("SitzName", getMeetingTypeByID(rst.getInt("SitzungsartID")));
				 */
				opData.add(fields);
			}

			rst.close();
			pStmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return opData;
	}

	public void getLatestMeeting()
	{
		// Lade Datum der zuletzt erstellten Sitzung aus Datenbank
		actMeeting.clear();
		jLabelMeetingDate.setForeground(new java.awt.Color(255, 0, 0));
		jLabelMeetingDate.setText("No Data");
		jLabelMeetingType.setForeground(new java.awt.Color(255, 0, 0));
		jLabelMeetingType.setText(" - ");
		jLabelMeetingPlace.setForeground(new java.awt.Color(255, 0, 0));
		jLabelMeetingPlace.setText(" - ");
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsdaten WHERE Geloescht = false " +
					"ORDER BY SitzungsdatenID DESC";
			ResultSet rst = stmt.executeQuery(sql);
			rst.next();

			actMeeting.setMeetingID(rst.getInt("SitzungsdatenID"));
			actMeeting.setDate(rst.getDate("Datum"));
			actMeeting.setMeetingTypeID(rst.getInt("SitzungsartID"));
			actMeeting.setPlace(rst.getString("Ort"));
			actMeeting.setProt(rst.getInt("Protokollant"));
			actMeeting.setPartic(rst.getString("Teilnehmer"));

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		if (actMeeting.getDate() != null)
		{
			jLabelMeetingDate.setForeground(new java.awt.Color(0, 0, 255));
			jLabelMeetingDate.setText(sdf.format(actMeeting.getDate()));
		}

		if (actMeeting.getMeetingTypeID() != 0)
		{
			setMeetingType();
		}

		if (!actMeeting.getPlace().equals(""))
		{
			jLabelMeetingPlace.setForeground(new java.awt.Color(0, 0, 255));
			jLabelMeetingPlace.setText(actMeeting.getPlace());
		}

	}

	public void getChosenMeeting(int mID)
	{
		actMeeting.clear();
		jLabelMeetingDate.setForeground(new java.awt.Color(255, 0, 0));
		jLabelMeetingDate.setText("No Data");
		jLabelMeetingType.setForeground(new java.awt.Color(255, 0, 0));
		jLabelMeetingType.setText(" - ");
		jLabelMeetingPlace.setForeground(new java.awt.Color(255, 0, 0));
		jLabelMeetingPlace.setText(" - ");
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsdaten WHERE SitzungsdatenID=" + mID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				actMeeting.setDate(rst.getDate("Datum"));
				actMeeting.setMeetingTypeID(rst.getInt("SitzungsartID"));
				actMeeting.setPlace(rst.getString("Ort"));
				actMeeting.setProt(rst.getInt("Protokollant"));
				actMeeting.setPartic(rst.getString("Teilnehmer"));
				actMeeting.setOtherParticipants(rst.getString("Sonstige"));
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		if (actMeeting.getDate() != null)
		{
			jLabelMeetingDate.setForeground(new java.awt.Color(0, 0, 255));
			jLabelMeetingDate.setText(sdf.format(actMeeting.getDate()));
		}

		if (actMeeting.getMeetingTypeID() != 0)
		{
			setMeetingType();
		}

		if (!actMeeting.getPlace().equals(""))
		{
			jLabelMeetingPlace.setForeground(new java.awt.Color(0, 0, 255));
			jLabelMeetingPlace.setText(actMeeting.getPlace());
		}

	}

	public void setMeetingType()
	{
		//Lade Sitzungsart der zuletzt bearbeiteten Sitzung aus Datenbank
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT SitzungsartID, Name FROM Sitzungsart WHERE SitzungsartID=" +
					actMeeting.getMeetingTypeID();
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				jLabelMeetingType.setForeground(new java.awt.Color(0, 0, 255));
				actMeeting.setMeetingType(rst.getString("Name"));
				jLabelMeetingType.setText(actMeeting.getMeetingType());
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	public static void setActMeeting(int meetingID, String place, Date date, String meetingType)
	{
		actMeeting.setMeetingID(meetingID);
		actMeeting.setPlace(place);
		actMeeting.setDate(date);
		actMeeting.setMeetingType(meetingType);
	}

	public String getNameAndLastNameByID(Vector ids)
	{
		StringBuffer participantsBuffer = new StringBuffer();
		int id = 0;
		DB_Mitarbeiter_Connect.openDB();
		con = DB_Mitarbeiter_Connect.getCon();

		// Vector mit einzelnen Mitarbeiter ID's einzeln auslesen und
		// Vorname_Nachname in Strinbuffer schreiben
		Enumeration en = ids.elements();
		while (en.hasMoreElements())
		{
			Integer temp = new Integer(String.valueOf(en.nextElement()));
			id =
					temp.intValue();

			try
			{
				Statement stmt = con.createStatement();
				String sql = "SELECT Nachname, Vorname FROM Stammdaten WHERE " +
						"Personalnummer=" + id;
				ResultSet rst = stmt.executeQuery(sql);

				while (rst.next())
				{
					// String mit (Vorname Nachname) für jasperReports
					participantsBuffer.append(rst.getString("Vorname") + " " + rst.getString("Nachname") + ", ");
				}

				rst.close();
				stmt.close();
			} catch (Exception ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}

		}
		DB_ToDo_Connect.closeDB(con);
		String participantsString = participantsBuffer.toString();
		return participantsString;
	}

	/*
	 *  StringTokenizer zerlegt Mitarbeiter-String aus Id's
	 *  @param String
	 */
	public Vector getIdsFromIdString(
			String id)
	{
		Vector ids = new Vector();
		if (id != null)
		{
			StringTokenizer tokenizer = new StringTokenizer(id, ", ");
			while (tokenizer.hasMoreTokens())
			{
				if (tokenizer.countTokens() > 0)
				{
					String temp = String.valueOf(tokenizer.nextToken());
					int partID = Integer.valueOf(temp);
					ids.add(partID);
				}
				else
				{
					continue;
				}

			}
		}
		return ids;
	}

	/*
	 * HashMap fields füllen, einzelne HashMaps in ArrayList data aufnehemen
	 */
	public String getCatByID(
			int catID)
	{
		String name = "";
		DB_ToDo_Connect.openDB();
		con =
				DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie WHERE KategorieID=" + catID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return name;
	}

	public String getAreaByID(
			int areaID)
	{
		//wenn areaID = -1, wurde kein bereich angegeben, return "kein"
		if (areaID != -1)
		{
			String name = "";
			DB_ToDo_Connect.openDB();
			con =
					DB_ToDo_Connect.getCon();

			try
			{
				Statement stmt = con.createStatement();
				String sql = "SELECT * FROM Bereich WHERE BereichID=" + areaID;
				ResultSet rst = stmt.executeQuery(sql);

				while (rst.next())
				{
					name = rst.getString("Name");
				}

				rst.close();
				stmt.close();
			} catch (Exception ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}

			DB_ToDo_Connect.closeDB(con);
			return name;
		}
		else
		{
			return "kein";
		}

	}

	public int getAreaIDByTBZ_ID(int tbzID)
	{
		//wenn tbzID = -1, wurde keine TB-Zuordnung gewählt; return -1
		if (tbzID != -1)
		{
			int id = 0;
			DB_ToDo_Connect.openDB();
			con =
					DB_ToDo_Connect.getCon();

			try
			{
				Statement stmt = con.createStatement();
				String sql = "SELECT * FROM TBZ WHERE TBZ_ID=" + tbzID;
				ResultSet rst = stmt.executeQuery(sql);

				while (rst.next())
				{
					id = rst.getInt("BereichID");
				}

				rst.close();
				stmt.close();
			} catch (Exception ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}

			DB_ToDo_Connect.closeDB(con);
			return id;
		}
		else
		{
			return -1;
		}

	}

	public String getTopicByID(
			int topicID)
	{
		//wenn topicID = -1, wurde kein Thema angegeben, return "kein"
		if (topicID != -1)
		{
			String name = "";
			DB_ToDo_Connect.openDB();
			con =
					DB_ToDo_Connect.getCon();

			try
			{
				Statement stmt = con.createStatement();
				String sql = "SELECT * FROM Thema WHERE ThemaID=" + topicID;
				ResultSet rst = stmt.executeQuery(sql);

				while (rst.next())
				{
					name = rst.getString("Name");
				}

				rst.close();
				stmt.close();
			} catch (Exception ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}

			DB_ToDo_Connect.closeDB(con);
			return name;
		}
		else
		{
			return "kein";
		}

	}

	public int getTopicIDByTBZ_ID(int tbzID)
	{
		//wenn tbzID = -1, wurde keine TB-Zuordnung gewählt; return -1
		if (tbzID != -1)
		{
			int id = 0;
			DB_ToDo_Connect.openDB();
			con =
					DB_ToDo_Connect.getCon();

			try
			{
				Statement stmt = con.createStatement();
				String sql = "SELECT * FROM TBZ WHERE TBZ_ID=" + tbzID;
				ResultSet rst = stmt.executeQuery(sql);

				while (rst.next())
				{
					id = rst.getInt("ThemaID");
				}

				rst.close();
				stmt.close();
			} catch (Exception ex)
			{
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				GlobalError.showErrorAndExit();
			}

			DB_ToDo_Connect.closeDB(con);
			return id;
		}
		else
		{
			return -1;
		}

	}

	public String getInstByID(
			int instID)
	{
		String name = "";
		DB_ToDo_Connect.openDB();
		con =
				DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Institution WHERE InstitutionID=" + instID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return name;
	}

	public String getStatByID(
			int statID)
	{
		String name = "";
		DB_ToDo_Connect.openDB();
		con =
				DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status WHERE StatusID=" + statID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return name;
	}

	/*
	 * Ermittlet alle Mitarbeiter aus den Stammdaten der Mitarbeiter-DB
	 * und füllt damit den globalen Vector "employees" auf.
	 * Dessen Elemente werden im Auswahlfeld jComboBoxEmployee angezeigt
	 *
	 * DB Query - Mitarbeiter-DB, Tabelle "Stammdaten"
	 *
	 */
	public void getAllEmployees()
	{
		DB_Mitarbeiter_Connect.openDB();
		con = DB_Mitarbeiter_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Nachname, Vorname FROM Stammdaten ORDER BY Nachname";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String em = rst.getString("Nachname") + ", " +
						rst.getString("Vorname");
				employees.add(em);
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	/*
	 * Ermittlet alle Themen aus den Stammdaten der Tabelle "Thema"
	 * und füllt damit den globalen Vector "topics" auf.
	 * Dessen Elemente werden im Auswahlfeld jComboBoxTopic angezeigt
	 *
	 * DB Query - todo-DB, Tabelle "Thema"
	 *
	 */
	public void getAllTopics()
	{
		DB_ToDo_Connect.openDB();
		con =
				DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Thema ORDER BY NAME";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String to = rst.getString("Name");
				topics.add(to);
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	/*
	 * Ermittlet alle Kategorien aus den Stammdaten der Tabelle "Kategorie"
	 * und füllt damit den globalen Vector "categories" auf.
	 * Dessen Elemente werden im Auswahlfeld jComboBoxCategory angezeigt
	 *
	 * DB Query - todo-DB, Tabelle "Kategorie"
	 *
	 */
	public void getAllCategories()
	{
		DB_ToDo_Connect.openDB();
		con =
				DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie ORDER BY NAME";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String ca = rst.getString("Name");
				categories.add(ca);
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	/*
	 * Ermittlet alle Bereiche aus den Stammdaten der Tabelle "Bereich"
	 * und füllt damit den globalen Vector "areas" auf.
	 * Dessen Elemente werden im Auswahlfeld jComboBoxArea angezeigt
	 *
	 * DB Query - todo-DB, Tabelle "Bereich"
	 *
	 */
	public void getAllAreas()
	{
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Name FROM Bereich ORDER BY NAME";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String ar = rst.getString("Name");
				areas.add(ar);
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	/*
	 * Ermittlet alle Sitzungsarten aus den Stammdaten der Tabelle "Sitzungsart"
	 * und füllt damit den globalen Vector "meetingTypes" auf.
	 * Dessen Elemente werden im Auswahlfeld jComboBoxMeetingType2 angezeigt
	 *
	 * DB Query - todo-DB, Tabelle "Sitzungsart"
	 *
	 */
	public void getAllMeetingTypes()
	{
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Name FROM Sitzungsart ORDER BY Name";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				String mT = rst.getString("Name");
				meetingTypes.add(mT);
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	/*
	 * Ermittlet jedes Datum der Sitzungen aus der Tabelle "Sitzungsdaten"
	 * und füllt damit den globalen Vector "meetingDates" auf.
	 * Dessen Elemente werden im Auswahlfeld jComboBoxMeetingDate2 angezeigt
	 *
	 * DB Query - todo-DB, Tabelle "Sitzungsdaten"
	 *
	 */
	public void getAllMeetingDates()
	{
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT DISTINCT Datum FROM Sitzungsdaten ORDER BY Datum DESC";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{

				String date = sdf.format(rst.getDate("Datum"));
				meetingDates.add(date);
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	public int getEmployeeIDByName(String name)
	{
		int empID = -1;
		String fn = getFirstNameOfEmployee(name);
		String ln = getLastNameOfEmployee(name);
		DB_Mitarbeiter_Connect.openDB();
		con = DB_Mitarbeiter_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT Nachname, Vorname, Personalnummer FROM Stammdaten " +
					"WHERE Nachname LIKE '" + ln + "' AND Vorname LIKE '" + fn + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				empID = rst.getInt("Personalnummer");
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return empID;
	}

	public Meeting getMeetingDataByID(
			int meetingID)
	{
		Meeting m = new Meeting();
		m.setMeetingID(meetingID);
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsdaten WHERE SitzungsdatenID=" + m.getMeetingID();
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				int tmp = rst.getInt("SitzungsartID");
				m.setMeetingType(getMeetingTypeByID(tmp));
				m.setPlace(rst.getString("Ort"));
				m.setDate(rst.getDate("Datum"));
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return m;
	}

	public String getMeetingTypeByID(
			int id)
	{
		String mType = "";
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsart WHERE SitzungsartID=" + id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				mType = rst.getString("Name");
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return mType;
	}

	public String getFirstNameOfEmployee(
			String name)
	{
		String fn = "";
		if (name != null)
		{
			StringTokenizer tokenizer = new StringTokenizer(name, ", ");
			while (tokenizer.hasMoreTokens())
			{
				fn = tokenizer.nextToken();
			}

		}
		return fn;
	}

	public String getLastNameOfEmployee(
			String name)
	{
		String ln = "";
		if (name != null)
		{
			StringTokenizer tokenizer = new StringTokenizer(name, ", ");
			while (tokenizer.hasMoreTokens())
			{
				ln = tokenizer.nextToken();
				break;

			}


		}
		return ln;
	}

	public void setComboBoxEmployees()
	{
		jComboBoxEmployee.removeAllItems();
		Enumeration e = employees.elements();
		while (e.hasMoreElements())
		{
			String em = String.valueOf(e.nextElement());
			jComboBoxEmployee.addItem(em);
		}

	}

	public void setComboBoxTopics()
	{
		jComboBoxTopic.removeAllItems();
		Enumeration e = topics.elements();
		while (e.hasMoreElements())
		{
			String to = String.valueOf(e.nextElement());
			jComboBoxTopic.addItem(to);
		}

	}

	public void setComboBoxCategory()
	{
		jComboBoxCategory.removeAllItems();
		Enumeration e = categories.elements();
		while (e.hasMoreElements())
		{
			String ca = String.valueOf(e.nextElement());
			jComboBoxCategory.addItem(ca);
		}

	}

	public void setComboBoxArea()
	{
		jComboBoxArea.removeAllItems();
		Enumeration e = areas.elements();
		while (e.hasMoreElements())
		{
			String ar = String.valueOf(e.nextElement());
			jComboBoxArea.addItem(ar);
		}

	}

	public void setComboBoxMeetingType()
	{
		jComboBoxMeetingType.removeAllItems();
		Enumeration e = meetingTypes.elements();
		while (e.hasMoreElements())
		{
			String mT = String.valueOf(e.nextElement());
			jComboBoxMeetingType.addItem(mT);
		}

	}

	public void setComboBoxMeetingDate()
	{
		jComboBoxMeetingDate.removeAllItems();
		Enumeration e = meetingDates.elements();
		while (e.hasMoreElements())
		{
			String md = String.valueOf(e.nextElement());
			jComboBoxMeetingDate.addItem(md);
		}

	}

	public void setComboBoxFinStatus()
	{
		jComboBoxFinStatus.removeAllItems();
		jComboBoxFinStatus.addItem("");
		jComboBoxFinStatus.addItem("Alle");
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				jComboBoxFinStatus.addItem(rst.getString("Name"));
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
	}

	public String getFinStatusByID(
			int statusID)
	{
		String statName = "";
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status WHERE StatusID=" + statusID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				statName = rst.getString("Name");
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return statName;
	}

	public int getFinStatusIDByName(String statusName)
	{
		int statID = 0;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status WHERE Name='" + statusName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				statID = rst.getInt("StatusID");
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return statID;
	}

	public int getTopicIDByName(String topicName)
	{
		int topID = 0;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Thema WHERE Name='" + topicName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				topID = rst.getInt("ThemaID");
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return topID;
	}

	public int getCategoryIDByName(String categoryName)
	{
		int catID = -1;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie WHERE Name='" + categoryName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				catID = rst.getInt("KategorieID");
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return catID;
	}

	public int getAreaIDByName(String areaName)
	{
		int arID = 0;
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Bereich WHERE Name='" + areaName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				arID = rst.getInt("BereichID");
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return arID;
	}

	/*
	 * ermittelt eine Liste aller TBZ_ID's bei denen ThemaID = topID(stat=1)
	 * oder BereichID = arID(stat2)
	 */
	public Vector getTBZ_ListByAreaOrTopicID(
			int id, int stat)
	{
		Vector tbz_list = new Vector();
		String s = "";
		if (stat == 1)
		{
			s = "ThemaID";
		}
		else
		{
			s = "BereichID";
		}

		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM TBZ WHERE " + s + "=" + id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				tbz_list.add(rst.getInt("TBZ_ID"));
			}

			rst.close();
			stmt.close();
		} catch (Exception ex)
		{
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			GlobalError.showErrorAndExit();
		}

		DB_ToDo_Connect.closeDB(con);
		return tbz_list;
	}


	/*
	 * ermittelt den Wochentag anhand des Integerwerts von DAY_OF_WEEK
	 */
	public String getDayString(
			int weekDayID)
	{
		String dayString = "";
		switch (weekDayID)
		{
			case 1:
				dayString = "Sonntag";
				break;

			case 2:
				dayString = "Montag";
				break;

			case 3:
				dayString = "Dienstag";
				break;

			case 4:
				dayString = "Mittwoch";
				break;

			case 5:
				dayString = "Donnerstag";
				break;

			case 6:
				dayString = "Freitag";
				break;

			case 7:
				dayString = "Samstag";
				break;

			default:

				dayString = "";
				break;

		}


		return dayString;
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Programm;
    private javax.swing.JButton jButtonCreateAreaList;
    private javax.swing.JButton jButtonCreateCategoryList;
    private javax.swing.JButton jButtonCreateListProtocol;
    private javax.swing.JButton jButtonCreateMeetingDateList;
    private javax.swing.JButton jButtonCreateMeetingTypeList;
    private javax.swing.JButton jButtonCreateOP_List;
    private javax.swing.JButton jButtonCreatePersonalProtocol;
    private javax.swing.JButton jButtonCreatePersonalProtocolList;
    private javax.swing.JButton jButtonCreateProtocol;
    private javax.swing.JButton jButtonCreateReDateList;
    private javax.swing.JButton jButtonCreateTopicList;
    private javax.swing.JButton jButtonManageMeeting;
    private javax.swing.JButton jButtonManageTodo;
    private de.wannawork.jcalendar.JCalendarComboBox jCalendarComboBoxReDate;
    private javax.swing.JComboBox jComboBoxArea;
    private javax.swing.JComboBox jComboBoxCategory;
    private javax.swing.JComboBox jComboBoxEmployee;
    private javax.swing.JComboBox jComboBoxFinStatus;
    private javax.swing.JComboBox jComboBoxMeetingDate;
    private javax.swing.JComboBox jComboBoxMeetingType;
    private javax.swing.JComboBox jComboBoxTopic;
    private javax.swing.JLabel jLabelAnalysis1;
    private javax.swing.JLabel jLabelArea;
    private javax.swing.JLabel jLabelCategory;
    private javax.swing.JLabel jLabelEmployee;
    private javax.swing.JLabel jLabelError;
    private javax.swing.JLabel jLabelFinStatus;
    private javax.swing.JLabel jLabelMeeting;
    private javax.swing.JLabel jLabelMeetingDate;
    private javax.swing.JLabel jLabelMeetingDate2;
    private javax.swing.JLabel jLabelMeetingPlace;
    private javax.swing.JLabel jLabelMeetingType;
    private javax.swing.JLabel jLabelMeetingType2;
    private javax.swing.JLabel jLabelOP_List;
    private javax.swing.JLabel jLabelOP_List1;
    private javax.swing.JLabel jLabelReDate;
    private javax.swing.JLabel jLabelTopic;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEmloyer;
    private javax.swing.JMenuItem jMenuItemAnstellung;
    private javax.swing.JMenuItem jMenuItemArea;
    private javax.swing.JMenuItem jMenuItemCategory;
    private javax.swing.JMenuItem jMenuItemClose;
    private javax.swing.JMenuItem jMenuItemConditions;
    private javax.swing.JMenuItem jMenuItemEmloyerData;
    private javax.swing.JMenuItem jMenuItemFinishingStatus;
    private javax.swing.JMenuItem jMenuItemInstitution;
    private javax.swing.JMenuItem jMenuItemMeetingType;
    private javax.swing.JMenuItem jMenuItemNewElement;
    private javax.swing.JMenuItem jMenuItemNewMeeting;
    private javax.swing.JMenuItem jMenuItemTopic;
    private javax.swing.JMenu jMenuStammdaten;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
