/*
 * TodoSubGUI.java
 *
 * Created on 10. Januar 2007, 06:06
 */
package todo.subgui;

import todo.core.Memo;
import todo.core.Topic;
import todo.core.FinStatus;
import todo.core.MeetingType;
import todo.core.Area;
import todo.core.Todo;
import todo.core.Institution;
import todo.core.Category;
import java.util.logging.Level;
import java.util.logging.Logger;
import todo.dialog.TodoNoteDialog;
import todo.joc.*;
import todo.dbcon.*;
import todo.tablemodel.*;
import todo.gui.TopicGUI;
import java.sql.*;
import java.util.ArrayList;
import java.util.Vector;
import java.util.StringTokenizer;
import java.util.Enumeration;
import java.util.Calendar;
import java.awt.Color;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.JOptionPane;
import todo.dbcon.DbStorage.StorageSession;
import todo.dbcon.drivers.MsAccessDriver;

/**
 *
 * @author  Marcus Hertel
 */
public class TodoSubGUI extends javax.swing.JFrame implements ChangeListener
{

	private static int status = 0;
	private static int todoID;
	private static String cat;
	private static String topic;
	private Todo td = new Todo();
	private static Connection con;
	private Vector responsible = new Vector();
	private Vector involved = new Vector();
	private static int meetingID;
	private Calendar cal;
	private static boolean tbz_status = false;
	private boolean reDateChange = false;
	private boolean hideElement = false;

	/** Creates new form TodoSubGUI */
	public TodoSubGUI(int status, int meetingID, String category, String topic, int todoID, boolean hideElements)
	{
		this.status = status;
		this.meetingID = meetingID;
		this.cat = category;
		this.topic = topic;
		this.todoID = todoID;
		this.hideElement = hideElement;
		cal = Calendar.getInstance();
		initComponents();
		jTextFieldDay.setVisible(false);
		jTextFieldMonth.setVisible(false);
		jTextFieldYear.setVisible(false);
		jComboBoxTopic.setEnabled(false);
		jLabelError.setVisible(false);
		jButtonSendTask.setVisible(false);
		jButtonMemo.setVisible(false);
		if (status == 0)
		{
			//Neues Protokollelement soll angelegt werden
			newTodoInit();
		}
		if (status == 1)
		{
			//Bestehendes Protokollelement soll bearbeitet werden
			editTodoInit(hideElements);
		}
		setCalendarChooser();
		jTableEmployees.setAutoCreateRowSorter(true);
		jTableInvolved.setAutoCreateRowSorter(true);
		jTableResponsibles.setAutoCreateRowSorter(true);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonMemo = new javax.swing.JButton();
        jButtonNewCategory = new javax.swing.JButton();
        jButtonNewInstitution = new javax.swing.JButton();
        jButtonNewStatus = new javax.swing.JButton();
        jButtonEditTopicAndArea = new javax.swing.JButton();
        jButtonAddResponsible = new javax.swing.JButton();
        jButtonAddInvolved = new javax.swing.JButton();
        jButtonRemoveInvolved = new javax.swing.JButton();
        jButtonRemoveResponsible = new javax.swing.JButton();
        jButtonSaveAndExit = new javax.swing.JButton();
        jComboBoxCategory = new javax.swing.JComboBox();
        jComboBoxInstitution = new javax.swing.JComboBox();
        jComboBoxStatus = new javax.swing.JComboBox();
        jComboBoxArea = new javax.swing.JComboBox();
        jComboBoxTopic = new javax.swing.JComboBox();
        jCheckBoxNoReDate = new javax.swing.JCheckBox();
        jCalendarComboBoxReDate = new de.wannawork.jcalendar.JCalendarComboBox();
        jTextFieldDay = new javax.swing.JTextField();
        jTextFieldMonth = new javax.swing.JTextField();
        jTextFieldYear = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jLabelTopicAndArea = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmployees = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableResponsibles = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableInvolved = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabelError = new javax.swing.JLabel();
        jButtonSendTask = new javax.swing.JButton();
        jComboBoxReMeetType = new javax.swing.JComboBox();
        jLabelReDateAndMeetType = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextHeading = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaContent = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Protokolleinträge erstellen und bearbeiten");
        setMinimumSize(new java.awt.Dimension(550, 530));
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(520, 530));
        jPanel1.setPreferredSize(new java.awt.Dimension(520, 530));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonMemo.setText("Bearbeitungs-Notiz");
        jButtonMemo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMemoActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonMemo, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 30, 130, -1));

        jButtonNewCategory.setText("Neu...");
        jButtonNewCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewCategoryActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonNewCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, -1, -1));

        jButtonNewInstitution.setText("Neu...");
        jButtonNewInstitution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewInstitutionActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonNewInstitution, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, -1, -1));

        jButtonNewStatus.setText("Neu...");
        jButtonNewStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewStatusActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonNewStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 30, 70, -1));

        jButtonEditTopicAndArea.setText("Bearbeiten");
        jButtonEditTopicAndArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditTopicAndAreaActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonEditTopicAndArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 150, -1, -1));

        jButtonAddResponsible.setText(">");
        jButtonAddResponsible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddResponsibleActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonAddResponsible, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 440, 50, -1));

        jButtonAddInvolved.setText(">");
        jButtonAddInvolved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddInvolvedActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonAddInvolved, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 560, 50, -1));

        jButtonRemoveInvolved.setText("<");
        jButtonRemoveInvolved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveInvolvedActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonRemoveInvolved, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 600, 50, -1));

        jButtonRemoveResponsible.setText("<");
        jButtonRemoveResponsible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveResponsibleActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonRemoveResponsible, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 480, 50, -1));

        jButtonSaveAndExit.setText("Speichern und Schliessen");
        jButtonSaveAndExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveAndExitActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSaveAndExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 650, -1, -1));

        jComboBoxCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxCategoryItemStateChanged(evt);
            }
        });
        jPanel1.add(jComboBoxCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 30, 150, -1));
        jPanel1.add(jComboBoxInstitution, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 150, -1));
        jPanel1.add(jComboBoxStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 30, 110, -1));

        jComboBoxArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxAreaItemStateChanged(evt);
            }
        });
        jPanel1.add(jComboBoxArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 150, -1));

        jComboBoxTopic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxTopicItemStateChanged(evt);
            }
        });
        jPanel1.add(jComboBoxTopic, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 150, 230, -1));

        jCheckBoxNoReDate.setText("keine WV");
        jCheckBoxNoReDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxNoReDate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBoxNoReDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxNoReDateItemStateChanged(evt);
            }
        });
        jPanel1.add(jCheckBoxNoReDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, -1, -1));

        jCalendarComboBoxReDate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCalendarComboBoxReDateStateChanged(evt);
            }
        });
        jPanel1.add(jCalendarComboBoxReDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 110, 20));
        jPanel1.add(jTextFieldDay, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 40, -1));
        jPanel1.add(jTextFieldMonth, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 80, 40, -1));
        jPanel1.add(jTextFieldYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, 60, -1));

        jLabel1.setText("Kategorie");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jLabel2.setText("Institution");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        jLabelStatus.setText("Status");
        jPanel1.add(jLabelStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, -1, -1));

        jLabelTopicAndArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Bereich und                                  Thema"));
        jPanel1.add(jLabelTopicAndArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 510, 50));

        jTableEmployees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableEmployees);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 220, 220));

        jLabel7.setText("Mitarbeiter");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, -1, -1));

        jTableResponsibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTableResponsibles);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 420, 210, 90));

        jLabel8.setText("Verantwortliche");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 400, -1, -1));

        jTableInvolved.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTableInvolved);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 540, 210, 100));

        jLabel9.setText("Beteiligte");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 520, -1, -1));
        jPanel1.add(jLabelError, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 690, 500, 30));

        jButtonSendTask.setText("Aufgabe erstellen");
        jButtonSendTask.setActionCommand("Aufgabe senden");
        jButtonSendTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendTaskActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSendTask, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 650, -1, -1));
        jPanel1.add(jComboBoxReMeetType, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 80, 120, -1));

        jLabelReDateAndMeetType.setBorder(javax.swing.BorderFactory.createTitledBorder("Wiedervorlage am           bei Sitzung"));
        jPanel1.add(jLabelReDateAndMeetType, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, 260, 70));

        jLabel3.setText("Inhalt");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, -1, -1));
        jPanel1.add(jTextHeading, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 510, -1));

        jLabel4.setText("Überschrift bzw. Tagesordnungspunkt");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        jTextAreaContent.setColumns(20);
        jTextAreaContent.setRows(5);
        jScrollPane4.setViewportView(jTextAreaContent);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 510, 130));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 690));

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Checkbox "kein WV_Datum" Listener
	 * falls checkbox selected - WV_DatumComboBox und WV_Sitzung unsichtbar
	 * sonst beide sichtbar
	 *
	 * @param evt
	 */
    private void jCheckBoxNoReDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxNoReDateItemStateChanged
		if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED)
		{
			jCalendarComboBoxReDate.setEnabled(false);
			jCalendarComboBoxReDate.setVisible(false);
			jComboBoxReMeetType.setVisible(false);
		}
		else
		{
			jCalendarComboBoxReDate.setEnabled(true);
			jCalendarComboBoxReDate.setVisible(true);
			jComboBoxReMeetType.setVisible(true);
		}
    }//GEN-LAST:event_jCheckBoxNoReDateItemStateChanged

    private void jButtonEditTopicAndAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditTopicAndAreaActionPerformed
		TopicGUI topicGUI = new TopicGUI();
		topicGUI.setVisible(true);
}//GEN-LAST:event_jButtonEditTopicAndAreaActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
		jTableEmployees.setModel(new EmployeeTableModel());
		jTableInvolved.setModel(new InvolvedTableModel(involved, meetingID));
		jTableResponsibles.setModel(new ResponsibleTableModel(responsible, meetingID));
		//Comboboxen neu initialisieren, weil evtl. neue
		//Kategorie,Status,Institution oder Bereich erstellt wurde
		if (!reDateChange)
		{
			if (status == 0)
			{
				newTodoInit();
			}
			if (status == 1)
			{
				editTodoInit(hideElement);
			}
		}
    }//GEN-LAST:event_formWindowGainedFocus

    private void jButtonNewStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewStatusActionPerformed
		String statusName = "";
		int statusID = 0;
		FinStatusSubGUI newFs = new FinStatusSubGUI(0, statusID, statusName);
		newFs.setVisible(true);
    }//GEN-LAST:event_jButtonNewStatusActionPerformed

    private void jButtonNewInstitutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewInstitutionActionPerformed
		String institution = "";
		int institutionID = 0;
		InstitutionSubGUI newInst = new InstitutionSubGUI(0, institutionID, institution);
		newInst.setVisible(true);
    }//GEN-LAST:event_jButtonNewInstitutionActionPerformed

    private void jButtonNewCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewCategoryActionPerformed
		int catID = 0;
		String catName = "";
		String catDescription = "";
		CategorySubGUI newCat = new CategorySubGUI(0, catID, catName, catDescription);
		newCat.setVisible(true);
    }//GEN-LAST:event_jButtonNewCategoryActionPerformed

    private void jButtonSaveAndExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveAndExitActionPerformed
		switch (status)
		{
			case 0:         // status=0, neues Protokollelement anlegen
				// Bei Kategorie "Aufgabe" MUSS ein WV-Datum eingegebene werden -> sonst Fehlermeldung und break;
				if (jComboBoxCategory.getSelectedItem().toString().equals("Aufgabe") && jCheckBoxNoReDate.isSelected() == true)
				{
					JOptionPane.showMessageDialog(null, "Fehler beim Speichern. " +
							"Für die Kategorie 'Aufgabe' muss ein Wiedervorlagedatum angegeben werden",
							"Fehler", JOptionPane.ERROR_MESSAGE);
					reDateChange = true;

				}
				else
				{
					if (jCheckBoxNoReDate.isSelected())
					{
						newTodo();
						setVisible(false);
					}
					else
					{
						// Überprüfen ob Wiedervorlagedatum nach aktuellem Datum -> sonst Fehlermeldung und break;
						if (jCalendarComboBoxReDate.getCalendar().getTime().before(Calendar.getInstance().getTime()))
						{
							JOptionPane.showMessageDialog(null, "Fehler beim Speichern. " +
									"Das angegebene Wiedervorlagedatum liegt zeitlich vor dem aktuellen Datum",
									"Fehler", JOptionPane.ERROR_MESSAGE);
							reDateChange = true;
						}
						else
						{
							newTodo();
							setVisible(false);
						}
					}
				}
				break;
			case 1:         // status=1, vorhandenes Protokollelement bearbeiten,
				// nur Status darf geändert werden
				editTodo();
				setVisible(false);
				break;
			default:
				System.out.println("Allgemeiner Fehler beim Speichern von Protokollelement.");
				break;
		}
    }//GEN-LAST:event_jButtonSaveAndExitActionPerformed

    private void jButtonRemoveInvolvedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveInvolvedActionPerformed
		if (jTableInvolved.getSelectedRow() != -1)
		{
			Object invID = jTableEmployees.getValueAt(jTableEmployees.getSelectedRow(), -1);
			Integer temp = new Integer(String.valueOf(invID));
			int iID = temp.intValue();
			if (involved.contains(iID))
			{
				involved.removeElement(iID);
			}
		}
		jTableInvolved.setModel(new InvolvedTableModel(involved, meetingID));
    }//GEN-LAST:event_jButtonRemoveInvolvedActionPerformed

    private void jButtonAddInvolvedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddInvolvedActionPerformed
		if (jTableEmployees.getSelectedRow() != -1)
		{
			Object invID = jTableEmployees.getValueAt(jTableEmployees.getSelectedRow(), -1);
			Integer temp = new Integer(String.valueOf(invID));
			int iID = temp.intValue();
			if (!involved.contains(iID))
			{
				involved.add(iID);
			}
		}
		jTableInvolved.setModel(new InvolvedTableModel(involved, meetingID));
    }//GEN-LAST:event_jButtonAddInvolvedActionPerformed

    private void jButtonRemoveResponsibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveResponsibleActionPerformed
		if (jTableResponsibles.getSelectedRow() != -1)
		{
			Object respID = jTableEmployees.getValueAt(jTableEmployees.getSelectedRow(), -1);
			Integer temp = new Integer(String.valueOf(respID));
			int rID = temp.intValue();
			if (responsible.contains(rID))
			{
				responsible.removeElement(rID);
			}
		}
		jTableResponsibles.setModel(new ResponsibleTableModel(responsible, meetingID));
    }//GEN-LAST:event_jButtonRemoveResponsibleActionPerformed

    private void jButtonAddResponsibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddResponsibleActionPerformed
		if (jTableEmployees.getSelectedRow() != -1)
		{
			Object respID = jTableEmployees.getValueAt(jTableEmployees.getSelectedRow(), -1);
			Integer temp = new Integer(String.valueOf(respID));
			int rID = temp.intValue();
			if (!responsible.contains(rID))
			{
				responsible.add(rID);
			}
		}
		jTableResponsibles.setModel(new ResponsibleTableModel(responsible, meetingID));
    }//GEN-LAST:event_jButtonAddResponsibleActionPerformed

    private void jComboBoxTopicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxTopicItemStateChanged
		/* da von Bereich auf Thema aktualisiert wird passiert hier nichts
		 *
		if(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
		if(!(String.valueOf(jComboBoxTopic.getSelectedItem()).equals("Bitte wählen..."))) {
		ArrayList<Area> area = new ArrayList<Area>();
		area = getAreasForTopic(String.valueOf(jComboBoxTopic.getSelectedItem()));
		jComboBoxArea.removeAllItems();
		jComboBoxArea.addItem("Bitte wählen...");
		for (int i = 0; i < area.size(); i++) {
		jComboBoxArea.addItem(area.get(i).getAreaName());
		}
		}
		}
		 */
    }//GEN-LAST:event_jComboBoxTopicItemStateChanged

    private void jComboBoxAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxAreaItemStateChanged
		if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED)
		{
			if (!(String.valueOf(jComboBoxArea.getSelectedItem()).equals("Bitte wählen...")))
			{
				ArrayList<Topic> topicAL = new ArrayList<Topic>();
				topicAL = getTopicsForArea(String.valueOf(jComboBoxArea.getSelectedItem()));
				jComboBoxTopic.removeAllItems();
				jComboBoxTopic.addItem("Bitte wählen...");
				for (int i = 0; i < topicAL.size(); i++)
				{
					jComboBoxTopic.addItem(topicAL.get(i).getName());
				}
				jComboBoxTopic.setEnabled(true);
			}
		}
    }//GEN-LAST:event_jComboBoxAreaItemStateChanged

    private void jCalendarComboBoxReDateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCalendarComboBoxReDateStateChanged
		if (evt.getSource() == jCalendarComboBoxReDate)
		{
			java.util.Date newReDate = new java.util.Date();
			cal.set(jCalendarComboBoxReDate.getCalendar().get(cal.YEAR),
					jCalendarComboBoxReDate.getCalendar().get(cal.MONTH) + 1,
					jCalendarComboBoxReDate.getCalendar().get(cal.DAY_OF_MONTH));
			reDateChange = true;
		}
    }//GEN-LAST:event_jCalendarComboBoxReDateStateChanged

	/**
	 * Anhand der eingegebenen Daten wird eine Outlook-Aufgabe(Aufgabenanfrage) erstellt
	 *
	 * @param evt
	 */
    private void jButtonSendTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendTaskActionPerformed

		Vector respMailVec = new Vector();  //enthält Mail-Adressen der unter Verantwortliche eingtragenen MA
		Enumeration e = responsible.elements();
		while (e.hasMoreElements())
		{
			if (!responsible.isEmpty())
			{
				try
				{
					int empID = Integer.valueOf(e.nextElement().toString()).intValue();
					respMailVec.addElement(getMailAddressByEmpID(empID));
				} catch (Exception ex)
				{
					JOptionPane.showMessageDialog(null, "Fehler beim Ermitteln von E-Mail Adressen.",
							"Fehler", JOptionPane.ERROR_MESSAGE);
					ex.printStackTrace();
				}
			}
			else
			{
				JOptionPane.showMessageDialog(null, "Fehler beim Ermitteln von E-Mail Adressen." +
						"Es wurden keine Verantwortlichen festgelegt!", "Fehler", JOptionPane.ERROR_MESSAGE);
			}
		}

		TaskRequest task = new TaskRequest("TOP x: " + jComboBoxArea.getSelectedItem().toString() + " - " +
				jComboBoxTopic.getSelectedItem().toString(), jComboBoxArea.getSelectedItem().toString(),
				jComboBoxTopic.getSelectedItem().toString(), jTextHeading.getText(),
				jCalendarComboBoxReDate.getCalendar().getTime(), respMailVec);
		if (task.isSet())
		{
			task.create();
			//Timestamp setzen und in DB speichern
			//INSERT INTO Task VALUES (ProtElemID, created)
		}
		else
		{
			JOptionPane.showMessageDialog(null, "Fehler beim Erstellen der Aufgabe. " +
					"Outlook-Aufgabe konnte nicht erstellt werden", "Fehler", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_jButtonSendTaskActionPerformed

    private void jComboBoxCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxCategoryItemStateChanged
		if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED)
		{
			if (!(String.valueOf(jComboBoxCategory.getSelectedItem()).equals("Aufgabe")))
			{
				jButtonSendTask.setVisible(true);
			}
			else
			{
				jButtonSendTask.setVisible(false);
			}
		}
    }//GEN-LAST:event_jComboBoxCategoryItemStateChanged

    private void jButtonMemoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMemoActionPerformed
    }//GEN-LAST:event_jButtonMemoActionPerformed

	public void stateChanged(ChangeEvent e)
	{
	}

	public void initComboBoxes()
	{
		ArrayList<Category> catAL = new ArrayList<Category>();
		ArrayList<Institution> inst = new ArrayList<Institution>();
		ArrayList<FinStatus> stat = new ArrayList<FinStatus>();
		ArrayList<Area> area = new ArrayList<Area>();
		ArrayList<Topic> topicAL = new ArrayList<Topic>();
		ArrayList<MeetingType> meetTypeAL = new ArrayList<MeetingType>();
		catAL = getAllCategories();
		inst = getAllInstitutions();
		stat = getEveryStatus();
		area = getAllAreas();
		topicAL = getAllTopics();
		meetTypeAL = getAllMeetingTypes();
		for (int i = 0; i < catAL.size(); i++)
		{
			jComboBoxCategory.addItem(catAL.get(i).getCatName());
		}
		for (int i = 0; i < inst.size(); i++)
		{
			jComboBoxInstitution.addItem(inst.get(i).getInstitution());
		}
		for (int i = 0; i < stat.size(); i++)
		{
			jComboBoxStatus.addItem(stat.get(i).getStatusName());
		}
		for (int i = 0; i < area.size(); i++)
		{
			jComboBoxArea.addItem(area.get(i).getAreaName());
		}
		for (int i = 0; i < topicAL.size(); i++)
		{
			jComboBoxTopic.addItem(topicAL.get(i).getName());
		}
		// "Alle" muss hinzugefügt werden da Standard-Wert,
		// aber nicht in Tabelle Sitzungsart enthalten
		jComboBoxReMeetType.addItem("Alle");
		for (int i = 0; i < meetTypeAL.size(); i++)
		{
			jComboBoxReMeetType.addItem(meetTypeAL.get(i).getMeetingType());
		}
	}

	/**
	 * Initialisierung des Kalender-Feldes
	 */
	public void setCalendarChooser()
	{
		jCalendarComboBoxReDate.addChangeListener(this);
	}

	/**
	 * GUI für neues Protokollelement vorbereiten
	 * ComboBoxen leeren und initialisieren
	 */
	public void newTodoInit()
	{
		clearComboBoxes();
		jComboBoxCategory.addItem("Bitte wählen...");
		jComboBoxInstitution.addItem("Bitte wählen...");
		jComboBoxStatus.addItem("Bitte wählen...");
		jComboBoxArea.addItem("Bitte wählen...");
		jComboBoxTopic.addItem("Bitte wählen...");
		initComboBoxes();
		jCheckBoxNoReDate.setSelected(true);
		if (isTask())
		{
			jButtonSendTask.setVisible(true);
		}
		else
		{
			jButtonSendTask.setVisible(false);
		}
	}

	/**
	 * GUI anpassen für Bearbeitung eines Protokollelements
	 * Inhalte aus DB holen
	 */
	public void editTodoInit(boolean hideElements)
	{
		int tbz = 0;
		clearComboBoxes();
		initComboBoxes();
		involved.clear();
		responsible.clear();
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Protokollelement WHERE ToDoID=" + todoID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				jComboBoxCategory.setSelectedItem(getCatNameByID(rst.getInt("KategorieID")));
				jComboBoxInstitution.setSelectedItem(getInstNameByID(rst.getInt("InstitutionsID")));
				jComboBoxStatus.setSelectedItem(getStatNameByID(rst.getInt("StatusID")));
				tbz = rst.getInt("TBZuordnung_ID");
				jComboBoxArea.setSelectedItem(getAreaNameByTBZ_ID(tbz));
				jComboBoxTopic.setSelectedItem(getTopicNameByTBZ_ID(tbz));
				jComboBoxReMeetType.setSelectedItem(getMeetingTypeByID(rst.getInt("WV_Sitzungsart")));
				jTextHeading.setText(rst.getString("Überschrift"));
				jTextAreaContent.setText(rst.getString("Inhalt"));
				Date reDate = rst.getDate("Wiedervorlagedatum");
				if (reDate != null)
				{
					cal.setTime(reDate);
					jCalendarComboBoxReDate.setCalendar(cal);
					jCheckBoxNoReDate.setSelected(false);
				}
				else
				{
					jCalendarComboBoxReDate.setEnabled(false);
					jCheckBoxNoReDate.setSelected(true);
				}
				td.setResponse(rst.getString("Verantwortliche"));
				td.setOthers(rst.getString("Beteiligte"));
				getAllResponsibles();
				getAllInvolved();
			}
			rst.close();
			stmt.close();

		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		// Button zum Erstellen einer Outlook-Aufgabe einblenden wenn Kategorie=Aufgabe
		if (isTask())
		{
			jButtonSendTask.setVisible(true);
		}
		else
		{
			jButtonSendTask.setVisible(false);
		}
		if (hideElements)
		{
			setInputDisabled();
		}
	}

	/**
	 * Helper-Fkt. zum deaktivieren und verbergen von Steuerungselementen
	 * Wird verwendet in editTodoInit(), da hier keine Änderungen außer
	 * WV und Status zulässig sind
	 */
	public void setInputDisabled()
	{
		jComboBoxCategory.setEnabled(false);
		jButtonNewCategory.setVisible(false);
		jComboBoxInstitution.setEnabled(false);
		jButtonNewInstitution.setVisible(false);
		jComboBoxArea.setEnabled(false);
		jComboBoxTopic.setEnabled(false);
		jButtonEditTopicAndArea.setVisible(false);
		jTextHeading.setEnabled(false);
		jTableEmployees.setEnabled(false);
		jTableResponsibles.setEnabled(false);
		jTableInvolved.setEnabled(false);
		jButtonAddResponsible.setVisible(false);
		jButtonAddInvolved.setVisible(false);
		jButtonRemoveResponsible.setVisible(false);
		jButtonRemoveInvolved.setVisible(false);
		jCalendarComboBoxReDate.setEnabled(false);
		jTextAreaContent.setEnabled(false);
		jButtonSendTask.setEnabled(false);
	}

	/*
	 * Funktion zum Abspeichern eines neuen Protokollpunkts in der Datenbank
	 * Bereich und Thema müssen angegeben werden
	 *
	 */
	public void newTodo()
	{
		java.util.Date reDate = new java.util.Date();
		StringBuffer dbStringOthers = new StringBuffer("");
		StringBuffer dbStringResponsible = new StringBuffer("");
		int tbz_id = -1;
		boolean tbz_ok = true;
		jLabelError.setForeground(Color.red);

		if (!String.valueOf(jComboBoxCategory.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setCategoryID(getCatIDByName(String.valueOf(jComboBoxCategory.getSelectedItem())));
		}
		else
		{
			td.setCategoryID(-1);
		}

		if (!String.valueOf(jComboBoxInstitution.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setInstitutionID(getInstIDByName(String.valueOf(jComboBoxInstitution.getSelectedItem())));
		}
		else
		{
			td.setInstitutionID(-1);
		}

		if (!String.valueOf(jComboBoxStatus.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setStatusID(getStatIDByName(String.valueOf(jComboBoxStatus.getSelectedItem())));
		}
		else
		{
			td.setStatusID(-1);
		}

		if (!String.valueOf(jComboBoxArea.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setAreaID(getAreaIDByName(String.valueOf(jComboBoxArea.getSelectedItem())));
		}
		else
		{
			//jLabelError.setText("Sie müssen Bereich und Thema angeben!");
			//jLabelError.setVisible(true);
			//tbz_ok = false;
			td.setAreaID(-1);
		}

		if (!String.valueOf(jComboBoxTopic.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setTopicID(getTopicIDByName(String.valueOf(jComboBoxTopic.getSelectedItem())));
		}
		else
		{
			//jLabelError.setText("Sie müssen Bereich und Thema angeben!");
			//jLabelError.setVisible(true);
			//tbz_ok = false;
			td.setTopicID(-1);
		}

		if (!String.valueOf(jComboBoxReMeetType.getSelectedItem()).equals("Alle"))
		{
			td.setReMeetType(getReMeetTypeByName(String.valueOf(jComboBoxReMeetType.getSelectedItem())));
		}
		else
		{
			//jLabelError.setText("Sie müssen Bereich und Thema angeben!");
			//jLabelError.setVisible(true);
			//tbz_ok = false;
			td.setReMeetType(-1);
		}

		if (td.getAreaID() != -1 & td.getTopicID() != -1)
		{
			tbz_id = getTBZ_ID_ByAreaAndTopicID(td.getAreaID(), td.getTopicID());
		}
		else
		{
			tbz_id = -1;
		}

		reDate = jCalendarComboBoxReDate.getCalendar().getTime();
		td.setReDate(reDate);

		if (!jCheckBoxNoReDate.isSelected())
		{
			td.setReMeetingEnabled(true);
		}

		td.setHeading(jTextHeading.getText());
		td.setContent(jTextAreaContent.getText());

		//Beteiligte
		Enumeration othersEnum = involved.elements();
		while (othersEnum.hasMoreElements())
		{
			int employeeID = Integer.valueOf(othersEnum.nextElement().toString()).intValue();
			dbStringOthers.append("," + employeeID);
		}
		td.setOthers(String.valueOf(dbStringOthers));
		//Verantwortliche
		Enumeration respEnum = responsible.elements();
		while (respEnum.hasMoreElements())
		{
			int employeeID = Integer.valueOf(respEnum.nextElement().toString()).intValue();
			dbStringResponsible.append("," + employeeID);
		}
		td.setResponse(String.valueOf(dbStringResponsible));
		//if(tbz_ok) {
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();
		Date dat = new Date(td.getReDate().getTime());
		System.out.println("Datum: " + dat);
		try
		{
			Statement stmt = con.createStatement();
			String sql = "INSERT INTO Protokollelement (KategorieID, SitzungsID, " +
					"StatusID, InstitutionsID, BereichID, Thema, Inhalt, Wiedervorlagedatum, " +
					"Verantwortliche, Beteiligte, TBZuordnung_ID, WV_Sitzungsart, Überschrift," +
					"WiedervorlageGesetzt) " +
					"VALUES (" + td.getCategoryID() +
					", " + meetingID + ", " + td.getStatusID() +
					", " + td.getInstitutionID() + ", " + td.getAreaID() +
					", '" + td.getTopic() + "', '" + td.getContent() +
					"', '" + dat + "', '" + td.getRespons() +
					"', '" + td.getOthers() + "', " + tbz_id +
					", " + td.getReMeetType() + ",'" + td.getHeading() + "'," +
					td.getReMeetingEnabled() + ")";

			stmt.executeUpdate(sql);
			stmt.close();

		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		DB_ToDo_Connect.closeDB(con);
		//}
	}

	/**
	 * Funktion zum Bearbeiten eines vorhandenen Protokollpunkts und
	 * Speichern der Änderungen in der Datenbank;
	 * Zulässige Änderungen sind Status und Wiedervorlage-Infos
	 */
	public void editTodo()
	{
		// da nur das verändern des Status und der WV(Datum und Art) erlaubt ist
		// müssen auch nur diese Felder abgefragt und anschließend in
		// der Tabelle Protokollelement aktualisiert werden

		// ### Status
		if (!String.valueOf(jComboBoxStatus.getSelectedItem()).equals("Bitte wählen..."))
		{
			td.setStatusID(getStatIDByName(String.valueOf(jComboBoxStatus.getSelectedItem())));
		}
		else
		{
			td.setStatusID(-1);
		}
		if (!String.valueOf(jComboBoxReMeetType.getSelectedItem()).equals("Alle"))
		{
			td.setReMeetType(getReMeetTypeByName(String.valueOf(jComboBoxReMeetType.getSelectedItem())));
		}
		else
		{
			td.setReMeetType(-1);
		}

		TodoNoteDialog subgui = null;

		if (jComboBoxStatus.getSelectedItem().toString().equals("erledigt") &&
				jComboBoxCategory.getSelectedItem().toString().equals("Aufgabe"))
		{
			subgui = new TodoNoteDialog(this, true);
			subgui.setVisible(true);
		}

		if (subgui != null)
		{
			Memo newMemo = new Memo();
			newMemo.setComment(subgui.getNote());
			newMemo.setDate(subgui.getDate());
			newMemo.setTodoID(todoID);
			newMemo.setUser(subgui.getUser());

			DbStorage dbs = new DbStorage();
			dbs.setDbDriver(new MsAccessDriver());
			DB_ToDo_Connect.openDB();
			con = DB_ToDo_Connect.getCon();
			dbs.setDatabaseConnection(con);
			try
			{
				dbs.insert(newMemo);
			} catch (DbStorageException ex)
			{
				Logger.getLogger(TodoSubGUI.class.getName()).log(Level.SEVERE, null, ex);
			}
			DB_ToDo_Connect.closeDB(con);
		}

		td.setReDate(jCalendarComboBoxReDate.getCalendar().getTime());

		// ### Update Prtotokollelement
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		DB_ToDo_Connect.openDB();
		con = DB_ToDo_Connect.getCon();
		Date dat = new Date(td.getReDate().getTime());

		try
		{
			Statement stmt = con.createStatement();
			String sql = "UPDATE Protokollelement SET StatusID = '" + td.getStatusID() + "', Wiedervorlagedatum = '" + dat + "', WV_Sitzungsart = '" + td.getReMeetType() + "' WHERE ToDoID = " + todoID;
			stmt.executeUpdate(sql);
			stmt.close();

		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		DB_ToDo_Connect.closeDB(con);
	}

	public ArrayList getAllCategories()
	{
		ArrayList<Category> catObjects = new ArrayList<Category>();
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				catObjects.add(new Category(rst.getString("Name"),
						rst.getString("Beschreibung")));
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return catObjects;
	}

	public ArrayList getAllInstitutions()
	{
		ArrayList<Institution> instObjects = new ArrayList<Institution>();
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Institution";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				instObjects.add(new Institution(rst.getString("Name")));
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return instObjects;
	}

	public ArrayList getEveryStatus()
	{
		ArrayList<FinStatus> statObjects = new ArrayList<FinStatus>();
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				statObjects.add(new FinStatus(rst.getString("Name")));
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return statObjects;
	}

	public ArrayList getAllAreas()
	{
		ArrayList<Area> areaObjects = new ArrayList<Area>();
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Bereich";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				areaObjects.add(new Area(rst.getString("Name"),
						rst.getString("Beschreibung")));
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return areaObjects;
	}

	public ArrayList getAllTopics()
	{
		ArrayList<Topic> topicObjects = new ArrayList<Topic>();
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Thema";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				topicObjects.add(new Topic(rst.getString("Name")));
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return topicObjects;
	}

	public ArrayList getAllMeetingTypes()
	{
		ArrayList<MeetingType> meetingTypeObjects = new ArrayList<MeetingType>();
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsart";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				meetingTypeObjects.add(new MeetingType(rst.getString("Name")));
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return meetingTypeObjects;
	}

	/**
	 * Wenn in jComboBoxTopic ein Thema gewählt wird, ermittlet diese Funktion
	 * alle Bereiche welche dem Thema zugeordnet sind (Tabelle TBZ)
	 *
	 * @param topicName
	 * @return
	 */
	public ArrayList getAreasForTopic(String topicName)
	{
		ArrayList<Area> areaObjects = new ArrayList<Area>();
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM TBZ WHERE ThemaID=" + getTopicIDByName(topicName);
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				areaObjects.add(new Area(rst.getInt("BereichID")));
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);

		for (int i = 0; i < areaObjects.size(); i++)
		{
			int tempID = areaObjects.get(i).getAreaID();
			areaObjects.get(i).setAreaName(getAreaNameByID(tempID));
		}
		return areaObjects;
	}

	/**
	 * Wenn in jComboBoxArea ein Bereich gewählt wird, ermittlet diese Funktion
	 * alle Themen welche dem Bereich zugeordnet sind (Tabelle TBZ)
	 *
	 * @param areaName
	 * @return
	 */
	public ArrayList getTopicsForArea(String areaName)
	{
		ArrayList<Topic> topicObjects = new ArrayList<Topic>();
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM TBZ WHERE BereichID=" + getAreaIDByName(areaName);
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				topicObjects.add(new Topic(rst.getInt("ThemaID")));
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);

		for (int i = 0; i < topicObjects.size(); i++)
		{
			int tempID = topicObjects.get(i).getTopicID();
			topicObjects.get(i).setName(getTopicNameByID(tempID));
		}
		return topicObjects;
	}

	/**
	 *
	 * @param catName
	 * @return
	 */
	public int getCatIDByName(String catName)
	{
		int id = 0;
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie WHERE Name='" + catName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				id = rst.getInt("KategorieID");
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return id;
	}

	/**
	 *
	 * @param instName
	 * @return
	 */
	public int getInstIDByName(String instName)
	{
		int id = 0;
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Institution WHERE Name='" + instName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				id = rst.getInt("InstitutionID");
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return id;
	}

	/**
	 *
	 * @param statName
	 * @return
	 */
	public int getStatIDByName(String statName)
	{
		int id = 0;
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status WHERE Name='" + statName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				id = rst.getInt("StatusID");
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return id;
	}

	/**
	 *
	 * @param areaName
	 * @return
	 */
	public int getAreaIDByName(String areaName)
	{
		int id = 0;
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Bereich WHERE Name='" + areaName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				id = rst.getInt("BereichID");
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return id;
	}

	/**
	 *
	 * @param topicName
	 * @return
	 */
	public int getTopicIDByName(String topicName)
	{
		int id = 0;
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Thema WHERE Name='" + topicName + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				id = rst.getInt("ThemaID");
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return id;
	}

	public int getReMeetTypeByName(String meetType)
	{
		int id = 0;
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Sitzungsart WHERE Name='" + meetType + "'";
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				id = rst.getInt("SitzungsartID");
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return id;
	}

	/**
	 *
	 * @param areaID
	 * @param topicID
	 * @return int: TB_ZuordnungID
	 */
	public int getTBZ_ID_ByAreaAndTopicID(int areaID, int topicID)
	{
		int tbz_id = -1;
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM TBZ WHERE BereichID=" + td.getAreaID() +
					" AND ThemaID=" + td.getTopicID();
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				tbz_id = rst.getInt("TBZ_ID");
			}
			rst.close();
			stmt.close();

		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return tbz_id;
	}

	/**
	 *
	 * @param id
	 * @return String: Name der Kategorie
	 */
	public String getCatNameByID(int id)
	{
		String name = "";
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Kategorie WHERE KategorieID=" + id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return name;
	}

	/**
	 *
	 * @param id
	 * @return String: Name der Institution
	 */
	public String getInstNameByID(int id)
	{
		String name = "";
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Institution WHERE InstitutionID=" + id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return name;
	}

	/**
	 *
	 * @param id
	 * @return
	 */
	public String getStatNameByID(int id)
	{
		String name = "";
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Status WHERE StatusID=" + id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return name;
	}

	/**
	 *
	 * @param tbz_id
	 * @return
	 */
	public String getAreaNameByTBZ_ID(int tbz_id)
	{
		String name = "";
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM TBZ WHERE TBZ_ID=" + tbz_id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				Statement stmt2 = con.createStatement();
				String sql2 = "SELECT * FROM Bereich WHERE BereichID=" + rst.getInt("BereichID");
				ResultSet rst2 = stmt2.executeQuery(sql2);

				while (rst2.next())
				{
					name = rst2.getString("Name");
				}
				rst2.close();
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return name;
	}

	/**
	 *
	 * @param tbz_id
	 * @return
	 */
	public String getTopicNameByTBZ_ID(int tbz_id)
	{
		String name = "";
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM TBZ WHERE TBZ_ID=" + tbz_id;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				Statement stmt2 = con.createStatement();
				String sql2 = "SELECT * FROM Thema WHERE ThemaID=" + rst.getInt("ThemaID");
				ResultSet rst2 = stmt2.executeQuery(sql2);

				while (rst2.next())
				{
					name = rst2.getString("Name");
				}
				rst2.close();
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return name;
	}

	/**
	 *
	 * @param topicID
	 * @return
	 */
	public String getTopicNameByID(int topicID)
	{
		String name = "";
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Thema WHERE ThemaID=" + topicID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return name;
	}

	/**
	 *
	 * @param areaID
	 * @return
	 */
	public String getAreaNameByID(int areaID)
	{
		String name = "";
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Bereich WHERE BereichID=" + areaID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				name = rst.getString("Name");
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return name;
	}

	/**
	 *
	 * @param meetTypeID
	 * @return
	 */
	public String getMeetingTypeByID(int meetTypeID)
	{
		String name = "";
		DB_ToDo_Connect dbCon = new DB_ToDo_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		if (meetTypeID == -1)
		{
			// Wenn MeetTypeID = -1 dann wurde keine Wiedervorlage-Sitzungsart hinterlegt
			// return "Alle"
			name = "Alle";
		}
		else
		{
			try
			{
				Statement stmt = con.createStatement();
				String sql = "SELECT * FROM Sitzungsart WHERE SitzungsartID=" + meetTypeID;
				ResultSet rst = stmt.executeQuery(sql);

				while (rst.next())
				{
					name = rst.getString("Name");
				}
				rst.close();
				stmt.close();
			} catch (Exception e)
			{
				System.out.println(e.toString());
				System.exit(1);
			}
		}
		dbCon.closeDB(con);
		return name;
	}

	/**
	 *
	 */
	public void getAllInvolved()
	{
		if (td.getOthers() != null)
		{
			StringTokenizer tokenizer = new StringTokenizer(td.getOthers(), ", ");
			while (tokenizer.hasMoreTokens())
			{
				if (tokenizer.countTokens() > 0)
				{
					String temp = String.valueOf(tokenizer.nextToken());
					int partID = Integer.valueOf(temp);
					System.out.println("ID:" + partID);
					involved.add(partID);
				}
				else
				{
					continue;
				}
			}
		}
	}

	/**
	 *
	 */
	public void getAllResponsibles()
	{
		Vector respVec = new Vector();
		if (td.getRespons() != null)
		{
			StringTokenizer tokenizer = new StringTokenizer(td.getRespons(), ", ");
			while (tokenizer.hasMoreTokens())
			{
				if (tokenizer.countTokens() > 0)
				{
					String temp = String.valueOf(tokenizer.nextToken());
					int partID = Integer.valueOf(temp);
					responsible.add(partID);
				}
				else
				{
					continue;
				}
			}
		}
	}

	/**
	 * Anhand der Mitarbeiter-ID die Mail-Adresse aus MA-DB ermitteln
	 *
	 * @param empID
	 * @return String: E-Mail-Adresse
	 */
	public String getMailAddressByEmpID(int empID)
	{
		String mail = "";
		DB_Mitarbeiter_Connect dbCon = new DB_Mitarbeiter_Connect();
		dbCon.openDB();
		con = dbCon.getCon();

		try
		{
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM Stammdaten WHERE Personalnummer=" + empID;
			ResultSet rst = stmt.executeQuery(sql);

			while (rst.next())
			{
				mail = rst.getString("E_Mail");
				if (mail.equals("") || mail == null)
				{
					mail = rst.getString("E_Mail2");
				}
			}
			rst.close();
			stmt.close();
		} catch (Exception e)
		{
			System.out.println(e.toString());
			System.exit(1);
		}
		dbCon.closeDB(con);
		return mail;
	}

	/**
	 *
	 * @return boolean
	 * True wenn Protokollelement "Aufgabe" ist, false sonst
	 */
	public boolean isTask()
	{
		if (jComboBoxCategory.getSelectedItem().toString().equals("Aufgabe"))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	/**
	 *
	 */
	public void clearComboBoxes()
	{
		jComboBoxCategory.removeAllItems();
		jComboBoxInstitution.removeAllItems();
		jComboBoxStatus.removeAllItems();
		jComboBoxArea.removeAllItems();
		jComboBoxTopic.removeAllItems();
		jComboBoxReMeetType.removeAllItems();
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddInvolved;
    private javax.swing.JButton jButtonAddResponsible;
    private javax.swing.JButton jButtonEditTopicAndArea;
    private javax.swing.JButton jButtonMemo;
    private javax.swing.JButton jButtonNewCategory;
    private javax.swing.JButton jButtonNewInstitution;
    private javax.swing.JButton jButtonNewStatus;
    private javax.swing.JButton jButtonRemoveInvolved;
    private javax.swing.JButton jButtonRemoveResponsible;
    private javax.swing.JButton jButtonSaveAndExit;
    private javax.swing.JButton jButtonSendTask;
    private de.wannawork.jcalendar.JCalendarComboBox jCalendarComboBoxReDate;
    private javax.swing.JCheckBox jCheckBoxNoReDate;
    private javax.swing.JComboBox jComboBoxArea;
    private javax.swing.JComboBox jComboBoxCategory;
    private javax.swing.JComboBox jComboBoxInstitution;
    private javax.swing.JComboBox jComboBoxReMeetType;
    private javax.swing.JComboBox jComboBoxStatus;
    private javax.swing.JComboBox jComboBoxTopic;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelError;
    private javax.swing.JLabel jLabelReDateAndMeetType;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelTopicAndArea;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTableEmployees;
    private javax.swing.JTable jTableInvolved;
    private javax.swing.JTable jTableResponsibles;
    private javax.swing.JTextArea jTextAreaContent;
    private javax.swing.JTextField jTextFieldDay;
    private javax.swing.JTextField jTextFieldMonth;
    private javax.swing.JTextField jTextFieldYear;
    private javax.swing.JTextField jTextHeading;
    // End of variables declaration//GEN-END:variables
}
